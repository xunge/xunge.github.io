<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XUNGE&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/3afa4f12b626cbdd52073f6eb6bd6810</icon>
  <subtitle>训哥的故事</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xungejiang.com/"/>
  <updated>2022-07-06T11:12:24.282Z</updated>
  <id>https://xungejiang.com/</id>
  
  <author>
    <name>训哥</name>
    <email>1063563945@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设备序列号 硬盘序列号 等查询方法</title>
    <link href="https://xungejiang.com//2022/07/06/sysinfo/"/>
    <id>https://xungejiang.com//2022/07/06/sysinfo/</id>
    <published>2022-07-06T11:05:00.000Z</published>
    <updated>2022-07-06T11:12:24.282Z</updated>
    
    <content type="html"><![CDATA[<h2 id="windows">windows</h2><h3 id="设备序列号">设备序列号</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wmic bios get serialnumber</span><br></pre></td></tr></table></figure><h3 id="硬盘序列号">硬盘序列号</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wmic diskdrive get serialnumber</span><br></pre></td></tr></table></figure><h3 id="操作系统安装时间">操作系统安装时间</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systeminfo</span><br></pre></td></tr></table></figure><h3 id="ip地址-mac地址">IP地址 MAC地址</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ipconfig /all</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;windows&quot;&gt;windows&lt;/h2&gt;
&lt;h3 id=&quot;设备序列号&quot;&gt;设备序列号&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>m1 mac 将系统装入外置硬盘</title>
    <link href="https://xungejiang.com//2021/11/24/mac-external-disk/"/>
    <id>https://xungejiang.com//2021/11/24/mac-external-disk/</id>
    <published>2021-11-24T10:10:16.000Z</published>
    <updated>2021-11-24T10:15:30.022Z</updated>
    
    <content type="html"><![CDATA[<p>在购买 m1 mac mini 时，硬盘选择多大的容量仍然是让人十分纠结，256GB 的空间需要1500元的差价，这个价格都可以购买 2TB 的 NVMe 硬盘了。</p><a id="more"></a><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/2021-11-08/WX20211108-204109@2x.png" alt="WX20211108-204109@2x"></p><p>因此，使用雷电3协议的外接硬盘是扩展硬盘容量的简单方法，尤其是对于mac mini这种几乎不移动的设备。</p><p>外接扩容有两种方法：</p><ul><li><p>一种是仅将大型软件、大型数据、虚拟机等存放到外置硬盘中，可以既享受高速的内置硬盘，也可以满足临时存储大型数据的需求。不需要重装系统，但是割裂了使用体验。</p></li><li><p>另一种是将整个系统都装在外置硬盘中，这样相当于购买了大容量的硬盘空间版本，保持了完整的系统使用体验，同时内置硬盘也可以用来存储文件。如果后续需要更换电脑，直接在新电脑上接上硬盘即可正常使用，无需备份恢复等操作（前提是内置硬盘系统与外置硬盘的系统大版本一致，之前所有的正版软件需要重新授权）。</p></li></ul><p>这里我选择的是第二种扩容方法，可能是采用了M1芯片的原因，网上的方法大多不好使，踩了一些坑，在此记录一下。</p><h2 id="硬盘盒和硬盘">硬盘盒和硬盘</h2><p>这里硬盘盒选择的牌子是ACASIS，只支持雷电3协议，性价比算是非常高的了，前两年雷电3协议的硬盘盒动辄要600多，今年降价了不少，这款2021双十一大概350元在拼多多买的，在正常运行时外壳微热不烫手，散热非常不错。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/2021-11-09/1661636465050_.pic.jpg" alt="1661636465050_.pic" style="zoom: 50%;"></p><p>硬盘选择的是闪迪1TB（sn550同款），固件21，发热量较小，硬盘盒几乎达到了硬盘的读写速度上限。虽然读写速度相较于内置硬盘有所下降，但是正常使用几乎感受不到区别。</p><figure><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/2021-11-08/%E6%88%AA%E5%B1%8F2021-11-05%20%E4%B8%8A%E5%8D%8810.25%20%E6%8B%B7%E8%B4%9D.png" alt="截屏2021-11-05 上午10.25 拷贝"><figcaption aria-hidden="true">截屏2021-11-05 上午10.25 拷贝</figcaption></figure><p>使用 AmorphousDiskMark 软件进行测速结果如下，内置硬盘比外置硬盘速度要快很多，尤其是4k方面。</p><figure><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/2021-11-24/4k_disk_speed.jpg" alt="4k_disk_speed"><figcaption aria-hidden="true">4k_disk_speed</figcaption></figure><p>因此，我建议把平时经常读写硬盘的大型应用放入内置硬盘中，可以充分利用内置硬盘和外置硬盘。</p><h2 id="格式化硬盘">格式化硬盘</h2><p>在 <code>实用工具</code> 中找到 <code>磁盘工具</code>，显示里选择 <code>显示所有设备</code>：</p><figure><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/2021-11-11/WX20211111-204033@2x_%E5%89%AF%E6%9C%AC.jpg" alt="WX20211111-204033@2x_副本"><figcaption aria-hidden="true">WX20211111-204033@2x_副本</figcaption></figure><p>选择外接硬盘，点击<code>抹掉</code>，并将名称改为<code>macOS</code>，格式为<code>APFS</code>，方案为<code>GUID分区图</code>：</p><figure><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/2021-11-11/WX20211111-204226@2x_%E5%89%AF%E6%9C%AC.jpg" alt="WX20211111-204226@2x_副本"><figcaption aria-hidden="true">WX20211111-204226@2x_副本</figcaption></figure><h2 id="下载系统">下载系统</h2><p>打开 <code>App Store</code>，搜索 <code>macos</code>，就可以找到最新的版本 <code>macos monterey</code>，下载后便可以在应用程序中找到 <code>安装macOS Monterey.app</code>。需要注意的是，系统镜像必须从<code>APP Store</code>进行下载，否则不允许安装。</p><figure><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/2021-11-11/%E6%88%AA%E5%B1%8F2021-11-11%20%E4%B8%8B%E5%8D%882.04.22%E7%9A%84%E5%89%AF%E6%9C%AC.png_%E5%89%AF%E6%9C%AC.jpg" alt="截屏2021-11-11 下午2.04.22的副本.png_副本"><figcaption aria-hidden="true">截屏2021-11-11 下午2.04.22的副本.png_副本</figcaption></figure><p>这时传统的方法会双击这个<code>安装macOS Monterey.app</code>并选择将系统安装到外接硬盘中，但是我操作后无法进入系统，在<code>系统偏好设置</code>中点击<code>启动磁盘</code>，将启动磁盘设为<code>macOS</code>外接硬盘时会报错：无法设定启动磁盘-将“macOS”设为启动磁盘时出错：未能完成操作。（SDErrorDomain错误108。）</p><figure><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/2021-11-11/%E6%88%AA%E5%B1%8F2021-11-05%20%E4%B8%8B%E5%8D%883.22.22_%E5%89%AF%E6%9C%AC.jpg" alt="截屏2021-11-05 下午3.22.22_副本"><figcaption aria-hidden="true">截屏2021-11-05 下午3.22.22_副本</figcaption></figure><p>这可能是M1芯片的限制，所以只能进入恢复模式进行安装。</p><h2 id="进入恢复模式进行安装">进入恢复模式进行安装</h2><p>关机后长按电源键进入恢复模式，选择最右侧的<code>选项</code></p><figure><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/2021-11-11/IMG_20211105_104028_%E5%89%AF%E6%9C%AC2.jpeg" alt="IMG_20211105_104028_副本2"><figcaption aria-hidden="true">IMG_20211105_104028_副本2</figcaption></figure><p>在这里如果选择第二项的<code>重新安装macOS Monterey</code>的话需要从网上重新下载镜像，并且我也没有安装成功，所以这里介绍另一种省时省力的方法。</p><p>在上面的<code>实用工具</code>中选择<code>终端</code>，或者键盘<code>cmd</code>+<code>shift</code>+<code>T</code>：</p><figure><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/2021-11-11/IMG_20211105_152659_%E5%89%AF%E6%9C%AC.jpeg" alt="IMG_20211105_152659_副本"><figcaption aria-hidden="true">IMG_20211105_152659_副本</figcaption></figure><p>在这里输入一行命令，意思就是找到在步骤4中已经下好的<code>安装macOS Monterey.app</code>并进行安装，命令如下：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../../Volumes/Macintosh\ HD/Applications</span><br><span class="line">./Install\ macOS\ Monterey.app/Contents/MacOS/InstallAssistant</span><br></pre></td></tr></table></figure><p>稍微懂一些Linux的小伙伴应该能看懂，路径可以一点点试出来。</p><figure><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/2021-11-11/IMG_20211105_1532021.jpg" alt="IMG_20211105_1532021"><figcaption aria-hidden="true">IMG_20211105_1532021</figcaption></figure><p>回车后就进入了安装界面，这时不用下载即可安装：</p><figure><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/2021-11-11/IMG_20211105_153233.jpg" alt="IMG_20211105_153233"><figcaption aria-hidden="true">IMG_20211105_153233</figcaption></figure><p>一路下一步，注意选择macOS的外接硬盘即可，安装完成后会自动进入外接硬盘中的系统。</p><figure><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/2021-11-11/IMG_20211105_154937.jpg" alt="IMG_20211105_154937"><figcaption aria-hidden="true">IMG_20211105_154937</figcaption></figure><h2 id="黑苹果转白苹果心得">黑苹果转白苹果心得</h2><p>最后简单介绍一下自己由黑苹果转白苹果的体会。</p><p>之前自己撘过一个黑苹果，由于没有配显卡，Intel的核显的HDMI接口只能支持1080P60帧的显示器，而我希望配两个4K显示器，这就有了两种解决办法：</p><ul><li>一是买一块AMD的黑苹果免驱的显卡，继续使用黑苹果，好处是windows系统也可以玩玩游戏，但是RX6600XT 价格在4000元左右，感觉作为显卡来说还是太贵。</li><li>二是转战白苹果，买一个m1芯片的mac mini，可以外接两台4K60帧显示器（macbook air只能外接一台4K）。</li></ul><p>很明显，我选择了第二种办法。在体验了一周m1芯片的白苹果后，主要感受到了以下区别：</p><ol type="1"><li><strong>噪音的消失：</strong>黑苹果转白苹果，最大的感受就是噪音的消失。m1芯片确实安静的可怕，以至于即使满载CPU跑程序，风扇也只是轻微的转动，听不到任何声音。相比于之前桌子上的趣造小机箱，即使没有显卡，CPU散热的风扇声音也远比mac mini大。</li><li><strong>多显示器的支持：</strong>之前的黑苹果可能是设置的问题，在开机的时候4K显示器不输出画面，需要重启下显示器才能显示画面，白苹果自然是没有这种问题。</li><li><strong>蓝牙、无线、AirDrop</strong>：虽然之前的黑苹果安装的也是苹果原装网卡，但是可能是抗干扰能力较差等因素，听音乐有时会断断续续。白苹果如果听歌会断断续续，我只会认为是耳机太差了。</li><li><strong>8G内存是否够用</strong>：这也是老生常谈的问题，也是我最纠结的一个问题。在代码开发时，当打开的Pycharm工程大于3个并开启多个网页时，确实会感受到反应的卡顿。不过我不太经常会同时打开多个工程，因此认为8G内存对于我来说是足够的。如果还是纠结的话，可以去苹果官网买8+256的官翻试一试，14天无理由退货期间看看8G内存是否够用。</li></ol><p>说实话，之前的黑苹果在使用上和白苹果并没有明显区别，要不是因为需要支持双4K显示器，黑苹果可能会接着使用。不过白苹果确实省心，不用为升级系统而担心各种bug，蓝牙wifi连接不稳定也只会认为是设备的问题，光噪声消失这一项我就认为这钱花的值。苹果产品还非常保值，过两年卖了买新款也不心疼。总之，m1的mac mini还是值得购买的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在购买 m1 mac mini 时，硬盘选择多大的容量仍然是让人十分纠结，256GB 的空间需要1500元的差价，这个价格都可以购买 2TB 的 NVMe 硬盘了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="mac" scheme="https://xungejiang.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>GCC 编译多平台二进制程序（x64, ARM, MIPS）</title>
    <link href="https://xungejiang.com//2021/08/01/compile-cross-platform/"/>
    <id>https://xungejiang.com//2021/08/01/compile-cross-platform/</id>
    <published>2021-08-01T07:48:29.000Z</published>
    <updated>2021-11-24T09:02:02.788Z</updated>
    
    <content type="html"><![CDATA[<p>GCC 在本平台编译比较简单，但是如果在不同平台上进行编译就需要使用交叉编译的技术，虽然命令很简单，但是网上资料还是比较匮乏，踩了不少的坑，现总结如下。</p><a id="more"></a><h2 id="准备工作">准备工作</h2><p>我们在 Ubuntu20.04 操作系统下进行操作。需要使用 GCC 编译器，使用命令 <code>gcc -v</code> 检查编译器是否可用，若没有使用下述命令进行安装：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install build-essential</span><br></pre></td></tr></table></figure><p>我们使用 binutils 这个开源C++项目作为例子，下载链接如下 <a href="https://ftp.gnu.org/gnu/binutils/" target="_blank" rel="noopener">https://ftp.gnu.org/gnu/binutils/</a>，下载 <code>binutils-2.37.tar.gz</code> 到服务器目标路径 <code>~/project/open_source</code> 下。</p><p>进入目标路径：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/project/open_source</span><br></pre></td></tr></table></figure><p>使用以下命令进行解压：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf binutils-2.37.tar.gz</span><br></pre></td></tr></table></figure><p>创建编译路径并进入：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir binutils-build</span><br><span class="line">cd binutils-build</span><br></pre></td></tr></table></figure><h2 id="编译-x64-平台">编译 x64 平台</h2><p>因为服务器是x64的系统，所以默认编译的二进制也是x64，使用以下命令创建 Makefile 文件：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">../binutils-2.37/configure CC=gcc CFLAGS=-O0 CPPFLAGS=-O0</span><br></pre></td></tr></table></figure><p>上述为优化选项 O0 的编译结果，如果想改成其他优化选项，更改 CFLAGS 和 CPPFLAGS 里面的参数即可。</p><p>使用make命令进行编译：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>编译成功后，在 <code>binutils</code> 文件夹下可以看到编译好的二进制文件，使用 <code>file</code> 命令可以看到其中 addr2line 二进制文件的详细信息：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">file binutils/addr2line</span><br><span class="line"><span class="meta">#</span><span class="bash"> binutils/addr2line: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=fc36de2a595215ee0f8dba42cf2fa628699e2610, <span class="keyword">for</span> GNU/Linux 3.2.0, not stripped</span></span><br></pre></td></tr></table></figure><p>可知该二进制文件为 x86-64 架构的 64-bit 程序。</p><h2 id="编译-mips-平台">编译 MIPS 平台</h2><p>首先使用下述命令删除 <code>binutils-build</code> 文件夹所有文件：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf *</span><br></pre></td></tr></table></figure><p>使用下述命令安装MIPS交叉编译选项</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install gcc-mips-linux-gnu</span><br></pre></td></tr></table></figure><p>使用下述命令生成MIPS平台的 Makefile 文件：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">../binutils-2.37/configure CFLAGS=-O0 CPPFLAGS=-O0 --host=mips-linux-gnu</span><br></pre></td></tr></table></figure><p>其中 --host 表示交叉编译中的目标架构。同样，更改优化选项可直接将O0改为O1等。</p><p>使用make命令进行编译：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>编译成功后，在 <code>binutils</code> 文件夹下可以看到编译好的二进制文件，使用 <code>file</code> 命令可以看到其中 addr2line 二进制文件的详细信息：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">file binutils/addr2line</span><br><span class="line"><span class="meta">#</span><span class="bash"> binutils/addr2line: ELF 32-bit MSB executable, MIPS, MIPS32 rel2 version 1 (SYSV), dynamically linked, interpreter /lib/ld.so.1, BuildID[sha1]=53aa3d29d13350381e9c81b776308e64da46f06d, <span class="keyword">for</span> GNU/Linux 3.2.0, not stripped</span></span><br></pre></td></tr></table></figure><p>可知该二进制文件为 MIPS 架构的 32-bit 程序。</p><h2 id="编译-arm-平台">编译 ARM 平台</h2><p>首先使用下述命令删除 <code>binutils-build</code> 文件夹所有文件：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf *</span><br></pre></td></tr></table></figure><p>使用下述命令安装MIPS交叉编译选项</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install gcc-arm-linux-gnueabi</span><br></pre></td></tr></table></figure><p>使用下述命令生成MIPS平台的 Makefile 文件：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">../binutils-2.37/configure CFLAGS=-O0 CPPFLAGS=-O0 --host=arm-linux-gnueabi</span><br></pre></td></tr></table></figure><p>其中 --host 表示交叉编译中的目标架构。同样，更改优化选项可直接将O0改为O1等。</p><p>使用make命令进行编译：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>编译成功后，在 <code>binutils</code> 文件夹下可以看到编译好的二进制文件，使用 <code>file</code> 命令可以看到其中 addr2line 二进制文件的详细信息：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">file binutils/addr2line</span><br><span class="line"><span class="meta">#</span><span class="bash"> binutils/addr2line: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.3, BuildID[sha1]=f3c359a16a4390cd2f8a1ac13365b49ce9a7b5ef, <span class="keyword">for</span> GNU/Linux 3.2.0, not stripped</span></span><br></pre></td></tr></table></figure><p>可知该二进制文件为 ARM 架构的 32-bit 程序。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GCC 在本平台编译比较简单，但是如果在不同平台上进行编译就需要使用交叉编译的技术，虽然命令很简单，但是网上资料还是比较匮乏，踩了不少的坑，现总结如下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="知识点" scheme="https://xungejiang.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="x64" scheme="https://xungejiang.com/tags/x64/"/>
    
      <category term="arm" scheme="https://xungejiang.com/tags/arm/"/>
    
      <category term="mips" scheme="https://xungejiang.com/tags/mips/"/>
    
  </entry>
  
  <entry>
    <title>PyTorch 的 BERT 微调教程</title>
    <link href="https://xungejiang.com//2020/06/06/BERT/"/>
    <id>https://xungejiang.com//2020/06/06/BERT/</id>
    <published>2020-06-06T10:48:29.000Z</published>
    <updated>2021-11-24T09:02:02.788Z</updated>
    
    <content type="html"><![CDATA[<p>本文为博客 <a href="https://mccormickml.com/2019/07/22/BERT-fine-tuning/" target="_blank" rel="noopener">BERT Fine-Tuning Tutorial with PyTorch</a> 的翻译</p><a id="more"></a><p>在本教程中，我将向你展示如何使用 BERT 与 huggingface PyTorch 库来快速高效地微调模型，以获得接近句子分类的最先进性能。更广泛地讲，我将描述转移学习在NLP中的实际应用，以最小的努力在一系列NLP任务上创建高性能模型。</p><h1 id="介绍">介绍</h1><h2 id="历史">历史</h2><p>2018年是NLP的突破性一年。转移学习，特别是像Allen AI的ELMO、OpenAI的Open-GPT和谷歌的BERT这样的模型，让研究人员用最小的特定任务微调粉碎了多个基准，并为NLP社区的其他成员提供了预训练的模型，这些模型可以轻松地（用更少的数据和更少的计算时间）进行微调和实施，以产生最先进的结果。遗憾的是，对于许多刚开始接触NLP的人，甚至对于一些有经验的实践者来说，这些强大模型的理论和实际应用仍然没有得到很好的理解。</p><h2 id="什么是-bert">什么是 BERT?</h2><p>BERT（Bidirectional Encoder Representations from Transformers）于2018年底发布，我们将在本教程中使用该模型，为读者更好地理解和实践指导在NLP中使用转移学习模型。BERT是一种预训练语言表征的方法，它被用来创建模型，然后NLP实践者可以免费下载并使用这些模型。你可以使用这些模型从你的文本数据中提取高质量的语言特征，也可以用你自己的数据在特定的任务（分类、实体识别、问题回答等）上对这些模型进行微调，以产生最先进的预测。</p><p>这篇文章将解释如何修改和微调BERT，以创建一个强大的NLP模型，快速给你提供最先进的结果。</p><h2 id="微调的优势">微调的优势</h2><p>在本教程中，我们将使用BERT来训练一个文本分类器。具体来说，我们将把预先训练好的 BERT 模型，在最后添加一层未经训练的神经元，并为我们的分类任务训练新模型。为什么要这样做，而不是训练一个很适合你需要的特定深度学习模型（CNN、BiLSTM等）？</p><ol type="1"><li><p><strong>更快的发展</strong></p><ul><li>首先，预先训练的BERT模型权重已经编码了很多关于我们语言的信息。因此，训练我们的微调模型所需要的时间要少得多--就好像我们已经广泛地训练了我们网络的底层，只需要在使用它们的输出作为分类任务的特征时轻轻地调整它们。事实上，作者建议在特定的NLP任务上对BERT进行微调只需要2-4个纪元的训练（相比之下，从头开始训练原始的BERT模型或LSTM需要数百个GPU小时！）。</li></ul></li><li><p><strong>更少的数据</strong></p><ul><li>此外，也许同样重要的是，由于预先训练的权重，这种方法允许我们在一个比从头开始建立的模型所需的更小的数据集上微调我们的任务。从零开始建立的NLP模型的一个主要缺点是，我们通常需要一个大得令人望而却步的数据集来训练我们的网络以达到合理的精度，这意味着必须将大量的时间和精力投入到数据集的创建中。通过对BERT的微调，我们现在能够摆脱在更小的训练数据量上训练一个模型达到良好的性能。</li></ul></li><li><p><strong>更好的结果</strong></p><ul><li>最后，这种简单的微调程序（通常是在BERT的基础上增加一个全连接的层，并进行几个纪元的训练）被证明可以通过最小的任务特定调整来实现最先进的结果，适用于各种各样的任务：分类、语言推理、语义相似性、问题回答等。与其实施在特定任务上表现出良好效果的定制和有时模糊的架构，不如简单地对BERT进行微调，这被证明是一个更好的（或至少相等的）替代方案。</li></ul></li></ol><h3 id="nlp的转变">NLP的转变</h3><p>这种向转移学习的转变与几年前计算机视觉领域发生的相同转变并行。为计算机视觉任务创建一个好的深度学习网络可能需要数百万个参数，而且训练成本非常高。研究人员发现，深度网络可以学习分层的特征表示（在最低层有简单的特征，如边缘，在较高层有逐渐复杂的特征）。与其每次从头开始训练一个新的网络，不如将训练好的网络的低层泛化图像特征复制并转移到另一个有不同任务的网络中使用。很快，下载一个预先训练好的深度网络，并迅速对其进行重新训练以适应新的任务，或者在上面添加额外的层，这比从头开始训练网络的昂贵过程要好得多。对于许多人来说，2018年引入的深度预训练语言模型（ELMO、BERT、ULMFIT、Open-GPT等）标志着NLP中向转移学习的转变，就像计算机视觉看到的那样。</p><p>让我们开始吧！</p><h1 id="设置">1. 设置</h1><h2 id="检查-gpu">1.1. 检查 GPU</h2><p>为了让 torch 使用 GPU，我们需要识别并指定 GPU 作为设备。稍后，在我们的训练循环中，我们将把数据加载到设备上。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># If there's a GPU available...</span></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Tell PyTorch to use the GPU.    </span></span><br><span class="line">    device = torch.device(<span class="string">"cuda"</span>)</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">'There are %d GPU(s) available.'</span> % torch.cuda.device_count())</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">'We will use the GPU:'</span>, torch.cuda.get_device_name(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># If not...</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'No GPU available, using the CPU instead.'</span>)</span><br><span class="line">    device = torch.device(<span class="string">"cpu"</span>)</span><br></pre></td></tr></table></figure><h2 id="安装-huggingface-库">1.2. 安装 HuggingFace 库</h2><p>接下来，让我们安装 HuggingFace 的<a href="https://github.com/huggingface/transformers" target="_blank" rel="noopener">transformers</a>包，它将为我们提供一个与BERT一起工作的pytorch接口。（这个库包含了其他预训练语言模型的接口，如OpenAI的GPT和GPT-2）。我们选择了pytorch接口，因为它在高级API（它很容易使用，但不能深入了解事情的工作原理）和tensorflow代码（它包含了很多细节，但经常让我们偏离了关于tensorflow的课程，而这里的目的是BERT！）之间取得了很好的平衡。</p><p>目前，Hugging Face库似乎是最被广泛接受的、最强大的与BERT合作的pytorch接口。除了支持各种不同的预先训练好的变换模型外，该库还包含了这些模型的预构建修改，适合你的特定任务。例如，在本教程中，我们将使用<code>BertForSequenceClassification</code>。</p><p>该库还包括用于标记分类、问题回答、下句预测等的特定任务类。使用这些预建的类可以简化为您的目的修改BERT的过程。</p><p>本笔记本中的代码其实是 HuggingFace 的<a href="https://github.com/huggingface/transformers/blob/e6cff60b4cbc1158fbd6e4a1c3afda8dc224f566/examples/run_glue.py" target="_blank" rel="noopener">run_glue.py</a>示例脚本的简化版。</p><p><code>run_glue.py</code>是一个很有用的工具，它允许你选择你想运行的GLUE基准任务，以及你想使用的预训练模型（你可以看到可能的模型列表<a href="https://github.com/huggingface/transformers/blob/e6cff60b4cbc1158fbd6e4a1c3afda8dc224f566/examples/run_glue.py#L69" target="_blank" rel="noopener">这里</a>）。它还支持使用CPU、单个GPU或多个GPU。如果你想进一步提高速度，它甚至支持使用16位精度。</p><p>不幸的是，所有这些可配置性都是以<em>可读性</em>为代价的。在这篇Notebook中，我们已经大大简化了代码，并添加了大量的注释，以使其清楚地了解发生了什么。</p><h1 id="加载-cola-数据集">2. 加载 CoLA 数据集</h1><p>我们将使用<a href="https://nyu-mll.github.io/CoLA/" target="_blank" rel="noopener">The Corpus of Linguistic Acceptability (CoLA)</a>数据集进行单句分类。它是一组被标记为语法正确或不正确的句子。它于2018年5月首次发布，是 "GLUE Benchmark "中包含的测试之一，BERT等模型都在此基础上进行比赛。</p><h2 id="下载和解压">2.1. 下载和解压</h2><p>该数据集托管在GitHub上的这个repo中：https://nyu-mll.github.io/CoLA/，<a href="https://nyu-mll.github.io/CoLA/cola_public_1.1.zip" target="_blank" rel="noopener">下载链接</a></p><h2 id="解析">2.2. 解析</h2><p>我们可以从文件名中看到，"tokenized" 和 "raw"版本的数据都是可用的。</p><p>我们不能使用预标记版本，因为为了应用预训练的BERT，我们<em>必须</em>使用模型提供的标记器。这是因为：（1）模型有一个特定的、固定的词汇，（2）BERT tokenizer有一种特殊的方式来处理词汇外的词汇。</p><p>我们将使用pandas来解析"域内"训练集，并查看其一些属性和数据点。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load the dataset into a pandas dataframe.</span></span><br><span class="line">df = pd.read_csv(<span class="string">"./cola_public/raw/in_domain_train.tsv"</span>, delimiter=<span class="string">'\t'</span>, header=<span class="literal">None</span>, names=[<span class="string">'sentence_source'</span>, <span class="string">'label'</span>, <span class="string">'label_notes'</span>, <span class="string">'sentence'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Report the number of sentences.</span></span><br><span class="line">print(<span class="string">'Number of training sentences: &#123;:,&#125;\n'</span>.format(df.shape[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Display 10 random rows from the data.</span></span><br><span class="line">df.sample(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>我们实际关心的两个属性是"句子"和它的"标签"，这个标签被称为"可接受性判断"（0=不可接受，1=可接受）。</p><p>下面是五个被标注为语法上不可接受的句子。请注意，这个任务比情感分析之类的工作要难得多!</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">print(df.loc[df.label == <span class="number">0</span>].sample(<span class="number">5</span>)[[<span class="string">'sentence'</span>, <span class="string">'label'</span>]])</span><br></pre></td></tr></table></figure><p>让我们将训练集的句子和标签提取为 numpy ndarrays。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Get the lists of sentences and their labels.</span></span><br><span class="line">sentences = df.sentence.values</span><br><span class="line">labels = df.label.values</span><br></pre></td></tr></table></figure><h1 id="tokenization-input-格式化">3. Tokenization &amp; Input 格式化</h1><p>在本节中，我们将把我们的数据集转换为BERT可以训练的格式。</p><h2 id="bert-tokenizer">3.1. BERT Tokenizer</h2><p>为了将我们的文本输入到 BERT，必须将其分割成 tokens，然后这些 tokens 必须被映射到 tokenizer 词汇表中的索引。</p><p>Tokenization 必须由 BERT 中包含的 Tokenizer 来执行--下面的单元格将为我们下载。我们将在这里使用 "uncases "版本。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> BertTokenizer</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load the BERT tokenizer.</span></span><br><span class="line">print(<span class="string">'Loading BERT tokenizer...'</span>)</span><br><span class="line">tokenizer = BertTokenizer.from_pretrained(<span class="string">'bert-base-uncased'</span>, do_lower_case=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>让我们把tokenizer应用到一个句子上，看看输出。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Print the original sentence.</span></span><br><span class="line">print(<span class="string">'Original: '</span>, sentences[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Print the sentence split into tokens.</span></span><br><span class="line">print(<span class="string">'Tokenized: '</span>, tokenizer.tokenize(sentences[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Print the sentence mapped to token ids.</span></span><br><span class="line">print(<span class="string">'Token IDs: '</span>, tokenizer.convert_tokens_to_ids(tokenizer.tokenize(sentences[<span class="number">0</span>])))</span><br></pre></td></tr></table></figure><p>当我们实际转换所有的句子时，我们将使用<code>tokenize.encode</code>函数来处理这两个步骤，而不是分别调用<code>tokenize</code>和<code>convert_tokens_to_ids</code>。</p><p>不过，在我们这样做之前，我们需要先谈谈BERT的一些格式化要求。</p><h2 id="需要的格式化">3.2. 需要的格式化</h2><p>上面的代码遗漏了一些必要的格式化步骤，我们将在这里看看。</p><ul><li>补充说明：我觉得BERT的输入格式似乎 "过于规范"了......。我们被要求提供一些信息，这些信息看起来是多余的，或者说它们可以很容易地从数据中推断出来，而不需要我们明确地提供。但事实就是如此，我想一旦我对BERT的内部结构有了更深入的了解，它就会变得更有意义。</li></ul><p>我们需要做的是 1. 在每个句子的开头和结尾添加特殊的标记。 2. 将所有句子的长度固定为一个固定的长度。 3. 用"注意力遮盖"明确区分真正的 token 和填充 token。</p><h3 id="特殊-tokens">特殊 Tokens</h3><p><strong><code>[SEP]</code></strong></p><p>在每个句子的末尾，我们需要附加特殊的"[SEP]"令牌。</p><p>这个标记是双句子任务的产物，即给BERT两个独立的句子，并要求它确定一些事情（例如，句子A中的问题的答案能否在句子B中找到？</p><p>我还不确定为什么当我们只有单句输入的时候，还需要 token，但它确实需要!</p><p><strong><code>[CLS]</code></strong></p><p>对于分类任务，我们必须在每个句子的开头加上特殊的"[CLS]"标记。</p><p>这个标记具有特殊的意义。BERT 由12个 Transformer 层组成。每个 Transformer 都会接收一个标记嵌入的列表，并在输出中产生相同数量的嵌入（当然是改变了特征值！）。</p><figure><img class="lazyload"  data-src="http://www.mccormickml.com/assets/BERT/CLS_token_500x606.png" alt="Illustration of CLS token purpose"><figcaption aria-hidden="true">Illustration of CLS token purpose</figcaption></figure><p>在最后一个(第12个) Transformer 的输出端，<em>分类器只使用第一个嵌入(对应[CLS]标记)</em>。</p><blockquote><p>"The first token of every sequence is always a special classification token (<code>[CLS]</code>). The final hidden state corresponding to this token is used as the aggregate sequence representation for classification tasks." (摘自<a href="https://arxiv.org/pdf/1810.04805.pdf" target="_blank" rel="noopener">BERT论文</a>)</p></blockquote><p>你可能会想到在最终的嵌入上尝试一些池化策略，但这并不是必须的。因为 BERT 被训练成只使用这个[CLS]标记进行分类，我们知道模型已经被激励将分类步骤所需的一切编码到那个单一的 768 值嵌入向量中。它已经为我们完成了池化工作!</p><h3 id="句子长度-注意力遮盖">句子长度 &amp; 注意力遮盖</h3><p>我们数据集中的句子显然有不同的长度，那么BERT是如何处理的呢？</p><p>BERT有两个约束条件。 1. 所有的句子必须被填充或截断成一个固定的长度。 2. 最大的句子长度是512个tokens。</p><p>填充是通过一个特殊的"[PAD]"令牌来完成的，它在BERT词汇表中的索引0。下面的插图演示了填充到8个令牌的 "MAX_LEN"。</p><p><img class="lazyload"  data-src="http://www.mccormickml.com/assets/BERT/padding_and_mask.png" width="600"></p><p>"注意力遮盖"只是一个1和0的数组，表示哪些标记是padding，哪些不是（看起来有点多余，不是吗！）。这个掩码告诉BERT中的"自我关注"机制不要将这些pad标记纳入它对句子的解释中。</p><p>不过，最大长度确实会影响训练和评估速度。</p><p>例如，用特斯拉K80。</p><p><code>MAX_LEN = 128 --&gt; 训练一个 epoch 需要 5:28</code></p><p><code>MAX_LEN = 64 --&gt; 训练一个 epoch 需要 2:57</code>。</p><h2 id="tokenize-数据集">3.3. Tokenize 数据集</h2><p>transformers库提供了一个有用的 "encode" 函数，它将为我们处理大部分的解析和数据准备步骤。</p><p>在我们准备好对文本进行编码之前，我们需要决定一个<strong>最大句子长度</strong>来进行填充/截断。</p><p>下面的单元格将对数据集进行一次标记化处理，以测量最大句子长度。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">max_len = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For every sentence...</span></span><br><span class="line"><span class="keyword">for</span> sent <span class="keyword">in</span> sentences:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Tokenize the text and add `[CLS]` and `[SEP]` tokens.</span></span><br><span class="line">    input_ids = tokenizer.encode(sent, add_special_tokens=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Update the maximum sentence length.</span></span><br><span class="line">    max_len = max(max_len, len(input_ids))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Max sentence length: '</span>, max_len)</span><br></pre></td></tr></table></figure><p>为了防止有一些较长的测试句子，我将最大长度设置为64。</p><p>现在我们准备好执行真正的 tokenization 了。</p><p><code>tokenizer.encode_plus</code>函数为我们结合了多个步骤。</p><ol type="1"><li>将句子分割成token。</li><li>添加特殊的<code>[CLS]</code>和<code>[SEP]</code>标记。</li><li>将这些标记映射到它们的ID上。</li><li>把所有的句子都垫上或截断成相同的长度。</li><li>创建注意力遮盖，明确区分真实 token 和<code>[PAD]</code>token。</li></ol><p>前四项功能在<code>tokenizer.encode</code>中，但我使用<code>tokenizer.encode_plus</code>来获得第五项（注意力遮盖）。文档在<a href="https://huggingface.co/transformers/main_classes/tokenizer.html?highlight=encode_plus#transformers.PreTrainedTokenizer.encode_plus" target="_blank" rel="noopener">这里</a>.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tokenize all of the sentences and map the tokens to thier word IDs.</span></span><br><span class="line">input_ids = []</span><br><span class="line">attention_masks = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># For every sentence...</span></span><br><span class="line"><span class="keyword">for</span> sent <span class="keyword">in</span> sentences:</span><br><span class="line">    <span class="comment"># `encode_plus` will:</span></span><br><span class="line">    <span class="comment">#   (1) Tokenize the sentence.</span></span><br><span class="line">    <span class="comment">#   (2) Prepend the `[CLS]` token to the start.</span></span><br><span class="line">    <span class="comment">#   (3) Append the `[SEP]` token to the end.</span></span><br><span class="line">    <span class="comment">#   (4) Map tokens to their IDs.</span></span><br><span class="line">    <span class="comment">#   (5) Pad or truncate the sentence to `max_length`</span></span><br><span class="line">    <span class="comment">#   (6) Create attention masks for [PAD] tokens.</span></span><br><span class="line">    encoded_dict = tokenizer.encode_plus(</span><br><span class="line">                        sent,                      <span class="comment"># Sentence to encode.</span></span><br><span class="line">                        add_special_tokens = <span class="literal">True</span>, <span class="comment"># Add '[CLS]' and '[SEP]'</span></span><br><span class="line">                        max_length = <span class="number">64</span>,           <span class="comment"># Pad &amp; truncate all sentences.</span></span><br><span class="line">                        pad_to_max_length = <span class="literal">True</span>,</span><br><span class="line">                        return_attention_mask = <span class="literal">True</span>,   <span class="comment"># Construct attn. masks.</span></span><br><span class="line">                        return_tensors = <span class="string">'pt'</span>,     <span class="comment"># Return pytorch tensors.</span></span><br><span class="line">                   )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Add the encoded sentence to the list.    </span></span><br><span class="line">    input_ids.append(encoded_dict[<span class="string">'input_ids'</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># And its attention mask (simply differentiates padding from non-padding).</span></span><br><span class="line">    attention_masks.append(encoded_dict[<span class="string">'attention_mask'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert the lists into tensors.</span></span><br><span class="line">input_ids = torch.cat(input_ids, dim=<span class="number">0</span>)</span><br><span class="line">attention_masks = torch.cat(attention_masks, dim=<span class="number">0</span>)</span><br><span class="line">labels = torch.tensor(labels)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Print sentence 0, now as a list of IDs.</span></span><br><span class="line">print(<span class="string">'Original: '</span>, sentences[<span class="number">0</span>])</span><br><span class="line">print(<span class="string">'Token IDs:'</span>, input_ids[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h2 id="训练-验证切分">3.4. 训练 &amp; 验证切分</h2><p>把我们的训练集分成 90% 用于训练，10% 用于验证。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> TensorDataset, random_split</span><br><span class="line"></span><br><span class="line"><span class="comment"># Combine the training inputs into a TensorDataset.</span></span><br><span class="line">dataset = TensorDataset(input_ids, attention_masks, labels)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a 90-10 train-validation split.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Calculate the number of samples to include in each set.</span></span><br><span class="line">train_size = int(<span class="number">0.9</span> * len(dataset))</span><br><span class="line">val_size = len(dataset) - train_size</span><br><span class="line"></span><br><span class="line"><span class="comment"># Divide the dataset by randomly selecting samples.</span></span><br><span class="line">train_dataset, val_dataset = random_split(dataset, [train_size, val_size])</span><br><span class="line"></span><br><span class="line">print(<span class="string">'&#123;:&gt;5,&#125; training samples'</span>.format(train_size))</span><br><span class="line">print(<span class="string">'&#123;:&gt;5,&#125; validation samples'</span>.format(val_size))</span><br></pre></td></tr></table></figure><p>我们还将使用 torch DataLoader 类为我们的数据集创建一个迭代器。这有助于在训练过程中节省内存，因为与for循环不同，有了迭代器，整个数据集不需要加载到内存中。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader, RandomSampler, SequentialSampler</span><br><span class="line"></span><br><span class="line"><span class="comment"># The DataLoader needs to know our batch size for training, so we specify it </span></span><br><span class="line"><span class="comment"># here. For fine-tuning BERT on a specific task, the authors recommend a batch </span></span><br><span class="line"><span class="comment"># size of 16 or 32.</span></span><br><span class="line">batch_size = <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the DataLoaders for our training and validation sets.</span></span><br><span class="line"><span class="comment"># We'll take training samples in random order. </span></span><br><span class="line">train_dataloader = DataLoader(</span><br><span class="line">            train_dataset,  <span class="comment"># The training samples.</span></span><br><span class="line">            sampler = RandomSampler(train_dataset), <span class="comment"># Select batches randomly</span></span><br><span class="line">            batch_size = batch_size <span class="comment"># Trains with this batch size.</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="comment"># For validation the order doesn't matter, so we'll just read them sequentially.</span></span><br><span class="line">validation_dataloader = DataLoader(</span><br><span class="line">            val_dataset, <span class="comment"># The validation samples.</span></span><br><span class="line">            sampler = SequentialSampler(val_dataset), <span class="comment"># Pull out batches sequentially.</span></span><br><span class="line">            batch_size = batch_size <span class="comment"># Evaluate with this batch size.</span></span><br><span class="line">        )</span><br></pre></td></tr></table></figure><h1 id="训练我们的分类模型">4. 训练我们的分类模型</h1><p>现在我们的输入数据已经被正确格式化了，是时候微调一下BERT模型了。</p><h2 id="bertforsequenceclassification">4.1. BertForSequenceClassification</h2><p>对于这个任务，我们首先要修改预先训练好的 BERT 模型，给出分类的输出，然后我们要在我们的数据集上继续训练模型，直到整个模型，端到端都很适合我们的任务。</p><p>值得庆幸的是，huggingface pytorch的实现中包含了一套针对各种NLP任务设计的接口。虽然这些接口都是建立在训练好的 BERT 模型之上，但每个接口都有不同的顶层和输出类型，以适应其特定的 NLP 任务。</p><p>以下是目前提供的类列表，供微调。</p><ul><li>BertModel</li><li>BertForPreTraining</li><li>BertForMaskedLM</li><li>BertForNextSentencePrediction(下句预测)</li><li><strong>BertForSequenceClassification</strong> - 我们将使用的那个。</li><li>BertForTokenClassification</li><li>BertForQuestionAnswering</li></ul><p>这些文档可以在<a href="https://huggingface.co/transformers/v2.2.0/model_doc/bert.html" target="_blank" rel="noopener">这里</a>下找到。</p><p>我们将使用<a href="https://huggingface.co/transformers/v2.2.0/model_doc/bert.html#bertforsequenceclassification" target="_blank" rel="noopener">BertForSequenceClassification</a>。这是普通的BERT模型，上面增加了一个用于分类的单线性层，我们将使用它作为句子分类器。当我们输入数据时，整个预先训练好的BERT模型和额外的未经训练的分类层会根据我们的特定任务进行训练。</p><p>OK，让我们加载 BERT 吧! 有几个不同的预训练 BERT 模型可供选择。"bert-base-uncased "指的是只有小写字母（"uncased"）的版本，是两者中较小的版本（"base "vs "large"）。</p><p><code>from_pretrained</code>的文档可以在<a href="https://huggingface.co/transformers/v2.2.0/main_classes/model.html#transformers.PreTrainedModel.from_pretrained" target="_blank" rel="noopener">这里</a>找到，附加参数定义在<a href="https://huggingface.co/transformers/v2.2.0/main_classes/configuration.html#transformers.PretrainedConfig" target="_blank" rel="noopener">这里</a>。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> BertForSequenceClassification, AdamW, BertConfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load BertForSequenceClassification, the pretrained BERT model with a single </span></span><br><span class="line"><span class="comment"># linear classification layer on top. </span></span><br><span class="line">model = BertForSequenceClassification.from_pretrained(</span><br><span class="line">    <span class="string">"bert-base-uncased"</span>, <span class="comment"># Use the 12-layer BERT model, with an uncased vocab.</span></span><br><span class="line">    num_labels = <span class="number">2</span>, <span class="comment"># The number of output labels--2 for binary classification.</span></span><br><span class="line">                    <span class="comment"># You can increase this for multi-class tasks.   </span></span><br><span class="line">    output_attentions = <span class="literal">False</span>, <span class="comment"># Whether the model returns attentions weights.</span></span><br><span class="line">    output_hidden_states = <span class="literal">False</span>, <span class="comment"># Whether the model returns all hidden-states.</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tell pytorch to run this model on the GPU.</span></span><br><span class="line">model.cuda()</span><br></pre></td></tr></table></figure><p>为了好奇，我们可以在这里按名称浏览所有模型的参数。</p><p>在下面的单元格中，我打印出了权重的名称和尺寸，分别为。</p><ol type="1"><li>嵌入层。</li><li>十二个变压器中的第一个。</li><li>输出层。</li></ol><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Get all of the model's parameters as a list of tuples.</span></span><br><span class="line">params = list(model.named_parameters())</span><br><span class="line"></span><br><span class="line">print(<span class="string">'The BERT model has &#123;:&#125; different named parameters.\n'</span>.format(len(params)))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'==== Embedding Layer ====\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> params[<span class="number">0</span>:<span class="number">5</span>]:</span><br><span class="line">    print(<span class="string">"&#123;:&lt;55&#125; &#123;:&gt;12&#125;"</span>.format(p[<span class="number">0</span>], str(tuple(p[<span class="number">1</span>].size()))))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n==== First Transformer ====\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> params[<span class="number">5</span>:<span class="number">21</span>]:</span><br><span class="line">    print(<span class="string">"&#123;:&lt;55&#125; &#123;:&gt;12&#125;"</span>.format(p[<span class="number">0</span>], str(tuple(p[<span class="number">1</span>].size()))))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'\n==== Output Layer ====\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> params[<span class="number">-4</span>:]:</span><br><span class="line">    print(<span class="string">"&#123;:&lt;55&#125; &#123;:&gt;12&#125;"</span>.format(p[<span class="number">0</span>], str(tuple(p[<span class="number">1</span>].size()))))</span><br></pre></td></tr></table></figure><h2 id="优化器-学习率调度器">4.2. 优化器 &amp; 学习率调度器</h2><p>现在我们已经加载了我们的模型，我们需要从存储的模型中抓取训练超参数。</p><p>为了微调的目的，作者建议从以下数值中选择（来自<a href="https://arxiv.org/pdf/1810.04805.pdf" target="_blank" rel="noopener">BERT论文</a>的附录A.3）。</p><blockquote><ul><li><strong>batch大小：</strong> 16，32。</li><li><strong>学习率(Adam)：</strong> 5e-5、3e-5、2e-5。</li><li><strong>epoch数：</strong> 2、3、4。</li></ul></blockquote><p>我们选择的是： * batch大小：32（在创建DataLoaders时设置）。 * 学习率：2e-5 * Epochs: 4 (我们将看到这可能是太多了...)</p><p>epsilon 参数<code>eps = 1e-8</code>是 "一个非常小的数字，以防止在实现中出现任何除以零的情况" (来自<a href="https://machinelearningmastery.com/adam-optimization-algorithm-for-deep-learning/" target="_blank" rel="noopener">这里</a>)。</p><p>你可以在<code>run_glue.py</code><a href="https://github.com/huggingface/transformers/blob/5bfcd0485ece086ebcbed2d008813037968a9e58/examples/run_glue.py#L109" target="_blank" rel="noopener">这里</a>中找到AdamW优化器的创建。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># <span class="doctag">Note:</span> AdamW is a class from the huggingface library (as opposed to pytorch) </span></span><br><span class="line"><span class="comment"># I believe the 'W' stands for 'Weight Decay fix"</span></span><br><span class="line">optimizer = AdamW(model.parameters(),</span><br><span class="line">                  lr = <span class="number">2e-5</span>, <span class="comment"># args.learning_rate - default is 5e-5, our notebook had 2e-5</span></span><br><span class="line">                  eps = <span class="number">1e-8</span> <span class="comment"># args.adam_epsilon  - default is 1e-8.</span></span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> get_linear_schedule_with_warmup</span><br><span class="line"></span><br><span class="line"><span class="comment"># Number of training epochs. The BERT authors recommend between 2 and 4. </span></span><br><span class="line"><span class="comment"># We chose to run for 4, but we'll see later that this may be over-fitting the</span></span><br><span class="line"><span class="comment"># training data.</span></span><br><span class="line">epochs = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Total number of training steps is [number of batches] x [number of epochs]. </span></span><br><span class="line"><span class="comment"># (Note that this is not the same as the number of training samples).</span></span><br><span class="line">total_steps = len(train_dataloader) * epochs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the learning rate scheduler.</span></span><br><span class="line">scheduler = get_linear_schedule_with_warmup(optimizer, </span><br><span class="line">                                            num_warmup_steps = <span class="number">0</span>, <span class="comment"># Default value in run_glue.py</span></span><br><span class="line">                                            num_training_steps = total_steps)</span><br></pre></td></tr></table></figure><h2 id="训练循环">4.3. 训练循环</h2><p>下面是我们的训练循环。有很多事情要做，但从根本上讲，我们的循环中的每一个过程都有一个训练阶段和一个验证阶段。</p><blockquote><p>*感谢<a href="https://ca.linkedin.com/in/stasbekman" target="_blank" rel="noopener">Stas Bekman</a>贡献了使用验证损失来检测过度拟合的见解和代码！</p></blockquote><p><strong>训练：</strong> - 解开我们的数据输入和标签 - 将数据加载到GPU上进行加速 - 清空上一次计算的梯度。 - 在pytorch中，默认情况下梯度会累积（对RNNs等有用），除非你明确地清除它们。 - 正向传递（通过网络输入数据）。 - 后传(反向传播) - 用optimizer.step()告诉网络更新参数。 - 跟踪监测进展的变量</p><p><strong>验证：</strong> - 解开我们的数据输入和标签 - 将数据加载到GPU上进行加速 - 正向传递(通过网络输入数据) - 计算我们的验证数据的损失，并跟踪监测进度的变量。</p><p>Pytorch 向我们隐藏了所有的详细计算，但我们已经对代码进行了注释，以指出上述步骤中的每一行都在进行。</p><blockquote><p><em>PyTorch也有一些<a href="https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html#sphx-glr-beginner-blitz-cifar10-tutorial-py" target="_blank" rel="noopener">初学者教程</a>，你可能也会觉得很有帮助</em>。</p></blockquote><p>定义一个用于计算精度的辅助函数。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># Function to calculate the accuracy of our predictions vs labels</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flat_accuracy</span><span class="params">(preds, labels)</span>:</span></span><br><span class="line">    pred_flat = np.argmax(preds, axis=<span class="number">1</span>).flatten()</span><br><span class="line">    labels_flat = labels.flatten()</span><br><span class="line">    <span class="keyword">return</span> np.sum(pred_flat == labels_flat) / len(labels_flat)</span><br></pre></td></tr></table></figure><p>用于格式化 "hh:mm:ss" 的经过时间的辅助函数。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">format_time</span><span class="params">(elapsed)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Takes a time in seconds and returns a string hh:mm:ss</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># Round to the nearest second.</span></span><br><span class="line">    elapsed_rounded = int(round((elapsed)))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Format as hh:mm:ss</span></span><br><span class="line">    <span class="keyword">return</span> str(datetime.timedelta(seconds=elapsed_rounded))</span><br></pre></td></tr></table></figure><p>我们准备开始训练了!</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># This training code is based on the `run_glue.py` script here:</span></span><br><span class="line"><span class="comment"># https://github.com/huggingface/transformers/blob/5bfcd0485ece086ebcbed2d008813037968a9e58/examples/run_glue.py#L128</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the seed value all over the place to make this reproducible.</span></span><br><span class="line">seed_val = <span class="number">42</span></span><br><span class="line"></span><br><span class="line">random.seed(seed_val)</span><br><span class="line">np.random.seed(seed_val)</span><br><span class="line">torch.manual_seed(seed_val)</span><br><span class="line">torch.cuda.manual_seed_all(seed_val)</span><br><span class="line"></span><br><span class="line"><span class="comment"># We'll store a number of quantities such as training and validation loss, </span></span><br><span class="line"><span class="comment"># validation accuracy, and timings.</span></span><br><span class="line">training_stats = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># Measure the total training time for the whole run.</span></span><br><span class="line">total_t0 = time.time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># For each epoch...</span></span><br><span class="line"><span class="keyword">for</span> epoch_i <span class="keyword">in</span> range(<span class="number">0</span>, epochs):</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># ========================================</span></span><br><span class="line">    <span class="comment">#               Training</span></span><br><span class="line">    <span class="comment"># ========================================</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Perform one full pass over the training set.</span></span><br><span class="line">    </span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    print(<span class="string">'======== Epoch &#123;:&#125; / &#123;:&#125; ========'</span>.format(epoch_i + <span class="number">1</span>, epochs))</span><br><span class="line">    print(<span class="string">'Training...'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Measure how long the training epoch takes.</span></span><br><span class="line">    t0 = time.time()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Reset the total loss for this epoch.</span></span><br><span class="line">    total_train_loss = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Put the model into training mode. Don't be mislead--the call to </span></span><br><span class="line">    <span class="comment"># `train` just changes the *mode*, it doesn't *perform* the training.</span></span><br><span class="line">    <span class="comment"># `dropout` and `batchnorm` layers behave differently during training</span></span><br><span class="line">    <span class="comment"># vs. test (source: https://stackoverflow.com/questions/51433378/what-does-model-train-do-in-pytorch)</span></span><br><span class="line">    model.train()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># For each batch of training data...</span></span><br><span class="line">    <span class="keyword">for</span> step, batch <span class="keyword">in</span> enumerate(train_dataloader):</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Progress update every 40 batches.</span></span><br><span class="line">        <span class="keyword">if</span> step % <span class="number">40</span> == <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> step == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># Calculate elapsed time in minutes.</span></span><br><span class="line">            elapsed = format_time(time.time() - t0)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># Report progress.</span></span><br><span class="line">            print(<span class="string">'  Batch &#123;:&gt;5,&#125;  of  &#123;:&gt;5,&#125;.    Elapsed: &#123;:&#125;.'</span>.format(step, len(train_dataloader), elapsed))</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Unpack this training batch from our dataloader. </span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># As we unpack the batch, we'll also copy each tensor to the GPU using the </span></span><br><span class="line">        <span class="comment"># `to` method.</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># `batch` contains three pytorch tensors:</span></span><br><span class="line">        <span class="comment">#   [0]: input ids </span></span><br><span class="line">        <span class="comment">#   [1]: attention masks</span></span><br><span class="line">        <span class="comment">#   [2]: labels </span></span><br><span class="line">        b_input_ids = batch[<span class="number">0</span>].to(device)</span><br><span class="line">        b_input_mask = batch[<span class="number">1</span>].to(device)</span><br><span class="line">        b_labels = batch[<span class="number">2</span>].to(device)</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Always clear any previously calculated gradients before performing a</span></span><br><span class="line">        <span class="comment"># backward pass. PyTorch doesn't do this automatically because </span></span><br><span class="line">        <span class="comment"># accumulating the gradients is "convenient while training RNNs". </span></span><br><span class="line">        <span class="comment"># (source: https://stackoverflow.com/questions/48001598/why-do-we-need-to-call-zero-grad-in-pytorch)</span></span><br><span class="line">        model.zero_grad()        </span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Perform a forward pass (evaluate the model on this training batch).</span></span><br><span class="line">        <span class="comment"># The documentation for this `model` function is here: </span></span><br><span class="line">        <span class="comment"># https://huggingface.co/transformers/v2.2.0/model_doc/bert.html#transformers.BertForSequenceClassification</span></span><br><span class="line">        <span class="comment"># It returns different numbers of parameters depending on what arguments</span></span><br><span class="line">        <span class="comment"># arge given and what flags are set. For our useage here, it returns</span></span><br><span class="line">        <span class="comment"># the loss (because we provided labels) and the "logits"--the model</span></span><br><span class="line">        <span class="comment"># outputs prior to activation.</span></span><br><span class="line">        loss, logits = model(b_input_ids, </span><br><span class="line">                             token_type_ids=<span class="literal">None</span>, </span><br><span class="line">                             attention_mask=b_input_mask, </span><br><span class="line">                             labels=b_labels)</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Accumulate the training loss over all of the batches so that we can</span></span><br><span class="line">        <span class="comment"># calculate the average loss at the end. `loss` is a Tensor containing a</span></span><br><span class="line">        <span class="comment"># single value; the `.item()` function just returns the Python value </span></span><br><span class="line">        <span class="comment"># from the tensor.</span></span><br><span class="line">        total_train_loss += loss.item()</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Perform a backward pass to calculate the gradients.</span></span><br><span class="line">        loss.backward()</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Clip the norm of the gradients to 1.0.</span></span><br><span class="line">        <span class="comment"># This is to help prevent the "exploding gradients" problem.</span></span><br><span class="line">        torch.nn.utils.clip_grad_norm_(model.parameters(), <span class="number">1.0</span>)</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Update parameters and take a step using the computed gradient.</span></span><br><span class="line">        <span class="comment"># The optimizer dictates the "update rule"--how the parameters are</span></span><br><span class="line">        <span class="comment"># modified based on their gradients, the learning rate, etc.</span></span><br><span class="line">        optimizer.step()</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Update the learning rate.</span></span><br><span class="line">        scheduler.step()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Calculate the average loss over all of the batches.</span></span><br><span class="line">    avg_train_loss = total_train_loss / len(train_dataloader)            </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Measure how long this epoch took.</span></span><br><span class="line">    training_time = format_time(time.time() - t0)</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    print(<span class="string">"  Average training loss: &#123;0:.2f&#125;"</span>.format(avg_train_loss))</span><br><span class="line">    print(<span class="string">"  Training epcoh took: &#123;:&#125;"</span>.format(training_time))</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># ========================================</span></span><br><span class="line">    <span class="comment">#               Validation</span></span><br><span class="line">    <span class="comment"># ========================================</span></span><br><span class="line">    <span class="comment"># After the completion of each training epoch, measure our performance on</span></span><br><span class="line">    <span class="comment"># our validation set.</span></span><br><span class="line">    </span><br><span class="line">    print(<span class="string">""</span>)</span><br><span class="line">    print(<span class="string">"Running Validation..."</span>)</span><br><span class="line">    </span><br><span class="line">    t0 = time.time()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Put the model in evaluation mode--the dropout layers behave differently</span></span><br><span class="line">    <span class="comment"># during evaluation.</span></span><br><span class="line">    model.eval()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Tracking variables </span></span><br><span class="line">    total_eval_accuracy = <span class="number">0</span></span><br><span class="line">    total_eval_loss = <span class="number">0</span></span><br><span class="line">    nb_eval_steps = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Evaluate data for one epoch</span></span><br><span class="line">    <span class="keyword">for</span> batch <span class="keyword">in</span> validation_dataloader:</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Unpack this training batch from our dataloader. </span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># As we unpack the batch, we'll also copy each tensor to the GPU using </span></span><br><span class="line">        <span class="comment"># the `to` method.</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># `batch` contains three pytorch tensors:</span></span><br><span class="line">        <span class="comment">#   [0]: input ids </span></span><br><span class="line">        <span class="comment">#   [1]: attention masks</span></span><br><span class="line">        <span class="comment">#   [2]: labels </span></span><br><span class="line">        b_input_ids = batch[<span class="number">0</span>].to(device)</span><br><span class="line">        b_input_mask = batch[<span class="number">1</span>].to(device)</span><br><span class="line">        b_labels = batch[<span class="number">2</span>].to(device)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Tell pytorch not to bother with constructing the compute graph during</span></span><br><span class="line">        <span class="comment"># the forward pass, since this is only needed for backprop (training).</span></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():        </span><br><span class="line">    </span><br><span class="line">            <span class="comment"># Forward pass, calculate logit predictions.</span></span><br><span class="line">            <span class="comment"># token_type_ids is the same as the "segment ids", which </span></span><br><span class="line">            <span class="comment"># differentiates sentence 1 and 2 in 2-sentence tasks.</span></span><br><span class="line">            <span class="comment"># The documentation for this `model` function is here: </span></span><br><span class="line">            <span class="comment"># https://huggingface.co/transformers/v2.2.0/model_doc/bert.html#transformers.BertForSequenceClassification</span></span><br><span class="line">            <span class="comment"># Get the "logits" output by the model. The "logits" are the output</span></span><br><span class="line">            <span class="comment"># values prior to applying an activation function like the softmax.</span></span><br><span class="line">            (loss, logits) = model(b_input_ids, </span><br><span class="line">                                   token_type_ids=<span class="literal">None</span>, </span><br><span class="line">                                   attention_mask=b_input_mask,</span><br><span class="line">                                   labels=b_labels)</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># Accumulate the validation loss.</span></span><br><span class="line">        total_eval_loss += loss.item()</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Move logits and labels to CPU</span></span><br><span class="line">        logits = logits.detach().cpu().numpy()</span><br><span class="line">        label_ids = b_labels.to(<span class="string">'cpu'</span>).numpy()</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># Calculate the accuracy for this batch of test sentences, and</span></span><br><span class="line">        <span class="comment"># accumulate it over all batches.</span></span><br><span class="line">        total_eval_accuracy += flat_accuracy(logits, label_ids)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Report the final accuracy for this validation run.</span></span><br><span class="line">    avg_val_accuracy = total_eval_accuracy / len(validation_dataloader)</span><br><span class="line">    print(<span class="string">"  Accuracy: &#123;0:.2f&#125;"</span>.format(avg_val_accuracy))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Calculate the average loss over all of the batches.</span></span><br><span class="line">    avg_val_loss = total_eval_loss / len(validation_dataloader)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Measure how long the validation run took.</span></span><br><span class="line">    validation_time = format_time(time.time() - t0)</span><br><span class="line">    </span><br><span class="line">    print(<span class="string">"  Validation Loss: &#123;0:.2f&#125;"</span>.format(avg_val_loss))</span><br><span class="line">    print(<span class="string">"  Validation took: &#123;:&#125;"</span>.format(validation_time))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Record all statistics from this epoch.</span></span><br><span class="line">    training_stats.append(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">'epoch'</span>: epoch_i + <span class="number">1</span>,</span><br><span class="line">            <span class="string">'Training Loss'</span>: avg_train_loss,</span><br><span class="line">            <span class="string">'Valid. Loss'</span>: avg_val_loss,</span><br><span class="line">            <span class="string">'Valid. Accur.'</span>: avg_val_accuracy,</span><br><span class="line">            <span class="string">'Training Time'</span>: training_time,</span><br><span class="line">            <span class="string">'Validation Time'</span>: validation_time</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">print(<span class="string">""</span>)</span><br><span class="line">print(<span class="string">"Training complete!"</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"Total training took &#123;:&#125; (h:mm:ss)"</span>.format(format_time(time.time()-total_t0)))</span><br></pre></td></tr></table></figure><p>我们来看看训练过程的总结。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Display floats with two decimal places.</span></span><br><span class="line">pd.set_option(<span class="string">'precision'</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a DataFrame from our training statistics.</span></span><br><span class="line">df_stats = pd.DataFrame(data=training_stats)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use the 'epoch' as the row index.</span></span><br><span class="line">df_stats = df_stats.set_index(<span class="string">'epoch'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># A hack to force the column headers to wrap.</span></span><br><span class="line"><span class="comment">#df = df.style.set_table_styles([dict(selector="th",props=[('max-width', '70px')])])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Display the table.</span></span><br><span class="line">print(df_stats)</span><br></pre></td></tr></table></figure><p>请注意，虽然训练损失随着时间的推移在下降，但验证损失却在增加！这说明我们的模型训练时间过长，对训练数据的拟合过度。</p><p>作为参考，我们使用的是7695个训练样本和856个验证样本）。</p><p>验证损失是一个比准确率更精确的衡量标准，因为对于准确率，我们并不关心准确的输出值，而只是关心它落在阈值的哪一边。</p><p>如果我们预测的答案是正确的，但置信度较低，那么验证损失会抓住这一点，而准确性则不会。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Commented out IPython magic to ensure Python compatibility.</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># % matplotlib inline</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use plot styling from seaborn.</span></span><br><span class="line">sns.set(style=<span class="string">'darkgrid'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Increase the plot size and font size.</span></span><br><span class="line">sns.set(font_scale=<span class="number">1.5</span>)</span><br><span class="line">plt.rcParams[<span class="string">"figure.figsize"</span>] = (<span class="number">12</span>,<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot the learning curve.</span></span><br><span class="line">plt.plot(df_stats[<span class="string">'Training Loss'</span>], <span class="string">'b-o'</span>, label=<span class="string">"Training"</span>)</span><br><span class="line">plt.plot(df_stats[<span class="string">'Valid. Loss'</span>], <span class="string">'g-o'</span>, label=<span class="string">"Validation"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Label the plot.</span></span><br><span class="line">plt.title(<span class="string">"Training &amp; Validation Loss"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"Epoch"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"Loss"</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.xticks([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="测试集的性能">5. 测试集的性能</h1><p>现在，我们将加载保持数据集，并准备输入，就像我们对训练集所做的那样。然后我们将使用<a href="https://scikit-learn.org/stable/modules/generated/sklearn.metrics.matthews_corrcoef.html" target="_blank" rel="noopener">Matthew's correlation coefficient</a>来评估预测，因为这是广大NLP社区用来评估CoLA性能的度量。通过这个指标，+1是最好的分数，-1是最差的分数。通过这种方式，我们可以看到我们在这个特定任务上与最先进模型的表现。</p><h3 id="数据准备">5.1. 数据准备</h3><p>我们需要应用所有与训练数据相同的步骤来准备我们的测试数据集。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load the dataset into a pandas dataframe.</span></span><br><span class="line">df = pd.read_csv(<span class="string">"./cola_public/raw/out_of_domain_dev.tsv"</span>, delimiter=<span class="string">'\t'</span>, header=<span class="literal">None</span>, names=[<span class="string">'sentence_source'</span>, <span class="string">'label'</span>, <span class="string">'label_notes'</span>, <span class="string">'sentence'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Report the number of sentences.</span></span><br><span class="line">print(<span class="string">'Number of test sentences: &#123;:,&#125;\n'</span>.format(df.shape[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create sentence and label lists</span></span><br><span class="line">sentences = df.sentence.values</span><br><span class="line">labels = df.label.values</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tokenize all of the sentences and map the tokens to thier word IDs.</span></span><br><span class="line">input_ids = []</span><br><span class="line">attention_masks = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># For every sentence...</span></span><br><span class="line"><span class="keyword">for</span> sent <span class="keyword">in</span> sentences:</span><br><span class="line">    <span class="comment"># `encode_plus` will:</span></span><br><span class="line">    <span class="comment">#   (1) Tokenize the sentence.</span></span><br><span class="line">    <span class="comment">#   (2) Prepend the `[CLS]` token to the start.</span></span><br><span class="line">    <span class="comment">#   (3) Append the `[SEP]` token to the end.</span></span><br><span class="line">    <span class="comment">#   (4) Map tokens to their IDs.</span></span><br><span class="line">    <span class="comment">#   (5) Pad or truncate the sentence to `max_length`</span></span><br><span class="line">    <span class="comment">#   (6) Create attention masks for [PAD] tokens.</span></span><br><span class="line">    encoded_dict = tokenizer.encode_plus(</span><br><span class="line">                        sent,                      <span class="comment"># Sentence to encode.</span></span><br><span class="line">                        add_special_tokens = <span class="literal">True</span>, <span class="comment"># Add '[CLS]' and '[SEP]'</span></span><br><span class="line">                        max_length = <span class="number">64</span>,           <span class="comment"># Pad &amp; truncate all sentences.</span></span><br><span class="line">                        pad_to_max_length = <span class="literal">True</span>,</span><br><span class="line">                        return_attention_mask = <span class="literal">True</span>,   <span class="comment"># Construct attn. masks.</span></span><br><span class="line">                        return_tensors = <span class="string">'pt'</span>,     <span class="comment"># Return pytorch tensors.</span></span><br><span class="line">                   )</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Add the encoded sentence to the list.    </span></span><br><span class="line">    input_ids.append(encoded_dict[<span class="string">'input_ids'</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># And its attention mask (simply differentiates padding from non-padding).</span></span><br><span class="line">    attention_masks.append(encoded_dict[<span class="string">'attention_mask'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Convert the lists into tensors.</span></span><br><span class="line">input_ids = torch.cat(input_ids, dim=<span class="number">0</span>)</span><br><span class="line">attention_masks = torch.cat(attention_masks, dim=<span class="number">0</span>)</span><br><span class="line">labels = torch.tensor(labels)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the batch size.  </span></span><br><span class="line">batch_size = <span class="number">32</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the DataLoader.</span></span><br><span class="line">prediction_data = TensorDataset(input_ids, attention_masks, labels)</span><br><span class="line">prediction_sampler = SequentialSampler(prediction_data)</span><br><span class="line">prediction_dataloader = DataLoader(prediction_data, sampler=prediction_sampler, batch_size=batch_size)</span><br></pre></td></tr></table></figure><h2 id="测试集上进行评估">5.2. 测试集上进行评估</h2><p>准备好了测试集，我们就可以应用我们的微调模型对测试集产生预测。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Prediction on test set</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'Predicting labels for &#123;:,&#125; test sentences...'</span>.format(len(input_ids)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Put model in evaluation mode</span></span><br><span class="line">model.eval()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tracking variables </span></span><br><span class="line">predictions , true_labels = [], []</span><br><span class="line"></span><br><span class="line"><span class="comment"># Predict </span></span><br><span class="line"><span class="keyword">for</span> batch <span class="keyword">in</span> prediction_dataloader:</span><br><span class="line">  <span class="comment"># Add batch to GPU</span></span><br><span class="line">  batch = tuple(t.to(device) <span class="keyword">for</span> t <span class="keyword">in</span> batch)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Unpack the inputs from our dataloader</span></span><br><span class="line">  b_input_ids, b_input_mask, b_labels = batch</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Telling the model not to compute or store gradients, saving memory and </span></span><br><span class="line">  <span class="comment"># speeding up prediction</span></span><br><span class="line">  <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">      <span class="comment"># Forward pass, calculate logit predictions</span></span><br><span class="line">      outputs = model(b_input_ids, token_type_ids=<span class="literal">None</span>, </span><br><span class="line">                      attention_mask=b_input_mask)</span><br><span class="line"></span><br><span class="line">  logits = outputs[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Move logits and labels to CPU</span></span><br><span class="line">  logits = logits.detach().cpu().numpy()</span><br><span class="line">  label_ids = b_labels.to(<span class="string">'cpu'</span>).numpy()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Store predictions and true labels</span></span><br><span class="line">  predictions.append(logits)</span><br><span class="line">  true_labels.append(label_ids)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'DONE.'</span>)</span><br></pre></td></tr></table></figure><p>使用"<a href="https://scikit-learn.org/stable/modules/generated/sklearn.metrics.matthews_corrcoef.html" target="_blank" rel="noopener">Matthews correlation coefficient</a>"来衡量CoLA基准的准确性。(MCC)。</p><p>我们在这里用MCC是因为班级不平衡。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'Positive samples: %d of %d (%.2f%%)'</span> % (df.label.sum(), len(df.label), (df.label.sum() / len(df.label) * <span class="number">100.0</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> matthews_corrcoef</span><br><span class="line"></span><br><span class="line">matthews_set = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># Evaluate each test batch using Matthew's correlation coefficient</span></span><br><span class="line">print(<span class="string">'Calculating Matthews Corr. Coef. for each batch...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># For each input batch...</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(true_labels)):</span><br><span class="line">    <span class="comment"># The predictions for this batch are a 2-column ndarray (one column for "0" </span></span><br><span class="line">    <span class="comment"># and one column for "1"). Pick the label with the highest value and turn this</span></span><br><span class="line">    <span class="comment"># in to a list of 0s and 1s.</span></span><br><span class="line">    pred_labels_i = np.argmax(predictions[i], axis=<span class="number">1</span>).flatten()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Calculate and store the coef for this batch.  </span></span><br><span class="line">    matthews = matthews_corrcoef(true_labels[i], pred_labels_i)                </span><br><span class="line">    matthews_set.append(matthews)</span><br></pre></td></tr></table></figure><p>最后的分数将基于整个测试集，但我们来看看各个 batch 的分数，以了解各 batch 之间指标的差异性。</p><p>每个批次都有 32 个句子，除了最后一个 batch 只有 (516 % 32)=4 个测试句子。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Create a barplot showing the MCC score for each batch of test samples.</span></span><br><span class="line">ax = sns.barplot(x=list(range(len(matthews_set))), y=matthews_set, ci=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'MCC Score per Batch'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'MCC Score (-1 to +1)'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Batch #'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>现在我们将综合所有批次的结果，计算出我们最终的MCC分数。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Combine the results across all batches. </span></span><br><span class="line">flat_predictions = np.concatenate(predictions, axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># For each sample, pick the label (0 or 1) with the higher score.</span></span><br><span class="line">flat_predictions = np.argmax(flat_predictions, axis=<span class="number">1</span>).flatten()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Combine the correct labels for each batch into a single list.</span></span><br><span class="line">flat_true_labels = np.concatenate(true_labels, axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Calculate the MCC</span></span><br><span class="line">mcc = matthews_corrcoef(flat_true_labels, flat_predictions)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Total MCC: %.3f'</span> % mcc)</span><br></pre></td></tr></table></figure><p>酷! 在大约半小时内，在不做任何超参数调整（调整学习率、epochs、批次大小、ADAM属性等）的情况下，我们能够得到一个不错的分数。</p><blockquote><p>*注意：为了最大限度地提高分数，我们应该删除 "验证集"（我们用它来帮助确定要训练多少个epochs），并对整个训练集进行训练。</p></blockquote><p>库中记录了这个基准的预期精度<a href="https://huggingface.co/transformers/examples.html#glue" target="_blank" rel="noopener">这里</a>为<code>49.23</code>。</p><p>你也可以看看官方的排行榜<a href="https://gluebenchmark.com/leaderboard/submission/zlssuBTm5XRs0aSKbFYGVIVdvbj1/-LhijX9VVmvJcvzKymxy" target="_blank" rel="noopener">这里</a>。</p><p>请注意，(由于数据集规模较小?)运行之间的准确率可能会有很大差异。</p><h1 id="结论">结论</h1><p>本篇文章演示了利用预先训练好的 BERT 模型，无论你对哪个具体的 NLP 任务感兴趣，你都可以使用 pytorch 接口以最小的努力和训练时间快速有效地创建一个高质量的模型。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文为博客 &lt;a href=&quot;https://mccormickml.com/2019/07/22/BERT-fine-tuning/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BERT Fine-Tuning Tutorial with PyTorch&lt;/a&gt; 的翻译&lt;/p&gt;
    
    </summary>
    
    
      <category term="知识点" scheme="https://xungejiang.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="NLP" scheme="https://xungejiang.com/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>最具性价比的4K显示器？创维28U1显示器使用体验</title>
    <link href="https://xungejiang.com//2020/05/29/4k-28u1/"/>
    <id>https://xungejiang.com//2020/05/29/4k-28u1/</id>
    <published>2020-05-29T10:48:29.000Z</published>
    <updated>2021-11-24T09:02:02.788Z</updated>
    
    <content type="html"><![CDATA[<p>2020年5月10日晚，IT之家发出了这样一篇文章 <a href="https://www.ithome.com/0/486/567.htm" target="_blank" rel="noopener">创维推出高性价比28英寸4K显示器：HDR10/Type-C，1399元</a>。IPS、广色域、28寸。。。评论区立刻炸了锅，一分钱一分货，大家都在猜测这款显示器究竟在哪些地方“偷工减料”才能达到如此性价比。本文来探究一下这款显示器究竟是不是最具性价比的4K显示器。</p><a id="more"></a><h2 id="外观">外观</h2><p>显示器是上左右三窄边框设计，窄边框约7mm，虽然比之前用的戴尔显示器边框稍宽一些，但是在28寸的屏幕上看起来很协调。显示器底座是一块厚重的矩形金属板，看起来非常简洁。显示器支持壁挂，支架支持快拆，并且支架可以上下左右俯仰调节，但是不支持旋转为竖屏。此处预售时放了竖屏的宣传图，后来才改了宣传图并添加了竖屏支架需单独购买的小字。说实话28寸显示器竖起来实在是太高了，但是误导宣传实在没必要。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/20-06-06/201591434257_.pic.jpg" alt="201591434257_.pic"></p><p>接口方面由一个<strong>HDMI 2.0</strong>，一个<strong>DP 1.2</strong>，一个<strong>Type-C</strong>，两个<strong>USB 2.0</strong>和一个<strong>音频</strong>接口组成。其中两个USB2.0接口比较鸡肋，因为没有USB的上行接口，所以只有在Type-C接口接上支持云电脑的手机后才可以使用。Type-C接口好评，对于一些只有Type-C接口的笔记本电脑来说可以不用转接头了，但是看评论好像Type-C只支持30HZ的刷新率。同时还支持15W的反向充电，充手机足够了。显示器还附带了DP线和Type-C线，质量都很不错。不过显示器电源是外置的，大砖头差评。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/20-06-06/191591434238_.pic.jpg" alt="191591434238_.pic"></p><p>这块面板还支持HDR10，不过最大亮度只有300 cd/m2，只是支持播放HDR视频，对HDR效果就不要有太多期待了。显示器还有2*2W的音响，音质就不用考虑了，聊胜于无。</p><h2 id="颜色表现">颜色表现</h2><p>博主在网上租了爱色丽i1 pro较色仪对屏幕进行校色，色域和色准表现结果如下。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/20-05-31/批注%202020-05-28%20042644.png" alt="批注 2020-05-28 042644" style="zoom: 50%;"></p><p>P3色域只有84%，没有达到宣传的90%。△E结果最大值为1.11，小于宣传的△E&lt;3。以上测试为爱色丽+DisplayCAL的测试结果，由于博主第一次使用较色仪，可能操作有误，不保证结果一定正确。校色文件稍后放出。</p><h2 id="坏点">坏点</h2><p>很不幸，博主购买的这块显示器有一个坏点，如下图绿点所示。应该是这个绿色像素点无法控制亮暗，在显示灰色的时候尤其明显。不过由于是4K分辨率，坏点很小以至于使用的第二天才发现，和客服聊了聊是允许退换货的，看起来不影响使用也就不退了。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/20-05-31/坏点.jpg" alt="坏点" style="zoom: 50%;"></p><h2 id="漏光">漏光</h2><p>IPS面板难免会有一定的漏光，我对这款显示器的漏光水平还是比较满意的。具体对比如下图，均为黑天关灯后拍摄。</p><figure><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/20-06-06/91591413878_.pic.jpg" alt="91591413878_.pic"><figcaption aria-hidden="true">91591413878_.pic</figcaption></figure><figure><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/20-06-06/101591413894_.pic.jpg" alt="101591413894_.pic"><figcaption aria-hidden="true">101591413894_.pic</figcaption></figure><figure><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/20-06-06/111591413901_.pic.jpg" alt="111591413901_.pic"><figcaption aria-hidden="true">111591413901_.pic</figcaption></figure><figure><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/20-06-06/121591413907_.pic.jpg" alt="121591413907_.pic"><figcaption aria-hidden="true">121591413907_.pic</figcaption></figure><figure><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/20-06-06/131591413914_.pic.jpg" alt="131591413914_.pic"><figcaption aria-hidden="true">131591413914_.pic</figcaption></figure><p>上述所有图片的ISO均是250，与人眼观察较为一致，可见显示器四周发暗，但基本不影响使用。</p><figure><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/20-06-06/81591413833_.pic.jpg" alt="81591413833_.pic"><figcaption aria-hidden="true">81591413833_.pic</figcaption></figure><p>当将ISO拉高到2500时效果如上图所示，可见四周漏光仍然明显，当然IPS面板多少都会有漏光现象，并不影响正常使用。</p><h2 id="与其他面板对比">与其他面板对比</h2><p>进入工厂模式我们可以看到该显示器使用的是群创的 M280DCA-E3B 面板。我们将其与京东方的 MV270QUM-N20 面板进行对比，该面板常用在三千价位以上的27寸4K的IPS显示器（<strong>戴尔 U2718Q、明基 PD2700U</strong> 等）</p><table><thead><tr class="header"><th>基本信息</th><th>群创 M280DCA-E3B（创维28U1）</th><th>京东方 MV270QUM-N20</th></tr></thead><tbody><tr class="odd"><td>面板尺寸</td><td>28.0（英寸）</td><td>27.0（英寸）</td></tr><tr class="even"><td>面板亮度</td><td>300 cd/m2</td><td>350 cd/m2</td></tr><tr class="odd"><td>NTSC 比值</td><td>84% NTSC</td><td>79% NTSC</td></tr><tr class="even"><td>Adobe 覆盖率</td><td>82%</td><td>81%</td></tr><tr class="odd"><td>DCI-P3 覆盖率</td><td>86%</td><td>82%</td></tr><tr class="even"><td>响应时间</td><td>4 ms</td><td>5 ms</td></tr><tr class="odd"><td>对比度</td><td>1000：1</td><td>1300：1</td></tr></tbody></table><p>通过比较我们发现，<strong>创维28U1</strong> 使用的这块群创面板在色域方面比三千价位的4K显示器更广，但是在亮度以及对比度等方面，京东方 MV270QUM-N20 参数更好一些。也就是说作为入门4K显示器，这块面板是及格的，并没有明显的偏科。</p><h2 id="与使用相同面板的显示器对比">与使用相同面板的显示器对比</h2><p>同时使用这块群创面板的还<strong>可能</strong>有 <strong>联想 S28u，三星 U28R550，宏碁 VG280K，飞利浦 288E2E</strong> 等显示器。之所以是<strong>可能</strong>是因为博主并没有证据证明他们的面板相同，但是据我所知28寸4K的IPS显示器目前只有群创这一款面板。在使用相同面板的情况下，不同厂家的显示器主要区别主要是驱动板用料、出厂校色、品牌售后等地方下功夫。对比结果如下表所示。</p><table><thead><tr class="header"><th>显示器名称</th><th>京东最低价</th><th>画中画</th><th>△E</th><th>接口</th><th>质保</th><th>亮度</th></tr></thead><tbody><tr class="odd"><td>创维 28U1</td><td>1399</td><td>不支持</td><td>&lt;3</td><td>HDMI+DP+typeC</td><td>3年</td><td>300</td></tr><tr class="even"><td>联想 S28u</td><td>2499</td><td>不支持</td><td>?</td><td>HDMI+DP</td><td>1年</td><td>300</td></tr><tr class="odd"><td>三星 U28R550</td><td>1999</td><td>支持</td><td>?</td><td>HDMI*2+DP</td><td>1年</td><td>300</td></tr><tr class="even"><td>宏碁 VG280K</td><td>1999</td><td>不支持</td><td>?</td><td>HDMI*2+DP</td><td>3年</td><td>300</td></tr><tr class="odd"><td>飞利浦 288E2E</td><td>1799</td><td>支持</td><td>&lt;2</td><td>HDMI*2+DP</td><td>3年</td><td>300</td></tr><tr class="even"><td>华硕 VG289Q</td><td>1999</td><td>不支持</td><td>？</td><td>HDMI*2+DP</td><td>3年</td><td>350</td></tr></tbody></table><p>除了华硕亮度达到350cd/m2，其余显示器都是300cd/m2。创维28u1以较低的价格，不错的配置，可以说是性价比非常不错的选择了。</p><h2 id="总结">总结</h2><p>创维在价格上十分具有优势，但是在一些细节上仍需打磨，如可能没有出厂校色，亮屏较慢，屏幕坏点控制等。对于产品来说，创维28U1这款显示器无疑是值得购买的，作为先上车的我来说非常满意。但对于宣传角度来说，无疑是失败的，尤其是在预售时的参数与实际购买的参数差距较大，比如△E由小于2改成了小于3，宣传可以竖屏写代码但支架需单独购买，宣传支持画中画又删除此功能。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/20-06-06/对比1.jpg" alt="对比1" style="zoom:;"></p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/20-06-06/对比2.jpg" alt="对比2" style="zoom:;"></p><p>这在品牌口碑上尤其不利，希望以后厂商注意。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2020年5月10日晚，IT之家发出了这样一篇文章 &lt;a href=&quot;https://www.ithome.com/0/486/567.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;创维推出高性价比28英寸4K显示器：HDR10/Type-C，1399元&lt;/a&gt;。IPS、广色域、28寸。。。评论区立刻炸了锅，一分钱一分货，大家都在猜测这款显示器究竟在哪些地方“偷工减料”才能达到如此性价比。本文来探究一下这款显示器究竟是不是最具性价比的4K显示器。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="Monitor" scheme="https://xungejiang.com/tags/Monitor/"/>
    
  </entry>
  
  <entry>
    <title>四路 RTX2080Ti 深度学习服务器配置</title>
    <link href="https://xungejiang.com//2019/11/07/GPU-server/"/>
    <id>https://xungejiang.com//2019/11/07/GPU-server/</id>
    <published>2019-11-07T10:48:29.000Z</published>
    <updated>2021-11-24T09:02:02.788Z</updated>
    
    <content type="html"><![CDATA[<p>实验室准备新配一台四路 RTX2080Ti 的深度学习服务器。为了报销方便，没有选择供应商，而是选择在京东自营购买。本文详细介绍了配置服务器的过程。后续的系统安装可以参考本人的这篇博客：<a href="https://xungejiang.com/2019/05/31/lxd-setting/">使用 LXD 搭建多人使用的 GPU 服务器</a></p><a id="more"></a><h2 id="配置">配置</h2><p>博主在购买之前在知乎提了一个<a href="https://www.zhihu.com/question/345502563" target="_blank" rel="noopener">问题</a>，得到了很有用的帮助。下面是具体配置：</p><table><thead><tr class="header"><th>类别</th><th>品牌</th><th>数量</th><th>单价</th><th>总价</th></tr></thead><tbody><tr class="odd"><td>GPU</td><td>技嘉RTX2080Ti TURBO 11G</td><td>4</td><td>9999</td><td>39996</td></tr><tr class="even"><td>CPU</td><td>i9-9820X 10/20</td><td>1</td><td>6299</td><td>6299</td></tr><tr class="odd"><td>主板</td><td>技嘉 X299-WU8</td><td>1</td><td>4999</td><td>4999</td></tr><tr class="even"><td>机箱</td><td>先马掠食者V1</td><td>1</td><td>999</td><td>999</td></tr><tr class="odd"><td>内存</td><td>美商海盗船 复仇者LPX DDR4 3000 16GB</td><td>8</td><td>579</td><td>4632</td></tr><tr class="even"><td>电源</td><td>振华 额定2000W LEADEX P 2000电源</td><td>1</td><td>3299</td><td>3299</td></tr><tr class="odd"><td>NVME SSD</td><td>三星 1TB SSD固态硬盘 970 EVO</td><td>1</td><td>1699</td><td>1699</td></tr><tr class="even"><td>SATA SSD</td><td>三星 1TB SSD固态硬盘 860 EVO</td><td>1</td><td>1029</td><td>1029</td></tr><tr class="odd"><td>CPU 散热</td><td>美商海盗船 H150i PRO</td><td>1</td><td>1299</td><td>1299</td></tr><tr class="even"><td>-</td><td>-</td><td>-</td><td>-</td><td>64251</td></tr></tbody></table><p>其实配置的关键就是 GPU、CPU和主板的选择。</p><h2 id="显卡选择">显卡选择</h2><p>博主是2019年10月选择的配置，目前最具有性价比的显卡依然是 RTX2080Ti，图灵架构可以在混合精度运算时大幅度提升性能，缺点是显存较小，只有 11 GB</p><p>GPU 在确定是 RTX2080Ti 后就非常好选择了。注意多卡服务器<strong>必须</strong>是单风扇的<strong>涡轮</strong>版显卡，因为涡轮散热空气从头进入，热气从尾排出，多张卡互不影响。但是多风扇轴式散热是从下方吸入空气，侧面排出，如果是多卡排出的热气又被上卡吸进去，导致上卡温度爆炸，降频严重。下图可以理解涡轮风扇的风道。</p><figure><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/19-11-07/gpu-turbo.jpg" alt="gpu_turbo"><figcaption aria-hidden="true">gpu_turbo</figcaption></figure><h2 id="cpu与主板选择">CPU与主板选择</h2><p>CPU与主板的选择无非就是Intel和AMD的选择，每家又分为民用级和服务器级，这里我选择的是Intel的民用级i9-9820X。AMD的线程撕裂者性价比更高，但可能坑多一些。服务器级的CPU以及主板一般需要经销商采购，区别主要是支持ECC的内存更稳定，京东自营一般不卖，所以没有考虑。</p><h2 id="cpu-散热器选择">CPU 散热器选择</h2><p>CPU散热器这里选择的是美商海盗船 H150i PRO 360一体水冷。一开始选择的是猫头鹰的风冷，但是由于个头太大，装上后散热块会和显卡背面金属触点接触（显卡没有背板），怕引起短路等问题，最终更换成一体水冷。</p><h2 id="电源选择">电源选择</h2><p>由于显卡满载就需要至少1000W的功率，再加上CPU内存硬盘，1600W按道理是足够了，为了稳妥选择了振华的2000W电源。需要注意的是这块电源的插头是10A的空调插头，需要买个转接的插线板。</p><h2 id="散热问题">散热问题</h2><p>服务器已经稳定运行了半年多，散热问题还是有必要提一下。虽然机箱装满了4个机箱风扇以及3个一体水冷的风扇，显卡也是机器学习专供的涡轮版可以及时将热气排到机箱外，但是由于机箱放置在只开着一扇窗户的小机房里，导致机房温度骤升（机箱的铁板烫的不敢用手摸）。最终在窗户上加上排气扇解决。四块显卡满载情况下，最下面的显卡温度控制最好，在76度左右，剩下的三块显卡均达到82度，可能碰到了功耗墙。</p><h2 id="总结">总结</h2><p>本次装机除显卡为天猫旗舰店购买外，其余均在京东自营购买。如果下次还有机会重组一套配置的话，显卡的显存会尽可能换大一些的，CPU会尝试使用AMD，可能的话选择水冷（风险和维护成本有点高）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实验室准备新配一台四路 RTX2080Ti 的深度学习服务器。为了报销方便，没有选择供应商，而是选择在京东自营购买。本文详细介绍了配置服务器的过程。后续的系统安装可以参考本人的这篇博客：&lt;a href=&quot;https://xungejiang.com/2019/05/31/lxd-setting/&quot;&gt;使用 LXD 搭建多人使用的 GPU 服务器&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="经验值" scheme="https://xungejiang.com/categories/%E7%BB%8F%E9%AA%8C%E5%80%BC/"/>
    
    
      <category term="GPU" scheme="https://xungejiang.com/tags/GPU/"/>
    
  </entry>
  
  <entry>
    <title>AttributeError:&#39;NoneType&#39; object has no attribute &#39;clone&#39;</title>
    <link href="https://xungejiang.com//2019/10/24/pytorch-error-1/"/>
    <id>https://xungejiang.com//2019/10/24/pytorch-error-1/</id>
    <published>2019-10-24T08:15:28.000Z</published>
    <updated>2021-11-24T09:02:02.788Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 PyTorch 计算 Tensor 的梯度时遇到了这个问题。</p><p>Debug 查看是因为 Tensor 的 <code>is_leaf</code> 是 <code>False</code>，说明无法求梯度</p><p>解决办法是 <code>Tensor.detach()</code></p><p>就可以求梯度了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用 PyTorch 计算 Tensor 的梯度时遇到了这个问题。&lt;/p&gt;
&lt;p&gt;Debug 查看是因为 Tensor 的 &lt;code&gt;is_leaf&lt;/code&gt; 是 &lt;code&gt;False&lt;/code&gt;，说明无法求梯度&lt;/p&gt;
&lt;p&gt;解决办法是 &lt;code&gt;Tenso
      
    
    </summary>
    
    
      <category term="经验值" scheme="https://xungejiang.com/categories/%E7%BB%8F%E9%AA%8C%E5%80%BC/"/>
    
    
      <category term="pytorch" scheme="https://xungejiang.com/tags/pytorch/"/>
    
  </entry>
  
  <entry>
    <title>ImageNet 训练集特殊图像集合</title>
    <link href="https://xungejiang.com//2019/10/20/imagenet-train-set/"/>
    <id>https://xungejiang.com//2019/10/20/imagenet-train-set/</id>
    <published>2019-10-20T01:56:07.000Z</published>
    <updated>2021-11-24T09:02:02.787Z</updated>
    
    <content type="html"><![CDATA[<p>最近运行一个 PyTorch 工程的代码，在读取数据集时没有用官方的 Dataloader，而是自己写了一个读取数据集的函数。在读取 ImageNet 2012 数据集时遇到了一些错误，在此记录一下。</p><a id="more"></a><h2 id="n02105855_2933.jpeg-其实是-png-图像">n02105855_2933.JPEG 其实是 PNG 图像</h2><p>在使用 cv2 读取数据集并将其馈送到 <code>model(data)</code> 时，如果没有对data进行检验，就有可能报下面的错误</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RuntimeError: Given groups=1, weight of size 64 3 7 7, expected input[1, 4, 224, 224] to have 3 channels, but got 4 channels instead</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RuntimeError: invalid argument 0: Sizes of tensors must match except in dimension 0. Got 3 and 4 in dimension 1 at /tmp/pip-req-build-58y_cjjl/aten/src/TH/generic/THTensor.cpp:689</span><br></pre></td></tr></table></figure><p>这是因为训练集中有一个图片是 PNG 图片，强行将后缀名改为了 <code>.JPEG</code>，但还是保留了 PNG 图像的 4 通道（PNG图像除了 RGB 三通道外还有一个 Alpha 通道，表示图像的透明度）</p><p>这个图片就是 <code>n02105855_2933.JPEG</code></p><h2 id="n04152593_17460.jpeg-其实是-heic-图像">n04152593_17460.JPEG 其实是 HEIC 图像</h2><p>这个图片在读取时没有报错，但会报 warning。</p><h2 id="cmyk-图像">CMYK 图像</h2><p>JPEG 图像分两种，一种 RGB，一种 CMYK，下面是 CMYK 的图像列表：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">n01739381_1309.JPEG</span><br><span class="line">n02077923_14822.JPEG</span><br><span class="line">n02447366_23489.JPEG</span><br><span class="line">n02492035_15739.JPEG</span><br><span class="line">n02747177_10752.JPEG</span><br><span class="line">n03018349_4028.JPEG</span><br><span class="line">n03062245_4620.JPEG</span><br><span class="line">n03347037_9675.JPEG</span><br><span class="line">n03467068_12171.JPEG</span><br><span class="line">n03529860_11437.JPEG</span><br><span class="line">n03544143_17228.JPEG</span><br><span class="line">n03633091_5218.JPEG</span><br><span class="line">n03710637_5125.JPEG</span><br><span class="line">n03961711_5286.JPEG</span><br><span class="line">n04033995_2932.JPEG</span><br><span class="line">n04258138_17003.JPEG</span><br><span class="line">n04264628_27969.JPEG</span><br><span class="line">n04336792_7448.JPEG</span><br><span class="line">n04371774_5854.JPEG</span><br><span class="line">n04596742_4225.JPEG</span><br><span class="line">n07583066_647.JPEG</span><br><span class="line">n13037406_4650.JPEG</span><br></pre></td></tr></table></figure><p>当你在读取 ImageNet 2012 训练集遇到问题时，可以先尝试使用验证集进行训练，确认不是程序问题，而是训练集问题时，可以尝试删除或替换上述图像。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近运行一个 PyTorch 工程的代码，在读取数据集时没有用官方的 Dataloader，而是自己写了一个读取数据集的函数。在读取 ImageNet 2012 数据集时遇到了一些错误，在此记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="经验值" scheme="https://xungejiang.com/categories/%E7%BB%8F%E9%AA%8C%E5%80%BC/"/>
    
    
      <category term="pytorch" scheme="https://xungejiang.com/tags/pytorch/"/>
    
      <category term="imagenet" scheme="https://xungejiang.com/tags/imagenet/"/>
    
  </entry>
  
  <entry>
    <title>ICT 实验室深度学习服务器使用说明</title>
    <link href="https://xungejiang.com//2019/10/10/ICT-LXD-readme/"/>
    <id>https://xungejiang.com//2019/10/10/ICT-LXD-readme/</id>
    <published>2019-10-10T07:55:36.000Z</published>
    <updated>2021-11-24T09:02:02.787Z</updated>
    
    <content type="html"><![CDATA[<p>实验室新到的服务器已经配置完成。为了满足实验室所有同学的实验需求，同时最大化服务器的利用率，故为每位同学分配一个 LXD 容器，每个容器一个内网 IP。本文将详细介绍服务器的使用方式。</p><a id="more"></a><h2 id="服务器配置介绍">服务器配置介绍</h2><table><thead><tr class="header"><th>类型</th><th>型号</th><th>数量</th></tr></thead><tbody><tr class="odd"><td>GPU</td><td>技嘉RTX2080Ti TURBO 11G</td><td>4</td></tr><tr class="even"><td>CPU</td><td>i9-9820X 10核/20线程</td><td>1</td></tr><tr class="odd"><td>CPU散热</td><td>美商海盗船 H150i PRO</td><td>1</td></tr><tr class="even"><td>主板</td><td>技嘉 X299-WU8</td><td>1</td></tr><tr class="odd"><td>机箱</td><td>先马掠食者V1</td><td>1</td></tr><tr class="even"><td>内存</td><td>美商海盗船 复仇者LPX DDR4 3000 16GB</td><td>8</td></tr><tr class="odd"><td>电源</td><td>振华 额定2000W LEADEX P 2000电源</td><td>1</td></tr><tr class="even"><td>PCIE固态硬盘</td><td>三星 1TB SSD固态硬盘 970 EVO</td><td>1</td></tr><tr class="odd"><td>SATA固态硬盘</td><td>三星 1TB SSD固态硬盘 860 EVO</td><td>1</td></tr></tbody></table><h2 id="为什么选择-lxd">为什么选择 LXD</h2><p>LXD 就是一个提供了 REST API 的 LXC 容器管理器。 LXD 最主要的目标就是使用 Linux 容器而不是硬件虚拟化向用户提供一种接近虚拟机的使用体验。</p><p>其优势是</p><ul><li>容器中的系统与宿主机使用同一个内核，性能损耗小；</li><li>容器可以使用宿主机的所有计算资源；</li><li>容器重启速度达到秒级；</li><li>轻量级隔离，在隔离的同时还提供共享机制，以实现容器与宿主机的资源共享。</li></ul><p>使用 LXD，相当于每个人都拥有一台独立的服务器，运行环境互相隔离，例如可以安装不同的 CUDA 版本或 cuDNN 版本。（容器的显卡驱动必须和宿主机显卡驱动版本号相同，故不能改变）</p><p>目前每一个容器都已经安装好了显卡驱动，并分配了内网 IP，可以直接使用 SSH 进行远程登录。主目录有一个 <code>share</code> 共享目录，用于存放公用数据集、安装包、模型等共享资源。</p><h2 id="连接-lxd-容器">连接 LXD 容器</h2><p>目前使用 <a href="https://github.com/AdaptiveScale/lxdui" target="_blank" rel="noopener">LXDUI</a> 统一管理容器，地址为 <a href="http://192.168.100.230:15151" target="_blank" rel="noopener">http://192.168.100.230:15151</a> 进入后界面如下，可以对自己的容器进行 IP 查询以及快照管理。</p><figure><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/19-10-09/lxdui.png" alt="lxdui"><figcaption aria-hidden="true">lxdui</figcaption></figure><p>找到自己的 IP 后就可以使用 SSH 工具进行远程连接，默认用户名为你的姓氏，例如登录 IP 为 <code>192.168.100.111</code>，名为 <code>zhangsan</code>，则输入下述命令进行连接：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh zhang@192.168.100.111</span><br></pre></td></tr></table></figure><p>登录成功后可更改用户名和密码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 更改用户名</span><br><span class="line">usermod -l &lt;newUsername&gt; -d /home/&lt;newUsername&gt; -m &lt;oldUsername&gt;</span><br><span class="line">groupmod -n &lt;newUsername&gt; &lt;oldUsername&gt;</span><br><span class="line"></span><br><span class="line"># 更改密码</span><br><span class="line">passwd &lt;newUsername&gt;</span><br></pre></td></tr></table></figure><h2 id="安装-python-环境">安装 Python 环境</h2><p>这里介绍使用 Anaconda 进行 Python 环境的配置。</p><p>1.输入下述命令安装 Anaconda（不要加 sudo）：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bash ~/share/install/Anaconda3-2019.07-Linux-x86_64.sh</span><br></pre></td></tr></table></figure><p>其中最后一步 Init 为 yes，这样会在 ~/.bashrc 文件的最后添加初始化信息。</p><p>2.运行下述命令更新 .bashrc</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>更新后命令行前出现 <code>(bash)</code> 说明安装成功。</p><p>3.更换 Anaconda 源</p><p>由于 Anaconda 服务器在国外，换国内源可以加快下载速度。我在实验室搭建了 Anaconda 的本地镜像，本地 Anaconda 镜像的搭建可参考本人博客 <a href="https://xungejiang.com/2019/07/06/local-anaconda-mirror/">搭建本地 Anaconda 镜像</a>。输入下述命令更换为实验室镜像（更新可能不及时）：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda config --add channels http://192.168.100.188/pkgs/free/</span><br><span class="line">conda config --add channels http://192.168.100.188/pkgs/main/</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><p>也可以使用清华源，参考<a href="https://mirror.tuna.tsinghua.edu.cn/help/anaconda/" target="_blank" rel="noopener">https://mirror.tuna.tsinghua.edu.cn/help/anaconda/</a></p><p>4.创建 Anaconda 环境</p><p>例如，我们想创建名为 “pytorch” 的 PyTorch 环境，则可以运行下述命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda create -n &quot;pytorch&quot; pytorch</span><br></pre></td></tr></table></figure><p>这样将安装 PyTorch 的最新版本。若想安装某个特定的版本，可以在后面加 <code>=1.0</code>。</p><p>注意，使用 Anaconda 安装深度学习框架如 PyTorch 或 TensorFlow 时会自动安装 CUDA 和 cuDNN，并且会对深度学习框架进行优化，如果没有特殊需求则不需要再安装 CUDA 和 cuDNN。当然也可以安装（如编译安装 apex）。</p><p>输入下述命令进入刚才创建的 PyTorch 环境：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda activate pytorch</span><br></pre></td></tr></table></figure><p>之后可以使用 <code>conda install xxx</code> 或 <code>pip install xxx</code> 安装 Python 包。</p><h2 id="使用-pycharm-ide-远程连接-python-环境">使用 PyCharm IDE 远程连接 Python 环境</h2><p>PyCharm IDE 必须是专业版 (Professional)，如果是社区版 (Community) 需到 <a href="https://www.jetbrains.com/pycharm/download/" target="_blank" rel="noopener">官网</a> 下载专业版。</p><p>学生可通过咱学校的 edu 邮箱免费激活，<a href="https://blog.csdn.net/qq_36667170/article/details/79905198" target="_blank" rel="noopener">激活教程在此</a></p><p>PyCharm 远程调试的教程有很多，随便找了一个 <a href="https://www.xncoding.com/2016/05/26/python/pycharm-remote.html" target="_blank" rel="noopener">使用PyCharm进行远程开发和调试</a></p><h2 id="硬件监控">硬件监控</h2><p>在训练时，我们需要实时监控硬件的变化，如 GPU 的显存，占用率等。使用 <code>nvidia-smi</code> 命令可查看显存和占用率等使用状态，如下图所示。</p><figure><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/19-10-09/nvidia-smi.png" alt="nvidia_smi"><figcaption aria-hidden="true">nvidia_smi</figcaption></figure><p>一般来说，显存和占用率越高，训练速度越快。</p><p>使用下述命令可以每 0.1 秒刷新一次界面：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch -n 0.1 nvidia-smi</span><br></pre></td></tr></table></figure><p>使用下述网址可通过 NetData 监控硬件信息：</p><p>http://192.168.100.230:19999/#menu_nv_submenu_Load;theme=slate;help=true</p><p>效果如图：</p><figure><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/19-10-09/netdata.png" alt="netdata"><figcaption aria-hidden="true">netdata</figcaption></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实验室新到的服务器已经配置完成。为了满足实验室所有同学的实验需求，同时最大化服务器的利用率，故为每位同学分配一个 LXD 容器，每个容器一个内网 IP。本文将详细介绍服务器的使用方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="经验值" scheme="https://xungejiang.com/categories/%E7%BB%8F%E9%AA%8C%E5%80%BC/"/>
    
    
      <category term="lxd" scheme="https://xungejiang.com/tags/lxd/"/>
    
      <category term="lxc" scheme="https://xungejiang.com/tags/lxc/"/>
    
      <category term="ubuntu" scheme="https://xungejiang.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>超详细! Ubuntu 18.04 安装 NVIDIA 显卡驱动</title>
    <link href="https://xungejiang.com//2019/10/08/ubuntu-gpu-driver/"/>
    <id>https://xungejiang.com//2019/10/08/ubuntu-gpu-driver/</id>
    <published>2019-10-08T11:24:25.000Z</published>
    <updated>2019-10-08T11:24:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近给实验室服务器安装系统，多次因为显卡驱动的问题而崩溃。。在此整理一下显卡驱动的安装。</p><a id="more"></a><h2 id="查看显卡型号">查看显卡型号</h2><p>不知道显卡型号的可以通过此命令查看，但可能有的新显卡无法识别。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lspci | grep VGA</span><br></pre></td></tr></table></figure><h2 id="下载显卡驱动程序">下载显卡驱动程序</h2><p>在 <a href="https://www.nvidia.com/Download/index.aspx?lang=cn" target="_blank" rel="noopener">NVIDIA 官网</a> 或 <a href="https://www.geforce.com/drivers" target="_blank" rel="noopener">GeForce 官网</a> 下载所需的显卡驱动程序。</p><p>需要注意的是显卡驱动需要和 CUDA 版本对应，而 CUDA 版本又要和 PyTorch 或 TensorFlow 的版本对应，所以原则上是越新的版本越好，因为可以支持更多版本的深度学习框架。</p><h2 id="禁用-nouveau-驱动">禁用 nouveau 驱动</h2><p>1.使用下述命令可以查看 nouveau 驱动是否运行：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsmod | grep nouveau</span><br></pre></td></tr></table></figure><p>若出现下述结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nouveau              1863680  9</span><br><span class="line">video                  49152  1 nouveau</span><br><span class="line">ttm                   102400  1 nouveau</span><br><span class="line">mxm_wmi                16384  1 nouveau</span><br><span class="line">drm_kms_helper        180224  1 nouveau</span><br><span class="line">drm                   479232  12 drm_kms_helper,ttm,nouveau</span><br><span class="line">i2c_algo_bit           16384  2 igb,nouveau</span><br><span class="line">wmi                    28672  4 intel_wmi_thunderbolt,wmi_bmof,mxm_wmi,nouveau</span><br></pre></td></tr></table></figure><p>说明 nouveau 驱动正在运行。</p><p>2.运行下述命令禁用该驱动：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo bash -c &quot;echo blacklist nouveau &gt; /etc/modprobe.d/blacklist-nvidia-nouveau.conf&quot;</span><br><span class="line">sudo bash -c &quot;echo options nouveau modeset=0 &gt;&gt; /etc/modprobe.d/blacklist-nvidia-nouveau.conf&quot;</span><br></pre></td></tr></table></figure><p>检查命令是否正确：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat /etc/modprobe.d/blacklist-nvidia-nouveau.conf</span><br></pre></td></tr></table></figure><p>若出现下述结果说明命令正确：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset=0</span><br></pre></td></tr></table></figure><p>3.更新设置并重启：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo update-initramfs -u</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>4.重启后重新输入下述命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsmod | grep nouveau</span><br></pre></td></tr></table></figure><p>若没有任何输出说明禁用 nouveau 驱动成功</p><h2 id="安装-nvidia-显卡驱动">安装 NVIDIA 显卡驱动</h2><p>1.安装依赖：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install gcc g++ make</span><br></pre></td></tr></table></figure><p>2.登录时按 <code>ctrl + alt + F2</code> 进入命令行并使用用户名密码登录，并输入 <code>sudo telinit 3</code> 打开一个新的 TTY1 界面。如果是 SSH 远程连接，则不需要做上述步骤。</p><p>3.安装驱动：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo bash ./NVIDIA-Linux-x86_64-418.56.run</span><br></pre></td></tr></table></figure><p>并按下述选项选择：</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/19-10-09/nvidia01.png"></p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/19-10-09/nvidia02.png"></p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/19-10-09/nvidia03.png"></p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/19-10-09/nvidia04.png"></p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/19-10-09/nvidia05.png"></p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/19-10-09/nvidia06.png"></p><p>4.安装成功后输入 <code>nvidia-smi</code>，若有类似下述输出证明显卡安装成功：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 418.56       Driver Version: 418.56       CUDA Version: 10.1     |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|===============================+======================+======================|</span><br><span class="line">|   0  GeForce RTX 208...  Off  | 00000000:19:00.0 Off |                  N/A |</span><br><span class="line">| 52%   57C    P0    59W / 250W |      0MiB / 10989MiB |      0%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line">|   1  GeForce RTX 208...  Off  | 00000000:1A:00.0 Off |                  N/A |</span><br><span class="line">| 73%   70C    P0    73W / 250W |      0MiB / 10989MiB |      0%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line">|   2  GeForce RTX 208...  Off  | 00000000:67:00.0 Off |                  N/A |</span><br><span class="line">| 79%   71C    P0    86W / 250W |      0MiB / 10989MiB |      1%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line">|   3  GeForce RTX 208...  Off  | 00000000:68:00.0 Off |                  N/A |</span><br><span class="line">| 44%   71C    P0     1W / 250W |      0MiB / 10986MiB |      0%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line"></span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| Processes:                                                       GPU Memory |</span><br><span class="line">|  GPU       PID   Type   Process name                             Usage      |</span><br><span class="line">|=============================================================================|</span><br><span class="line">|  No running processes found                                                 |</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近给实验室服务器安装系统，多次因为显卡驱动的问题而崩溃。。在此整理一下显卡驱动的安装。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="ubuntu" scheme="https://xungejiang.com/tags/ubuntu/"/>
    
      <category term="nvidia" scheme="https://xungejiang.com/tags/nvidia/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch 图像分类实战 —— ImageNet 数据集</title>
    <link href="https://xungejiang.com//2019/07/26/pytorch-imagenet/"/>
    <id>https://xungejiang.com//2019/07/26/pytorch-imagenet/</id>
    <published>2019-07-26T09:02:52.000Z</published>
    <updated>2019-07-26T09:02:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Pytorch 深度学习框架和 ImageNet 数据集深受科研工作者的喜爱。本文使用 Pytorch 1.0.1 版本对 ImageNet 数据集进行图像分类实战，包括训练、测试、验证等。</p><a id="more"></a><h2 id="imagenet-数据集下载及预处理">ImageNet 数据集下载及预处理</h2><p>数据集选择常用的 <code>ISLVRC2012</code> (ImageNet Large Scale Visual Recognition Challenge)</p><p><strong>下载地址：</strong></p><ul><li>测试集 <a href="http://www.image-net.org/challenges/LSVRC/2012/nnoupb/ILSVRC2012_img_test.tar" target="_blank" rel="noopener">http://www.image-net.org/challenges/LSVRC/2012/nnoupb/ILSVRC2012_img_test.tar</a>(12.7GB)</li><li>验证集<a href="http://www.image-net.org/challenges/LSVRC/2012/nnoupb/ILSVRC2012_img_val.tar" target="_blank" rel="noopener">http://www.image-net.org/challenges/LSVRC/2012/nnoupb/ILSVRC2012_img_val.tar</a>(6.3GB)</li><li>训练集<a href="http://www.image-net.org/challenges/LSVRC/2012/nnoupb/ILSVRC2012_img_train.tar" target="_blank" rel="noopener">http://www.image-net.org/challenges/LSVRC/2012/nnoupb/ILSVRC2012_img_train.tar</a>(138GB)</li></ul><p><strong>预处理：</strong></p><p>为了使用 Pytorch 自带的 DataLoader 函数进行数据集加载，我们需要将每一个相同类的图片放到相同的文件夹。</p><p>训练集只需要解压缩即可：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir train &amp;&amp; mv ILSVRC2012_img_train.tar train/ &amp;&amp; cd train</span><br><span class="line">tar -xvf ILSVRC2012_img_train.tar &amp;&amp; rm -f ILSVRC2012_img_train.tar</span><br><span class="line">find . -name "*.tar" | while read NAME ; do mkdir -p "$&#123;NAME%.tar&#125;"; tar -xvf "$&#123;NAME&#125;" -C "$&#123;NAME%.tar&#125;"; rm -f "$&#123;NAME&#125;"; done</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure><p>但是验证集图片都在一个文件夹，需要重新分类：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir val &amp;&amp; mv ILSVRC2012_img_val.tar val/ &amp;&amp; cd val &amp;&amp; tar -xvf ILSVRC2012_img_val.tar</span><br><span class="line">wget -qO- https://raw.githubusercontent.com/soumith/imagenetloader.torch/master/valprep.sh | bash</span><br></pre></td></tr></table></figure><h2 id="代码详解">代码详解</h2><h3 id="参数设置">参数设置</h3><p>参数设置的方式有很多种，有的人喜欢直接在主文件中进行设置；有的人喜欢用 argparse 这个模块；也有人喜欢用 json 格式的文件，我个人喜欢单独创建个 Python 类，以类属性的形式定义参数，详情见下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultConfigs</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 1.string parameters</span></span><br><span class="line">    train_dir = <span class="string">"/home/ubuntu/share/dataset/imagenet/train"</span></span><br><span class="line">    val_dir = <span class="string">'/home/ubuntu/share/dataset/imagenet/val'</span></span><br><span class="line">    model_name = <span class="string">"resnet18"</span></span><br><span class="line">    weights = <span class="string">"./checkpoints/"</span></span><br><span class="line">    best_models = weights + <span class="string">"best_model/"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.numeric parameters</span></span><br><span class="line">    epochs = <span class="number">40</span></span><br><span class="line">    start_epoch = <span class="number">0</span></span><br><span class="line">    batch_size = <span class="number">16</span></span><br><span class="line">    momentum = <span class="number">0.9</span></span><br><span class="line">    lr = <span class="number">1e-3</span></span><br><span class="line">    weight_decay = <span class="number">1e-4</span></span><br><span class="line">    interval = <span class="number">10</span></span><br><span class="line">    workers = <span class="number">12</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.boolean parameters</span></span><br><span class="line">    evaluate = <span class="literal">False</span></span><br><span class="line">    pretrained = <span class="literal">False</span></span><br><span class="line">    resume = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="评价指标">评价指标</h3><p>当我们需要评价一个模型的准确率时，需要输出 top1、top5 等准确率，使用下面函数进行封装。其中 <code>AverageMeter</code> 类可快速计算多个值的平均值等。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AverageMeter</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Computes and stores the average and current value"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, fmt=<span class="string">':f'</span>)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.fmt = fmt</span><br><span class="line">        self.reset()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.val = <span class="number">0</span></span><br><span class="line">        self.avg = <span class="number">0</span></span><br><span class="line">        self.sum = <span class="number">0</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, val, n=<span class="number">1</span>)</span>:</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.sum += val * n</span><br><span class="line">        self.count += n</span><br><span class="line">        self.avg = self.sum / self.count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        fmtstr = <span class="string">'&#123;name&#125; &#123;val'</span> + self.fmt + <span class="string">'&#125; (&#123;avg'</span> + self.fmt + <span class="string">'&#125;)'</span></span><br><span class="line">        <span class="keyword">return</span> fmtstr.format(**self.__dict__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accuracy</span><span class="params">(output, target, topk=<span class="params">(<span class="number">1</span>,)</span>)</span>:</span></span><br><span class="line">    <span class="string">"""Computes the accuracy over the k top predictions for the specified values of k"""</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        maxk = max(topk)</span><br><span class="line">        batch_size = target.size(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        _, pred = output.topk(maxk, <span class="number">1</span>, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">        pred = pred.t()</span><br><span class="line">        correct = pred.eq(target.view(<span class="number">1</span>, <span class="number">-1</span>).expand_as(pred))</span><br><span class="line"></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> topk:</span><br><span class="line">            correct_k = correct[:k].view(<span class="number">-1</span>).float().sum(<span class="number">0</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line">            res.append(correct_k.mul_(<span class="number">100.0</span> / batch_size))</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="验证模型准确率">验证模型准确率</h3><p>当验证模型和训练模型时都需要使用验证集验证模型准确率，来指导下一步操作。注意需要将 <code>model</code> 切换为 <code>evaluate</code> 模式。其中 <code>torch.no_grad()</code> 表示计算时不会改变模型梯度。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate</span><span class="params">(val_loader, model, criterion)</span>:</span></span><br><span class="line">    batch_time = AverageMeter(<span class="string">'Time'</span>, <span class="string">':6.3f'</span>)</span><br><span class="line">    losses = AverageMeter(<span class="string">'Loss'</span>, <span class="string">':.4e'</span>)</span><br><span class="line">    top1 = AverageMeter(<span class="string">'Acc@1'</span>, <span class="string">':6.2f'</span>)</span><br><span class="line">    top5 = AverageMeter(<span class="string">'Acc@5'</span>, <span class="string">':6.2f'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># switch to evaluate mode</span></span><br><span class="line">    model.eval()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="keyword">for</span> batch_id, (images, target) <span class="keyword">in</span> enumerate(val_loader):</span><br><span class="line">            images, target = images.to(device), target.to(device)</span><br><span class="line">            <span class="comment"># compute output</span></span><br><span class="line">            output = model(images)</span><br><span class="line">            loss = criterion(output, target)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># measure accuracy and record loss</span></span><br><span class="line">            acc1, acc5 = accuracy(output, target, topk=(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">            losses.update(loss.item(), images.size(<span class="number">0</span>))</span><br><span class="line">            top1.update(acc1[<span class="number">0</span>], images.size(<span class="number">0</span>))</span><br><span class="line">            top5.update(acc5[<span class="number">0</span>], images.size(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># measure elapsed time</span></span><br><span class="line">            batch_time.update(time.time() - end)</span><br><span class="line">            end = time.time()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (batch_id + <span class="number">1</span>) % config.interval == <span class="number">0</span>:</span><br><span class="line">                print(<span class="string">'Acc@1: &#123;top1.avg:.3f&#125;\tAcc@5: &#123;top5.avg:.3f&#125;\tTime: &#123;batch_time.val:.2f&#125;\tID: &#123;batch_id:d&#125;'</span></span><br><span class="line">                      .format(top1=top1, top5=top5, batch_time=batch_time, batch_id=(batch_id + <span class="number">1</span>) * config.batch_size))</span><br><span class="line"></span><br><span class="line">        print(<span class="string">' * Acc@1 &#123;top1.avg:.3f&#125; Acc@5 &#123;top5.avg:.3f&#125;'</span></span><br><span class="line">              .format(top1=top1, top5=top5))</span><br><span class="line">    <span class="keyword">return</span> top1.avg</span><br></pre></td></tr></table></figure><h3 id="训练模型">训练模型</h3><p>注意需要将 <code>model</code> 切换为 <code>train</code> 模式。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(train_loader, model, criterion, optimizer)</span>:</span></span><br><span class="line">    batch_time = AverageMeter(<span class="string">'Time'</span>, <span class="string">':6.3f'</span>)</span><br><span class="line">    data_time = AverageMeter(<span class="string">'Data'</span>, <span class="string">':6.3f'</span>)</span><br><span class="line">    losses = AverageMeter(<span class="string">'Loss'</span>, <span class="string">':.4e'</span>)</span><br><span class="line">    top1 = AverageMeter(<span class="string">'Acc@1'</span>, <span class="string">':6.2f'</span>)</span><br><span class="line">    top5 = AverageMeter(<span class="string">'Acc@5'</span>, <span class="string">':6.2f'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># switch to train mode</span></span><br><span class="line">    model.train()</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="keyword">for</span> batch_id, (images, target) <span class="keyword">in</span> enumerate(train_loader):</span><br><span class="line">        <span class="comment"># measure data loading time</span></span><br><span class="line">        data_time.update(time.time() - end)</span><br><span class="line">        images, target = images.to(device), target.to(device)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute output</span></span><br><span class="line">        output = model(images)</span><br><span class="line">        loss = criterion(output, target)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># measure accuracy and record loss</span></span><br><span class="line">        acc1, acc5 = accuracy(output, target, topk=(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">        losses.update(loss.item(), images.size(<span class="number">0</span>))</span><br><span class="line">        top1.update(acc1[<span class="number">0</span>], images.size(<span class="number">0</span>))</span><br><span class="line">        top5.update(acc5[<span class="number">0</span>], images.size(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># compute gradient and do SGD step</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># measure elapsed time</span></span><br><span class="line">        batch_time.update(time.time() - end)</span><br><span class="line">        end = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (batch_id + <span class="number">1</span>) % config.interval == <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'Acc@1: &#123;top1.avg:.3f&#125;\tAcc@5: &#123;top5.avg:.3f&#125;\t'</span></span><br><span class="line">                  <span class="string">'Loss: &#123;losses.val&#125;\tTime: &#123;batch_time.val:.2f&#125;\tID: &#123;batch_id:d&#125;'</span></span><br><span class="line">                  .format(top1=top1, top5=top5, batch_time=batch_time,</span><br><span class="line">                          losses=losses, batch_id=(batch_id + <span class="number">1</span>) * config.batch_size))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">' * Acc@1 &#123;top1.avg:.3f&#125; Acc@5 &#123;top5.avg:.3f&#125;'</span></span><br><span class="line">          .format(top1=top1, top5=top5))</span><br></pre></td></tr></table></figure><h3 id="主体函数">主体函数</h3><p>注意在数据集加载时，<code>train_loader</code> 的 <code>shuffle</code> 为 <code>True</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> best_acc</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> config.pretrained:</span><br><span class="line">        print(<span class="string">"=&gt; using pre-trained model '&#123;&#125;'"</span>.format(config.model_name))</span><br><span class="line">        model = models.__dict__[config.model_name](pretrained=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"=&gt; creating model '&#123;&#125;'"</span>.format(config.model_name))</span><br><span class="line">        model = models.__dict__[config.model_name]()</span><br><span class="line">    model.to(device)</span><br><span class="line"></span><br><span class="line">    normalize = transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>],</span><br><span class="line">                                     std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line"></span><br><span class="line">    criterion = nn.CrossEntropyLoss().to(device)</span><br><span class="line">    optimizer = torch.optim.SGD(model.parameters(), config.lr,</span><br><span class="line">                                momentum=config.momentum,</span><br><span class="line">                                weight_decay=config.weight_decay)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> config.resume:</span><br><span class="line">        checkpoint = torch.load(config.best_models + <span class="string">"/model_best.pth.tar"</span>)</span><br><span class="line">        config.start_epoch = checkpoint[<span class="string">'epoch'</span>]</span><br><span class="line">        best_acc = checkpoint[<span class="string">'best_acc'</span>]</span><br><span class="line">        model.load_state_dict(checkpoint[<span class="string">'state_dict'</span>])</span><br><span class="line">        optimizer.load_state_dict(checkpoint[<span class="string">'optimizer'</span>])</span><br><span class="line"></span><br><span class="line">    train_loader = torch.utils.data.DataLoader(</span><br><span class="line">        datasets.ImageFolder(config.train_dir, transforms.Compose([</span><br><span class="line">            transforms.RandomResizedCrop(<span class="number">224</span>),</span><br><span class="line">            transforms.RandomHorizontalFlip(),</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            normalize,</span><br><span class="line">        ])),</span><br><span class="line">        batch_size=config.batch_size, shuffle=<span class="literal">True</span>,</span><br><span class="line">        num_workers=config.workers, pin_memory=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    val_loader = torch.utils.data.DataLoader(</span><br><span class="line">        datasets.ImageFolder(config.val_dir, transforms.Compose([</span><br><span class="line">            transforms.Resize(<span class="number">256</span>),</span><br><span class="line">            transforms.CenterCrop(<span class="number">224</span>),</span><br><span class="line">            transforms.ToTensor(),</span><br><span class="line">            normalize,</span><br><span class="line">        ])),</span><br><span class="line">        batch_size=config.batch_size, shuffle=<span class="literal">False</span>,</span><br><span class="line">        num_workers=config.workers, pin_memory=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> config.evaluate:</span><br><span class="line">        validate(val_loader, model, criterion)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(config.start_epoch, config.epochs):</span><br><span class="line">        adjust_learning_rate(optimizer, epoch)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'\nEpoch: [%d | %d]'</span> % (epoch + <span class="number">1</span>, config.epochs))</span><br><span class="line"></span><br><span class="line">        train(train_loader, model, criterion, optimizer)</span><br><span class="line">        test_acc = validate(val_loader, model, criterion)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># save model</span></span><br><span class="line">        is_best = test_acc &gt; best_acc</span><br><span class="line">        best_acc = max(test_acc, best_acc)</span><br><span class="line">        save_checkpoint(&#123;</span><br><span class="line">            <span class="string">'epoch'</span>: epoch + <span class="number">1</span>,</span><br><span class="line">            <span class="string">"model_name"</span>: config.model_name,</span><br><span class="line">            <span class="string">'state_dict'</span>: model.state_dict(),</span><br><span class="line">            <span class="string">'acc'</span>: test_acc,</span><br><span class="line">            <span class="string">'best_acc'</span>: best_acc,</span><br><span class="line">            <span class="string">'optimizer'</span>: optimizer.state_dict(),</span><br><span class="line">        &#125;, is_best)</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>本文使用的 Pytorch 版本为 1.0.1，且暂时只适用于 ImageNet 数据集，其他数据集需要一定地修改，完整代码地址如下：<a href="https://gist.github.com/xunge/d7be591bc1b41350273a61722c0d398a" target="_blank" rel="noopener">https://gist.github.com/xunge/d7be591bc1b41350273a61722c0d398a</a></p><h2 id="参考资料">参考资料</h2><ul><li><a href="http://spytensor.com/index.php/archives/21/" target="_blank" rel="noopener">从实例掌握 pytorch 进行图像分类</a></li><li><a href="https://github.com/pytorch/examples/blob/99a83a26b33622945eaed0d20614943a16f45a43/imagenet/main.py" target="_blank" rel="noopener">pytorch/examples</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Pytorch 深度学习框架和 ImageNet 数据集深受科研工作者的喜爱。本文使用 Pytorch 1.0.1 版本对 ImageNet 数据集进行图像分类实战，包括训练、测试、验证等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="经验值" scheme="https://xungejiang.com/categories/%E7%BB%8F%E9%AA%8C%E5%80%BC/"/>
    
    
      <category term="pytorch" scheme="https://xungejiang.com/tags/pytorch/"/>
    
      <category term="imagenet" scheme="https://xungejiang.com/tags/imagenet/"/>
    
  </entry>
  
  <entry>
    <title>激活函数总结 (Sigmoid, ReLU, Swish, Maxout)</title>
    <link href="https://xungejiang.com//2019/07/13/activation-function/"/>
    <id>https://xungejiang.com//2019/07/13/activation-function/</id>
    <published>2019-07-13T09:20:19.000Z</published>
    <updated>2019-07-13T09:20:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>神经网络中使用激活函数来加入非线性因素，提高模型的表达能力。</p><a id="more"></a><p>激活函数需要具备以下几点<strong>性质</strong>:</p><ol type="1"><li>连续并可导 (允许少数点上不可导) 的非线性函数。可导的激活函数可以直接利用数值优化的方法来学习网络参数。</li><li>激活函数及其导函数要尽可能的简单，有利于提高网络计算效率。</li><li>激活函数的导函数的值域要在一个合适的区间内，不能太大也不能太小，否则会影响训练的效率和稳定性。</li></ol><h2 id="sigmoid-型激活函数">1. Sigmoid 型激活函数</h2><p>Sigmoid 型函数是指一类 S 型曲线函数，为两端饱和函数。常用的 Sigmoid 型函数有 Logistic 函数和 Tanh 函数。</p><h3 id="logistic-函数">1.1 Logistic 函数</h3><p><strong>公式定义如下：</strong></p><p><span class="math display">\[\sigma(x)=\frac{1}{1+\exp (-x)}\]</span></p><p><strong>特点：</strong></p><ol type="1"><li>当输入值在 0 附近时，函数近似为线性函数；当输入值靠近两端时，对输入进行抑制。</li><li>输入越小，越接近于 0；输入越大，越接近于 1。</li><li>其输出直接可以看作是概率分布，使得神经网络可以更好地和统计学习模型进行结合。</li><li>其可以看作是一个<code>软性门</code> (Soft Gate)，用来控制其它神经元输出信息的数量。</li></ol><h3 id="tanh-函数">1.2 Tanh 函数</h3><p><strong>公式定义如下：</strong></p><p><span class="math display">\[\tanh (x)=\frac{\exp (x)-\exp (-x)}{\exp (x)+\exp (-x)}\]</span></p><p>Tanh 函数也可以看作是放大并平移的 Logistic 函数，其值域是 (−1, 1)。</p><p><span class="math display">\[\tanh (x)=2 \sigma(2 x)-1\]</span></p><p>Sigmoid 两个函数对比如下图所示。如图可知，Tanh 函数的输出是 <code>零中心化的</code> (Zero-Centered)，而 Logistic 函数的输出恒大于 0。非零中心化的输出会使得其后一层的神经元的输入发生 <code>偏置偏移</code> (Bias Shift)，并进一步使得梯度下降的收敛速度变慢。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/19-07-13/sigmoid.jpg"></p><h2 id="relu-函数">2. ReLU 函数</h2><p><strong>线性整流函数</strong> (Rectified Linear Unit, ReLU)，又称<strong>修正线性单元</strong>，通常指代以斜坡函数及其变种为代表的非线性函数。是目前深层神经网络中经常使用的激活函数。公式定义为：</p><p><span class="math display">\[\begin{aligned} \operatorname{ReLU}(x) &amp;=\left\{\begin{array}{ll}{x} &amp; {x \geq 0} \\ {0} &amp; {x&lt;0}\end{array}\right.\\ &amp;=\max (0, x) \end{aligned}\]</span></p><p><strong>优点：</strong></p><ol type="1"><li>采用ReLU的神经元只需要进行加、乘和比较的操作，计算上更加高效。</li><li>Sigmoid型激活函数会导致一个非稀疏的神经网络，而 ReLU 却具有很好的稀疏性，大约 50% 的神经元会处于激活状态。</li><li>相比于 Sigmoid 型函数的两端饱和，ReLU 函数为左饱和函数，且在 <span class="math inline">\(x &gt; 0\)</span> 时导数为 1，在一定程度上缓解了神经网络的梯度消失问题，加速梯度下降的收敛速度。</li></ol><p><strong>缺点：</strong></p><ol type="1"><li>ReLU 函数的输出是非零中心化的，给后一层的神经网络引入偏置偏移，会影响梯度下降的效率。</li><li>ReLU 神经元在训练时比较容易“死亡”。在训练时，如果参数在一次不恰当的更新后，第一个隐藏层中的某个 ReLU 神经元在所有的训练数据上都不能被激活，那么这个神经元自身参数的梯度永远都会是 0，在以后的训练过程中永远不能被激活。</li></ol><p>为了避免上述情况，有几种 ReLU 的变种也会被广泛使用。</p><h3 id="leaky-relu">2.1 Leaky ReLU</h3><p><strong>带泄露的ReLU</strong> (Leaky ReLU) 在输入 <span class="math inline">\(x &lt; 0\)</span> 时，保持一个很小的梯度 <span class="math inline">\(\gamma\)</span>。这样当神经元非激活时也能有一个非零的梯度可以更新参数，避免永远不能被激活。带泄露的ReLU的定义如下:</p><p><span class="math display">\[\begin{aligned} \text { LeakyReLU(x)} &amp;=\left\{\begin{array}{ll}{x} &amp; { x&gt;0} \\ {\gamma x} &amp; { x \leq 0}\end{array}\right.\\ &amp;=\max (0, x)+\gamma \min (0, x) \end{aligned}\]</span></p><p>其中 <span class="math inline">\(\gamma\)</span> 是一个很小的常数，比如 0.01。当 <span class="math inline">\(\gamma &lt; 1\)</span> 时，带泄露的 ReLU 也可以写为</p><p><span class="math display">\[\text { Leaky ReLU }(x)=\max (x, \gamma x)\]</span></p><p>相当于是一个比较简单的 maxout 单元。</p><h3 id="prelu">2.2 PReLU</h3><p><strong>带参数的 ReLU</strong> (Parametric ReLU, PReLU) 引入一个可学习的参数，不同神经元可以有不同的参数。对于第 <span class="math inline">\(i\)</span> 个神经元，其 PReLU 的定义为：</p><p><span class="math display">\[\begin{aligned} \operatorname{PReLU}_{i}(x) &amp;=\left\{\begin{array}{ll}{x} &amp; { x&gt;0} \\ {\gamma_{i} x} &amp; { x \leq 0}\end{array}\right.\\ &amp;=\max (0, x)+\gamma_{i} \min (0, x) \end{aligned}\]</span></p><p>其中 <span class="math inline">\(\gamma_{i}\)</span> 为 <span class="math inline">\(x \leq 0\)</span> 时函数的斜率。因此，PReLU 是非饱和函数。如果 <span class="math inline">\(\gamma_{i}=0\)</span>，那么 PReLU 就退化为 ReLU。如果 <span class="math inline">\(\gamma_{i}\)</span> 为一个很小的常数，则 PReLU 可以看作带泄露的 ReLU。PReLU 可以允许不同神经元具有不同的参数，也可以一组神经元共享一个参数。</p><h3 id="erelu">2.3 EReLU</h3><p><strong>指数线性单元</strong> (Exponential Linear Unit, ELU)是一个近似的零中心化的非线性函数，其定义为：</p><p><span class="math display">\[\begin{aligned} \operatorname{ELU}(x) &amp;=\left\{\begin{array}{ll}{x} &amp; { x&gt;0} \\ {\gamma(\exp (x)-1)} &amp; { x \leq 0}\end{array}\right.\\ &amp;=\max (0, x)+\min (0, \gamma(\exp (x)-1)) \end{aligned}\]</span></p><p>其中 <span class="math inline">\(\gamma \geq 0\)</span> 是一个超参数，决定 <span class="math inline">\(x \leq 0\)</span> 时的饱和曲线，并调整输出均值在 0 附近。</p><h3 id="softplus">2.4 Softplus</h3><p><strong>Softplus 函数</strong>可以看作是 rectifier 函数的平滑版本，其定义为：</p><p><span class="math display">\[\operatorname{Softplus}(x)=\log (1+\exp (x))\]</span></p><p>Softplus 函数其导数刚好是 Logistic 函数。Softplus 函数虽然也有具有单侧抑制、宽兴奋边界的特性，却没有稀疏激活性。</p><p>下图给出了 ReLU、Leaky ReLU、ELU 以及 Softplus 函数的示例：</p><p><img class="lazyload"  data-src="http://img.xungejiang.com/static/images/19-07-13/relu.jpg"></p><h2 id="参考">参考</h2><ul><li><a href="https://www.cnblogs.com/makefile/p/activation-function.html" target="_blank" rel="noopener">激活函数(ReLU, Swish, Maxout)</a></li><li><a href="https://nndl.github.io/" target="_blank" rel="noopener">神经网络与深度学习</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;神经网络中使用激活函数来加入非线性因素，提高模型的表达能力。&lt;/p&gt;
    
    </summary>
    
    
      <category term="知识点" scheme="https://xungejiang.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="激活函数" scheme="https://xungejiang.com/tags/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>搭建本地 Anaconda 镜像</title>
    <link href="https://xungejiang.com//2019/07/06/local-anaconda-mirror/"/>
    <id>https://xungejiang.com//2019/07/06/local-anaconda-mirror/</id>
    <published>2019-07-06T11:54:04.000Z</published>
    <updated>2019-07-06T11:54:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>Anaconda是一个免费开源的Python等语言的发行版本，致力于简化包管理和部署，可以大大提高环境搭建效率。</p><p>然而Anaconda国外源在国内下载速度较慢，虽然国内有清华源可以大大提高下载速度（2019年4月清华源曾因版权原因关闭，但在5月已重新开放），但是肯定没有搭建一个本地源速度快。本文将详细介绍如何将Anaconda镜像安装在本地，以供本机以及局域网内的其他电脑访问。</p><a id="more"></a><h2 id="下载所有镜像文件到本地">下载所有镜像文件到本地</h2><p>搭建本地镜像肯定需要将所有镜像文件下载到本地。</p><p>这里感谢清华开源下载镜像文件的Python<a href="https://github.com/tuna/tunasync-scripts/blob/master/anaconda.py" target="_blank" rel="noopener">代码</a>，这里进行了一定的修改，代码如下。</p><p>可以看到代码中的路径改为了国内的清华源， repos 只选择了 <code>main</code> 和 <code>free</code>，arches 选择了 <code>linux-64</code> 和 <code>win-64</code>，当然也可以选择同步注释代码中的更多系统和版本。博主下载了这些文件共189.1 GB（2019年6月），也就是说只需要占用不到 200 GB 的磁盘空间，无需下载即可使用Anaconda安装Python包，还是很实用的。</p><p>具体代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> subprocess <span class="keyword">as</span> sp</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> email.utils <span class="keyword">import</span> parsedate_to_datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"></span><br><span class="line">DEFAULT_CONDA_REPO_BASE = <span class="string">"https://repo.continuum.io"</span></span><br><span class="line">DEFAULT_CONDA_CLOUD_BASE = <span class="string">"https://conda.anaconda.org"</span></span><br><span class="line"></span><br><span class="line">CONDA_REPO_BASE_URL = os.getenv(<span class="string">"CONDA_REPO_URL"</span>, <span class="string">"https://repo.continuum.io"</span>)</span><br><span class="line">CONDA_CLOUD_BASE_URL = os.getenv(<span class="string">"CONDA_COULD_URL"</span>, <span class="string">"https://conda.anaconda.org"</span>)</span><br><span class="line"></span><br><span class="line">WORKING_DIR = os.getenv(<span class="string">"TUNASYNC_WORKING_DIR"</span>)</span><br><span class="line"></span><br><span class="line">CONDA_REPOS = (<span class="string">"main"</span>, <span class="string">"free"</span>)</span><br><span class="line"><span class="comment"># CONDA_REPOS = ("main", "free", "r", "mro", "pro")</span></span><br><span class="line"></span><br><span class="line">CONDA_ARCHES = (</span><br><span class="line">    <span class="string">"linux-64"</span>, <span class="string">"win-64"</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># CONDA_ARCHES = (</span></span><br><span class="line"><span class="comment">#     "noarch", "linux-64", "linux-32", "linux-armv6l", "linux-armv7l",</span></span><br><span class="line"><span class="comment">#     "linux-ppc64le", "osx-64", "osx-32", "win-64", "win-32"</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line"></span><br><span class="line">CONDA_CLOUD_REPOS = (</span><br><span class="line">    <span class="string">"conda-forge/linux-64"</span>, <span class="string">"conda-forge/osx-64"</span>, <span class="string">"conda-forge/win-64"</span>, <span class="string">"conda-forge/noarch"</span>,</span><br><span class="line">    <span class="string">"msys2/win-64"</span>, <span class="string">"msys2/noarch"</span>,</span><br><span class="line">    <span class="string">"bioconda/noarch"</span>, <span class="string">"bioconda/linux-64"</span>, <span class="string">"bioconda/osx-64"</span>,</span><br><span class="line">    <span class="string">"menpo/linux-64"</span>, <span class="string">"menpo/osx-64"</span>, <span class="string">"menpo/win-64"</span>, <span class="string">"menpo/win-32"</span>, <span class="string">"menpo/noarch"</span>,</span><br><span class="line">    <span class="string">"pytorch/linux-64"</span>, <span class="string">"pytorch/osx-64"</span>, <span class="string">"pytorch/win-64"</span>, <span class="string">"pytorch/win-32"</span>, <span class="string">"pytorch/noarch"</span>, <span class="string">"peterjc123/win-64"</span>, <span class="string">"peterjc123/noarch"</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    level=logging.INFO,</span><br><span class="line">    format=<span class="string">"[%(asctime)s] [%(levelname)s] %(message)s"</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5_check</span><span class="params">(file: Path, md5: str=None)</span>:</span></span><br><span class="line">    m = hashlib.md5()</span><br><span class="line">    <span class="keyword">with</span> file.open(<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            buf = f.read(<span class="number">1</span>*<span class="number">1024</span>*<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> buf:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            m.update(buf)</span><br><span class="line">    <span class="keyword">return</span> m.hexdigest() == md5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">curl_download</span><span class="params">(remote_url: str, dst_file: Path, md5: str=None)</span>:</span></span><br><span class="line">    sp.check_call([</span><br><span class="line">        <span class="string">"curl"</span>, <span class="string">"-o"</span>, str(dst_file),</span><br><span class="line">        <span class="string">"-sL"</span>, <span class="string">"--remote-time"</span>, <span class="string">"--show-error"</span>,</span><br><span class="line">        <span class="string">"--fail"</span>, remote_url,</span><br><span class="line">    ])</span><br><span class="line">    <span class="keyword">if</span> md5 <span class="keyword">and</span> (<span class="keyword">not</span> md5_check(dst_file, md5)):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MD5 mismatch"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sync_repo</span><span class="params">(repo_url: str, local_dir: Path, tmpdir: Path)</span>:</span></span><br><span class="line">    logging.info(<span class="string">"Start syncing &#123;&#125;"</span>.format(repo_url))</span><br><span class="line">    local_dir.mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    repodata_url = repo_url + <span class="string">'/repodata.json'</span></span><br><span class="line">    bz2_repodata_url = repo_url + <span class="string">'/repodata.json.bz2'</span></span><br><span class="line"></span><br><span class="line">    tmp_repodata = tmpdir / <span class="string">"repodata.json"</span></span><br><span class="line">    tmp_bz2_repodata = tmpdir / <span class="string">"repodata.json.bz2"</span></span><br><span class="line"></span><br><span class="line">    curl_download(repodata_url, tmp_repodata)</span><br><span class="line">    curl_download(bz2_repodata_url, tmp_bz2_repodata)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tmp_repodata.open() <span class="keyword">as</span> f:</span><br><span class="line">        repodata = json.load(f)</span><br><span class="line"></span><br><span class="line">    packages = repodata[<span class="string">'packages'</span>]</span><br><span class="line">    <span class="keyword">for</span> filename, meta <span class="keyword">in</span> packages.items():</span><br><span class="line">        file_size, md5 = meta[<span class="string">'size'</span>], meta[<span class="string">'md5'</span>]</span><br><span class="line"></span><br><span class="line">        pkg_url = <span class="string">'/'</span>.join([repo_url, filename])</span><br><span class="line">        dst_file = local_dir / filename</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> dst_file.is_file():</span><br><span class="line">            stat = dst_file.stat()</span><br><span class="line">            local_filesize = stat.st_size</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> file_size == local_filesize:</span><br><span class="line">                logging.info(<span class="string">"Skipping &#123;&#125;"</span>.format(filename))</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            dst_file.unlink()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> retry <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            logging.info(<span class="string">"Downloading &#123;&#125;"</span>.format(filename))</span><br><span class="line">            err = curl_download(pkg_url, dst_file, md5=md5)</span><br><span class="line">            <span class="keyword">if</span> err <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            logging.error(<span class="string">"Failed to download &#123;&#125;: &#123;&#125;"</span>.format(filename, err))</span><br><span class="line"></span><br><span class="line">    shutil.move(str(tmp_repodata), str(local_dir / <span class="string">"repodata.json"</span>))</span><br><span class="line">    shutil.move(str(tmp_bz2_repodata), str(local_dir / <span class="string">"repodata.json.bz2"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sync_installer</span><span class="params">(repo_url, local_dir: Path)</span>:</span></span><br><span class="line">    logging.info(<span class="string">"Start syncing &#123;&#125;"</span>.format(repo_url))</span><br><span class="line">    local_dir.mkdir(parents=<span class="literal">True</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remote_list</span><span class="params">()</span>:</span></span><br><span class="line">        r = requests.get(repo_url)</span><br><span class="line">        d = pq(r.content)</span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> d(<span class="string">'table'</span>).find(<span class="string">'tr'</span>):</span><br><span class="line">            tds = pq(tr).find(<span class="string">'td'</span>)</span><br><span class="line">            <span class="keyword">if</span> len(tds) != <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            fname = tds[<span class="number">0</span>].find(<span class="string">'a'</span>).text</span><br><span class="line">            md5 = tds[<span class="number">3</span>].text</span><br><span class="line">            <span class="keyword">yield</span> (fname, md5)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> filename, md5 <span class="keyword">in</span> remote_list():</span><br><span class="line">        pkg_url = <span class="string">"/"</span>.join([repo_url, filename])</span><br><span class="line">        dst_file = local_dir / filename</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> dst_file.is_file():</span><br><span class="line">            r = requests.head(pkg_url)</span><br><span class="line">            remote_filesize = int(r.headers[<span class="string">'content-length'</span>])</span><br><span class="line">            remote_date = parsedate_to_datetime(r.headers[<span class="string">'last-modified'</span>])</span><br><span class="line">            stat = dst_file.stat()</span><br><span class="line">            local_filesize = stat.st_size</span><br><span class="line">            local_mtime = stat.st_mtime</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> remote_filesize == local_filesize <span class="keyword">and</span> remote_date.timestamp() == local_mtime:</span><br><span class="line">                logging.info(<span class="string">"Skipping &#123;&#125;"</span>.format(filename))</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            dst_file.unlink()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> retry <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            logging.info(<span class="string">"Downloading &#123;&#125;"</span>.format(filename))</span><br><span class="line">            err = curl_download(pkg_url, dst_file, md5=md5)</span><br><span class="line">            <span class="keyword">if</span> err <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            logging.error(<span class="string">"Failed to download &#123;&#125;: &#123;&#125;"</span>.format(filename, err))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">import</span> argparse</span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">"--working-dir"</span>, default=WORKING_DIR)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> args.working_dir <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">"Working Directory is None"</span>)</span><br><span class="line"></span><br><span class="line">    working_dir = Path(args.working_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># for dist in ("archive", "miniconda"):</span></span><br><span class="line">    <span class="comment">#     remote_url = "&#123;&#125;/&#123;&#125;".format(CONDA_REPO_BASE_URL, dist)</span></span><br><span class="line">    <span class="comment">#     local_dir = working_dir / dist</span></span><br><span class="line">    <span class="comment">#     try:</span></span><br><span class="line">    <span class="comment">#         sync_installer(remote_url, local_dir)</span></span><br><span class="line">    <span class="comment">#     except Exception:</span></span><br><span class="line">    <span class="comment">#         logging.exception("Failed to sync installers of &#123;&#125;".format(dist))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> repo <span class="keyword">in</span> CONDA_REPOS:</span><br><span class="line">        <span class="keyword">for</span> arch <span class="keyword">in</span> CONDA_ARCHES:</span><br><span class="line">            remote_url = <span class="string">"&#123;&#125;/pkgs/&#123;&#125;/&#123;&#125;"</span>.format(CONDA_REPO_BASE_URL, repo, arch)</span><br><span class="line">            local_dir = working_dir / <span class="string">"pkgs"</span> / repo / arch</span><br><span class="line"></span><br><span class="line">            tmpdir = tempfile.mkdtemp()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                sync_repo(remote_url, local_dir, Path(tmpdir))</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                logging.exception(<span class="string">"Failed to sync repo: &#123;&#125;/&#123;&#125;"</span>.format(repo, arch))</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                shutil.rmtree(tmpdir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># for repo in CONDA_CLOUD_REPOS:</span></span><br><span class="line">    <span class="comment">#     remote_url = "&#123;&#125;/&#123;&#125;".format(CONDA_CLOUD_BASE_URL, repo)</span></span><br><span class="line">    <span class="comment">#     local_dir = working_dir / "cloud" / repo</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#     tmpdir = tempfile.mkdtemp()</span></span><br><span class="line">    <span class="comment">#     try:</span></span><br><span class="line">    <span class="comment">#         sync_repo(remote_url, local_dir, Path(tmpdir))</span></span><br><span class="line">    <span class="comment">#     except Exception:</span></span><br><span class="line">    <span class="comment">#         logging.exception("Failed to sync repo: &#123;&#125;".format(repo))</span></span><br><span class="line">    <span class="comment">#     finally:</span></span><br><span class="line">    <span class="comment">#         shutil.rmtree(tmpdir)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="建立索引">建立索引</h2><p>下载的文件会在 <code>pkgs</code> 根目录下，我们需要运行以下命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda index pkgs/*</span><br></pre></td></tr></table></figure><p>运行需要较长时间，运行完成后会在 <code>free</code> 和 <code>main</code> 文件夹内生成 <code>noarch</code> 文件夹。</p><h2 id="搭建-http-文件服务器">搭建 http 文件服务器</h2><p>为了使局域网内的用户都可访问本地Anaconda镜像，我们首先搭建一个本地http服务器，参考这篇 <a href="https://www.jianshu.com/p/e1a6219167cf" target="_blank" rel="noopener">博客</a></p><p>在 ubuntu 系统下运行下面命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install apache2</span><br></pre></td></tr></table></figure><p>apache2 的配置文件是 <code>/etc/apache2/apache2.conf</code>。</p><p>服务器默认的访问路径在 <code>/var/www/html</code> 目录下。</p><p>创建软链接，例如我们的镜像 pkgs 文件夹在 <code>/home/ubuntu/mirror/anaconda/pkgs</code> ，在 <code>/var/www/html</code> 目录下通过命令 <code>ln -s /home/ubuntu/mirror/anaconda/pkgs/ anaconda/pkgs</code> 创建一个软连接。就可以通过 <code>http://192.168.1.10/anaconda/pkgs</code> 访问到文件目录。</p><h2 id="使用本地镜像">使用本地镜像</h2><p>通过以下命令设置Anaconda的镜像路径：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda config --add channels http://192.168.1.10/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels http://192.168.1.10/anaconda/pkgs/main/</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><p>然后编辑配置文件 <code>.condarc</code>，一般在 <code>~/.condarc</code>，去掉最后的 <code>- defaults</code></p><p>至此，本地镜像的配置完成，我们可以离线安装Anaconda管理包了，速度不是一般的快。</p><h2 id="定时运行-anaconda.py-以更新镜像-2019.08.11-更新">定时运行 anaconda.py 以更新镜像 (2019.08.11 更新)</h2><p>为了使得镜像及时更新，我们可以使用 Linux 的 crontab 服务定时更新 anaconda.py 脚本。具体方法如下：</p><p>运行 <code>crontab –e</code> 编写一条定时任务：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 1    * * 6    /usr/bin/python /home/ubuntu/anaconda.py --working-dir /home/ubuntu/anaconda-mirror &gt; /home/ubuntu/auto.log</span><br></pre></td></tr></table></figure><p>意思是每周六的凌晨 1:00 执行 anaconda.py 脚本。</p><p>其他关于 crontab 的详细说明见文档说明 <a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html" target="_blank" rel="noopener">19. crontab 定时任务</a></p><p>运行 <code>crontab –l</code> 进行验证。</p><p>运行 <code>service cron restart</code> 重启服务。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Anaconda是一个免费开源的Python等语言的发行版本，致力于简化包管理和部署，可以大大提高环境搭建效率。&lt;/p&gt;
&lt;p&gt;然而Anaconda国外源在国内下载速度较慢，虽然国内有清华源可以大大提高下载速度（2019年4月清华源曾因版权原因关闭，但在5月已重新开放），但是肯定没有搭建一个本地源速度快。本文将详细介绍如何将Anaconda镜像安装在本地，以供本机以及局域网内的其他电脑访问。&lt;/p&gt;
    
    </summary>
    
    
      <category term="经验值" scheme="https://xungejiang.com/categories/%E7%BB%8F%E9%AA%8C%E5%80%BC/"/>
    
    
      <category term="anaconda" scheme="https://xungejiang.com/tags/anaconda/"/>
    
  </entry>
  
  <entry>
    <title>使用 VBA（宏）批量替换 Word 中的字词</title>
    <link href="https://xungejiang.com//2019/06/19/replace-word/"/>
    <id>https://xungejiang.com//2019/06/19/replace-word/</id>
    <published>2019-06-19T06:53:27.000Z</published>
    <updated>2019-06-19T06:53:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>当使用翻译软件翻译论文时，经常会将某些专业名词翻译错误，例如将 <code>adversarial example</code> 翻译为 <code>对抗性的例子</code> 而不是 <code>对抗样本</code>。虽然 Word 可以全局替换，但是一次只能替换一个词组，如果想同时替换多个词组将非常费事。这时使用 VBA 将是一个不错的选择。</p><a id="more"></a><h2 id="添加宏">添加宏</h2><p><code>视图</code> -&gt; <code>宏</code> -&gt; <code>查看宏</code> -&gt; <code>新建宏</code> 命名为 replace。</p><p>在打开的 VB 编辑器粘贴下面代码，更改具体的替换词语，即可</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sub replace()</span><br><span class="line">&apos;</span><br><span class="line">&apos; replace 宏</span><br><span class="line">&apos;</span><br><span class="line">    Const wdReplaceAll = 2</span><br><span class="line">    Dim oRng As Range</span><br><span class="line">    Set oRng = ActiveDocument.Content</span><br><span class="line">    With oRng.Find</span><br><span class="line">        .Execute FindText:=&quot;对抗性的例子&quot;, ReplaceWith:=&quot;对抗样本&quot;, replace:=wdReplaceAll</span><br><span class="line">        .Execute FindText:=&quot;对抗性示例&quot;, ReplaceWith:=&quot;对抗样本&quot;, replace:=wdReplaceAll</span><br><span class="line">        .Execute FindText:=&quot;对抗性实例&quot;, ReplaceWith:=&quot;对抗样本&quot;, replace:=wdReplaceAll</span><br><span class="line">        .Execute FindText:=&quot;对抗性例子&quot;, ReplaceWith:=&quot;对抗样本&quot;, replace:=wdReplaceAll</span><br><span class="line">        .Execute FindText:=&quot;对抗实例&quot;, ReplaceWith:=&quot;对抗样本&quot;, replace:=wdReplaceAll</span><br><span class="line">        .Execute FindText:=&quot;对手&quot;, ReplaceWith:=&quot;攻击者&quot;, replace:=wdReplaceAll</span><br><span class="line">        .Execute FindText:=&quot;挤压&quot;, ReplaceWith:=&quot;压缩&quot;, replace:=wdReplaceAll</span><br><span class="line">        .Execute FindText:=&quot;功能&quot;, ReplaceWith:=&quot;特征&quot;, replace:=wdReplaceAll</span><br><span class="line">        .Execute FindText:=&quot;显着&quot;, ReplaceWith:=&quot;显著&quot;, replace:=wdReplaceAll</span><br><span class="line">        .Execute FindText:=&quot;稳健&quot;, ReplaceWith:=&quot;鲁棒&quot;, replace:=wdReplaceAll</span><br><span class="line">        .Execute FindText:=&quot;健壮&quot;, ReplaceWith:=&quot;鲁棒&quot;, replace:=wdReplaceAll</span><br><span class="line">        .Execute FindText:=&quot;样品&quot;, ReplaceWith:=&quot;样本&quot;, replace:=wdReplaceAll</span><br><span class="line">        .Execute FindText:=&quot;渐变&quot;, ReplaceWith:=&quot;梯度&quot;, replace:=wdReplaceAll</span><br><span class="line">        .Execute FindText:=&quot;培训&quot;, ReplaceWith:=&quot;训练&quot;, replace:=wdReplaceAll</span><br><span class="line">        .Execute FindText:=&quot;规范&quot;, ReplaceWith:=&quot;范数&quot;, replace:=wdReplaceAll</span><br><span class="line">        .Execute FindText:=&quot;探测&quot;, ReplaceWith:=&quot;检测&quot;, replace:=wdReplaceAll</span><br><span class="line">        .Execute FindText:=&quot;辍学&quot;, ReplaceWith:=&quot;dropout&quot;, replace:=wdReplaceAll</span><br><span class="line">        .Execute FindText:=&quot;图层&quot;, ReplaceWith:=&quot;层&quot;, replace:=wdReplaceAll</span><br><span class="line">        .Execute FindText:=&quot;合法示例&quot;, ReplaceWith:=&quot;合法样本&quot;, replace:=wdReplaceAll</span><br><span class="line">        .Execute FindText:=&quot;对抗性样本&quot;, ReplaceWith:=&quot;对抗样本&quot;, replace:=wdReplaceAll</span><br><span class="line">        .Execute FindText:=&quot;对抗性训练&quot;, ReplaceWith:=&quot;对抗训练&quot;, replace:=wdReplaceAll</span><br><span class="line">        .Execute FindText:=&quot;对抗性鲁棒性&quot;, ReplaceWith:=&quot;对抗鲁棒性&quot;, replace:=wdReplaceAll</span><br><span class="line">        .Execute FindText:=&quot;对抗性强大&quot;, ReplaceWith:=&quot;对抗鲁棒性&quot;, replace:=wdReplaceAll</span><br><span class="line">        .Execute FindText:=&quot;敌对&quot;, ReplaceWith:=&quot;对抗&quot;, replace:=wdReplaceAll</span><br><span class="line">    End With</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><p>保存后关闭编辑器即可。</p><p>之后只需要运行名为 replace 的宏即可。</p><p>也可以将该宏添加到快速访问工具栏中，这样可以更方便的调用宏。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当使用翻译软件翻译论文时，经常会将某些专业名词翻译错误，例如将 &lt;code&gt;adversarial example&lt;/code&gt; 翻译为 &lt;code&gt;对抗性的例子&lt;/code&gt; 而不是 &lt;code&gt;对抗样本&lt;/code&gt;。虽然 Word 可以全局替换，但是一次只能替换一个词组，如果想同时替换多个词组将非常费事。这时使用 VBA 将是一个不错的选择。&lt;/p&gt;
    
    </summary>
    
    
      <category term="经验值" scheme="https://xungejiang.com/categories/%E7%BB%8F%E9%AA%8C%E5%80%BC/"/>
    
    
      <category term="VBA" scheme="https://xungejiang.com/tags/VBA/"/>
    
      <category term="宏" scheme="https://xungejiang.com/tags/%E5%AE%8F/"/>
    
      <category term="Word" scheme="https://xungejiang.com/tags/Word/"/>
    
  </entry>
  
  <entry>
    <title>使用 LXD 搭建多人使用的 GPU 服务器</title>
    <link href="https://xungejiang.com//2019/05/31/lxd-setting/"/>
    <id>https://xungejiang.com//2019/05/31/lxd-setting/</id>
    <published>2019-05-31T03:17:22.000Z</published>
    <updated>2019-05-31T03:17:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于深度学习的火热以及深度学习对 GPU 的强烈需求，实验室购置了一台性能强悍的 GPU 服务器，供大家一起使用。然而如果所有人都对这台服务器拥有控制权是十分危险的，例如误删他人文件，弄乱他人环境等。最直观的方法就是为每一个同学开启一个虚拟机，但是硬件虚拟化造成大量的资源浪费，同时GPU并不支持常规的虚拟化。</p><p>本文采用在宿主机上创建多个 LXD 容器的软件虚拟化方法，使得资源能够更好的利用。</p><a id="more"></a><p>基于上述背景提出以下需求：</p><ul><li>不同用户之间不能相互影响且可以同时使用；</li><li>用户可以使用 ssh 方便地访问自己的“机器”；</li><li>用户拥有所有权限；</li><li>用户不被允许直接操作宿主机；</li><li>用户可以使用宿主机的所有资源，包括 CPU、GPU、内存、硬盘等。</li></ul><p>本人在 Ubuntu 18.04 的宿主机上使用 LXD 容器中的 Ubuntu 18.04 系统完成了上述所有需求。</p><h2 id="安装-lxdzfs-及-bridge-utils">安装 lxd、zfs 及 bridge-utils</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo snap install lxd</span><br><span class="line">sudo apt install zfsutils-linux bridge-utils</span><br></pre></td></tr></table></figure><p>我们需要安装LXD实现虚拟容器，ZFS作为LXD的存储管理工具，bridge-utils用于搭建网桥。由于apt安装的LXD不是最新版本，这里使用snap安装工具安装LXD。</p><h2 id="lxd-初始化">LXD 初始化</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo lxd init</span><br></pre></td></tr></table></figure><p>在初始化过程中，不要创建新的网桥，ZFS设置大小要尽量大，其他设置默认即可。详情如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Would you like to use LXD clustering? (yes/no) [default=no]:</span><br><span class="line">Do you want to configure a new storage pool? (yes/no) [default=yes]:</span><br><span class="line">Name of the new storage pool [default=default]: lxd</span><br><span class="line">Name of the storage backend to use (btrfs, ceph, dir, lvm, zfs) [default=zfs]:</span><br><span class="line">Create a new ZFS pool? (yes/no) [default=yes]:</span><br><span class="line">Would you like to use an existing block device? (yes/no) [default=no]:</span><br><span class="line">Size in GB of the new loop device (1GB minimum) [default=100GB]: 800</span><br><span class="line">Would you like to connect to a MAAS server? (yes/no) [default=no]:</span><br><span class="line">Would you like to create a new local network bridge? (yes/no) [default=yes]: no</span><br><span class="line">Would you like to configure LXD to use an existing bridge or host interface? (yes/no) [default=no]: yes</span><br><span class="line">Name of the existing bridge or host interface: br0</span><br><span class="line">Would you like LXD to be available over the network? (yes/no) [default=no]:</span><br><span class="line">Would you like stale cached images to be updated automatically? (yes/no) [default=yes]</span><br><span class="line">Would you like a YAML &quot;lxd init&quot; preseed to be printed? (yes/no) [default=no]:</span><br></pre></td></tr></table></figure><h2 id="新建容器">新建容器</h2><p>如果网速允许可以尝试：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo lxc launch ubuntu:xenial yourContainerName</span><br></pre></td></tr></table></figure><p>如果网速不行可以添加清华大学的镜像：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo lxc remote add tuna-images https://mirrors.tuna.tsinghua.edu.cn/lxc-images/ --protocol=simplestreams –public</span><br></pre></td></tr></table></figure><p>使用如下命令查看清华镜像的所有系统：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo lxc image list tuna-images:</span><br></pre></td></tr></table></figure><p>选择容器系统并记录第二列的 FINGERPRINT，如 ubuntu/18.04 的FINGERPRINT为 <code>0023c4e9dc6e</code></p><p>然后使用如下命令创建新容器：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo lxc launch tuna-images:0023c4e9dc6e yourContainerName</span><br></pre></td></tr></table></figure><h2 id="配置网络环境">配置网络环境</h2><p>在实验室的其他电脑访问服务器中的 LXD 容器有两种方法。</p><ol type="1"><li>给每个用户分配一个端口，利用 iptables 把这个端口转发到对应 LXD 容器的 22 端口；</li><li>使用桥接模式，每个容器的 IP 与实验室的 IP 域相同，物理外部、局域网内部的机器可以直接 ssh 容器的 IP，不需要端口号就可以登陆。</li></ol><p>很明显，第 2 种方法比第 1 种方法好，不仅登录方便，而且每个容器的所有端口都是开放的，可以拿其他端口做一些事情，如搭建网站、开启服务等。</p><p>第 2 种方法的详细步骤参见本人博客 <a href="https://xungejiang.com/2019/05/20/lxd-subset-ip/">LXD 使用 Netplan 实现在同一网络访问</a></p><h2 id="修改容器的用户名密码">修改容器的用户名密码</h2><p>由于容器默认的用户名为 <code>ubuntu</code>，我们需要在安装其他程序之前更改用户名即密码，以避免路径冲突。</p><p>修改root密码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd root</span><br></pre></td></tr></table></figure><p>修改用户ubuntu密码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">passwd ubuntu</span><br></pre></td></tr></table></figure><p>修改用户名：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">usermod -l &lt;newname&gt; -d /home/&lt;newname&gt; -m &lt;oldname&gt;</span><br><span class="line">groupmod -n &lt;newgroup&gt; &lt;oldgroup&gt;</span><br></pre></td></tr></table></figure><h2 id="容器中安装-ssh-服务">容器中安装 ssh 服务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><p>至此，已经可以使用实验室的任意电脑通过 ssh 直接访问容器而不需要操作宿主机。</p><h2 id="安装显卡驱动">安装显卡驱动</h2><p>在宿主机中首先需要安装显卡驱动，使用如下命令安装推荐的显卡驱动：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ubuntu-drivers autoinstall</span><br></pre></td></tr></table></figure><p>但是这个方法安装的驱动往往不是最新的，可以去 <a href="https://www.nvidia.com/Download/index.aspx?lang=cn" target="_blank" rel="noopener">NVIDIA 官网</a> 下载最新驱动并安装。具体方法参考 <a href="https://blog.csdn.net/CosmosHua/article/details/76644029" target="_blank" rel="noopener">Ubuntu 16.04安装NVIDIA驱动</a> 和 <a href="https://xungejiang.com/2019/10/08/ubuntu-gpu-driver/">超详细! Ubuntu 18.04 安装 NVIDIA 显卡驱动</a></p><p>使用 nvidia-smi 查看驱动版本，并在官网下载对应的驱动，以便于在容器中安装和宿主机相同版本的NVIDIA驱动。</p><p>为容器添加所有GPU：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo lxc config device add &lt;container&gt; gpu gpu</span><br></pre></td></tr></table></figure><p>添加指定GPU：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo lxc config device add &lt;container&gt; gpu0 gpu id=0</span><br></pre></td></tr></table></figure><p>在容器中安装显卡驱动：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo sh ./NVIDIA-Linux-x86_64-xxx.xx.run --no-kernel-module</span><br></pre></td></tr></table></figure><p>因为在容器中显卡驱动不需要安装内核文件，所以后面加上 <code>--no-kernel-module</code>。</p><p>在容器中安装好显卡驱动重启后输入 <code>nvidia-smi</code> 检查驱动是否安装成功</p><h2 id="宿主机安装-lxdui-管理容器">宿主机安装 lxdui 管理容器</h2><p>因为 LXD 相当于 LXC 增加了 RESTful API，所以可以通过 WEB 界面管理容器。lxdui 为不错的管理界面。具体安装方法详见 <a href="https://github.com/AdaptiveScale/lxdui" target="_blank" rel="noopener">lxdui 的 github</a></p><p>目前 lxdui 版本为 2.1.2，我使用有一些 bug，例如 snapshot、clone 等操作只能在容器表格中的 Actions 进行操作，进入容器后顶部的 snapshot、clone 等按钮是无效的。所以 lxdui 主要还是方便查看和管理，具体的操作还是用命令吧。</p><h2 id="容器快照管理">容器快照管理</h2><p>以上所有对容器的操作基本完成，现在需要建立快照，以备将来需要恢复快照，或者可以从快照新建一个容器，这样可以避免上面的重复劳动。</p><p>创建快照：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo lxc snapshot &lt;container&gt; &lt;snapshot name&gt;</span><br></pre></td></tr></table></figure><p>恢复快照：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo lxc restore &lt;container&gt; &lt;snapshot name&gt;</span><br></pre></td></tr></table></figure><p>从快照新建一个容器 (新旧容器 MAC 地址不同)：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo lxc copy &lt;source container&gt;/&lt;snapshot name&gt; &lt;destination container&gt;</span><br></pre></td></tr></table></figure><p>这也是比较好的创建容器的方法。如果直接 clone 容器的话，MAC 地址等关键信息也会同样被复制。</p><h2 id="容器和宿主机间复制文件">容器和宿主机间复制文件：</h2><p>在宿主机输入以下命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo lxc file push &lt;source path&gt; &lt;container&gt;/&lt;path&gt; # 表示从容器中复制文件到宿主机</span><br><span class="line">sudo lxc file pull &lt;container&gt;/&lt;path&gt; &lt;target path&gt; # 表示将宿主机的文件复制到容器</span><br></pre></td></tr></table></figure><p>复制文件夹需要在最后加 <code>-r</code></p><h2 id="共享文件夹">共享文件夹：</h2><p>创建共享文件夹：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo lxc config set &lt;container&gt; security.privileged true</span><br><span class="line">sudo lxc config device add &lt;container&gt; &lt;device-name&gt; disk path=/home/xxx/share source=/home/xxx/share</span><br></pre></td></tr></table></figure><p>其中 <code>path</code> 为容器路径，<code>source</code> 为宿主机路径。<code>device-name</code> 随意取名字即可。</p><p>移除共享文件夹：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo lxc config device remove &lt;container&gt; &lt;device-name&gt;</span><br></pre></td></tr></table></figure><h2 id="cuda-与-cudnn">CUDA 与 cuDNN</h2><p>CUDA 与 cuDNN 的安装建议使用 Anaconda 安装，因为使用 Anaconda 安装 TensorFlow 或 PyTorch 都会自带 CUDA 与 cuDNN，并且据说有一定的优化。具体命令为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda create -n tf_gpu1.9 tensorflow-gpu=1.9</span><br><span class="line">conda create -n pytorch pytorch=0.4</span><br></pre></td></tr></table></figure><p>只要 CUDA 版本与 NVIDIA 驱动版本相对应即可，可以在 <a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html#major-components" target="_blank" rel="noopener">Release Notes :: CUDA Toolkit Documentation</a> 查找。</p><h2 id="安装远程桌面-2019.08.11-更新">安装远程桌面 (2019.08.11 更新)</h2><p>参考文档：<a href="https://draculaservers.com/tutorials/ubuntu-18-xrdp/" target="_blank" rel="noopener">How to Connect to a Ubuntu 18.04 Server via Remote Desktop Connection using xRDP</a></p><h3 id="安装-xrdp">1. 安装 xRDP</h3><p>xRDP 是一款非常不错的远程桌面软件，且全平台支持。安装 xRDP 最好在干净的系统上安装。</p><ul><li>Windows 可以直接使用微软的远程桌面连接。</li><li>Mac 可以使用 <code>Microsoft Remote Desktop</code> mac 版，App Store 搜不到，这里放上 <a href="https://go.microsoft.com/fwlink/?linkid=868963" target="_blank" rel="noopener">下载链接</a>。</li><li>Linux 可使用 <code>FreeRDP</code>、<code>Rdesktop</code> 等开源软件。</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install xrdp</span><br></pre></td></tr></table></figure><h3 id="安装桌面环境">2. 安装桌面环境</h3><p>Ubuntu 有很多桌面环境，例如 XFCE, Lubuntu, Xubuntu 和 MATE 等。这里使用 XFCE 为例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install xfce4</span><br></pre></td></tr></table></figure><p>现在就可以使用远程桌面软件，通过 IP 即可访问。</p><h2 id="在-lxd-lxc-中使用-docker-容器-2019.09.01-更新">在 LXD / LXC 中使用 Docker 容器 (2019.09.01 更新)</h2><p>参考文档：<a href="https://stackoverflow.com/questions/39557576/docker-run-hello-world-still-fails-permission-denied/44152580" target="_blank" rel="noopener">docker run hello-world still fails, permission denied - stackoverflow</a></p><p>在 LXD 环境中依然可以使用 Docker，但是需要更改一些配置，否则在 pull 镜像时会有 <code>permission denied</code> 错误，如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OCI runtime create failed: container_linux.go:345: starting container process caused &quot;process_linux.go:430: container init caused \&quot;rootfs_linux.go:58: mounting \\\&quot;proc\\\&quot; to rootfs \\\&quot;/var/lib/docker/vfs/dir/c5cedb213621362913c6d950eec507ba91e04f2a933cd6d309f1c74a92c346ec\\\&quot; at \\\&quot;/proc\\\&quot; caused \\\&quot;permission denied\\\&quot;\&quot;&quot;: unknown</span><br></pre></td></tr></table></figure><p>我们只需要在宿主机对容器进行以下配置即可：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo lxc config set &lt;container&gt; security.nesting true</span><br><span class="line">sudo lxc config set &lt;container&gt; security.privileged true</span><br></pre></td></tr></table></figure><h2 id="runtimeerror-cuda-runtime-error-30-2019.10.10-更新">RuntimeError: cuda runtime error (30) (2019.10.10 更新)</h2><p>重启宿主机后，再使用容器里的环境时会找不到 CUDA，报下面的错误：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RuntimeError: cuda runtime error (30) : unknown error at /tmp/pip-req-build-58y_cjjl/aten/src/THC/THCGeneral.cpp:50</span><br></pre></td></tr></table></figure><p>或者 <code>torch.cuda.is_available()</code> 是 false</p><p>网上其他人报这个错误可能是因为 CUDA 没有安装，但我使用的是 Anaconda 自动安装的 CUDA 和 cuDNN，容器和宿主机都可以运行 <code>nvidia-smi</code> 命令查看显卡驱动版本，并且在重启前是没有错误的，为什么重启后就报错了呢？为此我甚至重装系统，但这个问题依然存在。。。</p><p>目前临时的解决办法是：</p><ol type="1"><li><p>重启宿主机后，需要使用宿主机的 Python 环境运行一次使用 CUDA 的程序；</p><p>例如，如果是pytorch环境，可以运行下面的代码：</p><p><code>python -c 'import torch; print(torch.cuda.is_available())'</code></p></li><li><p>重启所有容器。</p></li></ol><p>这样容器里的 CUDA 就可以找到了。这可能是 LXC 的配置问题，如果有人遇到相同问题有更好的解决方案希望可以告知，万分感谢~</p><h2 id="宿主机重启后找不到显卡驱动2020.6.2-更新">宿主机重启后找不到显卡驱动(2020.6.2 更新)</h2><p>重启宿主机后，显卡驱动掉了，所有用到显卡的容器都无法启动，输入<code>nvidia-smi</code>报错：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NVIDIA-SMI has failed because it couldn&apos;t communicate with the NVIDIA driver. Make sure that the latest NVIDIA driver is installed and running</span><br></pre></td></tr></table></figure><p>原因可能是宿主机运行了<code>sudo apt upgrade</code>命令并更新了系统内核，导致安装显卡驱动时的内核与现有内核版本不一致，解决办法参考<a href="https://www.jianshu.com/p/3cedce05a481" target="_blank" rel="noopener">此解决办法</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install dkms # DKMS，Dynamic Kernel Module Support，可以帮我们维护内核外的这些驱动程序，在内核版本变动之后可以自动重新生成新的模块。</span><br><span class="line">sudo dkms install -m nvidia -v 430.50</span><br></pre></td></tr></table></figure><p>DKMS全称是Dynamic Kernel Module Support，它可以帮我们维护内核外的这些驱动程序，在内核版本变动之后可以自动重新生成新的模块。</p><p>430.50是安装驱动的版本，可进入/usr/src查看nvidia-430.50的文件夹获取版本号</p><p>重启后输入nvidia-smi就应该正常输出了。如果还是不好使，可以重启后重新运行上述命令再重启。</p><p>如果仍不好使，说明该内核下无法编译显卡驱动，解决方法是内核降级为原来版本，具体方法参考<a href="https://zhengdao.github.io/2018/10/09/switch-ubuntu-linux-kernel/" target="_blank" rel="noopener">如何降级/切换 Ubuntu 系统 Linux 内核启动版本</a></p><ol type="1"><li>查看系统可用内核</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep menuentry /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><p>可以看到子选项：</p><blockquote><p>Ubuntu, with Linux 5.3.0-62-generic</p></blockquote><ol start="2" type="1"><li>修改内核启动版本</li></ol><p>使用vim编辑grub文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/default/grub</span><br></pre></td></tr></table></figure><blockquote><p>GRUB_DEFAULT=0 // 0表示系统当前启动的内核序号</p></blockquote><p>修改为想要启动的内核版本对应子选项：</p><blockquote><p>GRUB_DEFAULT="Advanced options for Ubuntu&gt;Ubuntu, with Linux 5.3.0-62-generic"</p></blockquote><p>注意，<code>&gt;</code>两侧没有空格，这个原博客有错误。</p><ol start="3" type="1"><li>更新 Grub</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>查看系统当前运行内核信息</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname -r(或-a)</span><br></pre></td></tr></table></figure><h2 id="容器硬盘zfs扩容">容器硬盘ZFS扩容</h2><p>LXD 初始化的时候会对 ZFS 进行空间分配，但是随着时间的推移仍有扩容的需求。当容器变得很卡的时候，有可能就是 ZFS 分配的空间已满。</p><p>输入下面的命令可以对 ZFS 进行扩容，以扩容512GB为例：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo truncate -s +512G /var/snap/lxd/common/lxd/disks/lxd.img</span><br><span class="line">sudo zpool set autoexpand=on lxd</span><br><span class="line">sudo zpool online -e lxd /var/snap/lxd/common/lxd/disks/lxd.img</span><br><span class="line">sudo zpool set autoexpand=off lxd</span><br></pre></td></tr></table></figure><p>其中，lxd.img 为初始化时定义的容器名称，不知道容器名称的可以通过下述命令查看 <code>sudo ls /var/snap/lxd/common/lxd/disks/</code></p><h2 id="总结">总结</h2><p>至此，多人使用的 GPU 服务器就搭建完成了，当需要新建容器时，只需要完成以下几步：</p><ol type="1"><li>从快照中新建容器；</li><li><code>lxc exec &lt;container&gt; bash</code> 进入容器；</li><li>更改容器的 IP；</li><li>更改容器的用户名、密码；</li><li>新增共享目录；</li></ol><p>这在以后可以编写脚本，使得新建操作更容易。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于深度学习的火热以及深度学习对 GPU 的强烈需求，实验室购置了一台性能强悍的 GPU 服务器，供大家一起使用。然而如果所有人都对这台服务器拥有控制权是十分危险的，例如误删他人文件，弄乱他人环境等。最直观的方法就是为每一个同学开启一个虚拟机，但是硬件虚拟化造成大量的资源浪费，同时GPU并不支持常规的虚拟化。&lt;/p&gt;
&lt;p&gt;本文采用在宿主机上创建多个 LXD 容器的软件虚拟化方法，使得资源能够更好的利用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="lxd" scheme="https://xungejiang.com/tags/lxd/"/>
    
      <category term="lxc" scheme="https://xungejiang.com/tags/lxc/"/>
    
      <category term="ubuntu" scheme="https://xungejiang.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>LXD 使用 Netplan 实现在同一网络访问</title>
    <link href="https://xungejiang.com//2019/05/20/lxd-subset-ip/"/>
    <id>https://xungejiang.com//2019/05/20/lxd-subset-ip/</id>
    <published>2019-05-20T01:01:42.000Z</published>
    <updated>2019-05-20T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了使实验室服务器可以被多人同时使用而不互相影响，实验室每一个人都拥有一个自己的 LXD 容器，但是 LXD 默认使用自己的网桥，无法在实验室的内网直接访问。</p><p>本文使用 Ubuntu 18.04 默认的网络配置工具 Netplan 管理网络，实现 LXD 容器的 IP 与实验室的 IP 域相同。</p><a id="more"></a><h2 id="宿主机网络配置">宿主机网络配置</h2><p>Ubuntu 17.10 以后默认使用 Netplan 管理网络。进入 <code>/etc/netplan/</code> 目录有一个 yaml 配置文件，下面的命令需要根据自己的 yaml 文件名称自行修改</p><p>备份配置文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/netplan/01-netcfg.yaml /etc/netplan/01-netcfg.yaml.bak</span><br></pre></td></tr></table></figure><p>编辑 yaml 配置文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/netplan/01-netcfg.yaml</span><br></pre></td></tr></table></figure><p>如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This file describes the network interfaces available on your system</span></span><br><span class="line"><span class="comment"># For more information, see netplan(5).</span></span><br><span class="line"><span class="attr">network:</span></span><br><span class="line"><span class="attr">  version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  renderer:</span> <span class="string">networkd</span></span><br><span class="line"><span class="attr">  ethernets:</span></span><br><span class="line"><span class="attr">    eno1:</span></span><br><span class="line"><span class="attr">      dhcp4:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">      dhcp6:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">  bridges:</span></span><br><span class="line"><span class="attr">    br0:</span></span><br><span class="line"><span class="attr">      dhcp4:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">      dhcp6:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">      interfaces:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">eno1</span></span><br><span class="line"><span class="attr">      addresses:</span> <span class="string">[</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.2</span><span class="string">/24</span> <span class="string">]</span></span><br><span class="line"><span class="attr">      gateway4:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line"><span class="attr">      nameservers:</span></span><br><span class="line"><span class="attr">          addresses:</span></span><br><span class="line"><span class="bullet">              -</span> <span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span></span><br><span class="line"><span class="bullet">              -</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"><span class="attr">      parameters:</span></span><br><span class="line"><span class="attr">          stp:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">          forward-delay:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><ul><li><code>addresses: [ 192.168.1.2/24 ]</code> 为任意网络无人占用的 IP 即可。</li><li><code>gateway4</code> 为网关地址。</li><li><code>eno1</code> 为网卡名称，可以使用 <code>ip a</code> 或 <code>ifconfig</code> 命令查看。</li></ul><p>应用网络配置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo netplan --debug apply</span><br></pre></td></tr></table></figure><p>重启后确认网络可用：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br><span class="line">ip a</span><br><span class="line">ping baidu.com</span><br></pre></td></tr></table></figure><h2 id="容器网络配置">容器网络配置</h2><p>进入容器：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo lxc exec &lt;container&gt; bash</span><br></pre></td></tr></table></figure><p>编辑 yaml 配置文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nano /etc/netplan/50-cloud-init.yaml</span><br></pre></td></tr></table></figure><p>如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line"><span class="attr">  version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">  ethernets:</span></span><br><span class="line"><span class="attr">    eth0:</span></span><br><span class="line"><span class="attr">      dhcp4:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">      dhcp6:</span> <span class="literal">no</span></span><br><span class="line"><span class="attr">      addresses:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.3</span><span class="string">/24</span></span><br><span class="line"><span class="attr">      gateway4:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line"><span class="attr">      nameservers:</span></span><br><span class="line"><span class="attr">        addresses:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span></span><br><span class="line"><span class="bullet">          -</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br></pre></td></tr></table></figure><p>应用网络配置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netplan --debug apply</span><br></pre></td></tr></table></figure><p>同样重启后检查网络连接：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br><span class="line">ip a</span><br><span class="line">ping baidu.com</span><br></pre></td></tr></table></figure><h2 id="参考资料">参考资料</h2><p><a href="https://discuss.linuxcontainers.org/t/lxd-netplan-static-ips-in-same-subnet-how-to/1074" target="_blank" rel="noopener">Lxd + Netplan + Static IP’s in same subnet HOW-TO</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了使实验室服务器可以被多人同时使用而不互相影响，实验室每一个人都拥有一个自己的 LXD 容器，但是 LXD 默认使用自己的网桥，无法在实验室的内网直接访问。&lt;/p&gt;
&lt;p&gt;本文使用 Ubuntu 18.04 默认的网络配置工具 Netplan 管理网络，实现 LXD 容器的 IP 与实验室的 IP 域相同。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="lxd" scheme="https://xungejiang.com/tags/lxd/"/>
    
      <category term="lxc" scheme="https://xungejiang.com/tags/lxc/"/>
    
      <category term="ubuntu" scheme="https://xungejiang.com/tags/ubuntu/"/>
    
      <category term="netplan" scheme="https://xungejiang.com/tags/netplan/"/>
    
  </entry>
  
  <entry>
    <title>14 年 MacBook Pro 升级 Intel 760p NVME SSD</title>
    <link href="https://xungejiang.com//2018/11/18/mac-change-ssd-760p/"/>
    <id>https://xungejiang.com//2018/11/18/mac-change-ssd-760p/</id>
    <published>2018-11-18T01:01:42.000Z</published>
    <updated>2018-11-18T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者一年后更新：</p><p>不再建议使用转接卡更换苹果电脑固态硬盘，因为在一年后就无法正常工作了。转接卡失效，760p 固态硬盘主控坏掉，只能识别 1 GB 的缓存。虽然数据及时导出，且硬盘有 5 年质保，但仍不推荐使用此方法扩容。可以尝试咸鱼购买拆机硬盘，现在也不贵。</p><p>本教程适用于 13/14/15 年 MacBook Pro 升级非官方硬盘</p><a id="more"></a><p>由于 MacBook Pro 的硬盘接口是自己设计的，所以更换硬盘有两种选择：</p><ul><li>选择 苹果 自家接口的固态硬盘。优点：兼容性好；缺点：贵，速度慢</li><li>选择 M.2 接口且兼容的固态硬盘 + 转接卡。优点：便宜，速度快，兼容性也很好；缺点：自己动手有风险（很小），失去保修，不好出二手</li></ul><p>本文将介绍使用第三方 M.2 接口的固态硬盘和转接卡升级 MacBook Pro 硬盘的方案</p><h2 id="之前的准备">之前的准备</h2><h3 id="ssd-与转接卡的选择">SSD 与转接卡的选择</h3><p>SSD 主要是根据广大网友的前车之鉴，目前比较推荐的有三星 SM951，Intel 760P等。博主选择的是 Intel 760P，因为 SM951 目前很难买到新款，基本上都是拆机的二手货，没有质保，而 Intel 760P 有 5 年保修，价格也差不多。</p><p>转接卡在淘宝搜索 <code>苹果SSD转接卡 2014 mac book</code>，博主买的转接卡如下图所示。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/18-11-18/002.jpg"></p><h3 id="制作-macos-系统盘">制作 macOS 系统盘</h3><p>因为在 macOS 10.13 High Sierra 版本后系统支持了 NVME 硬盘协议，所以我们安装的 macOS 版本必须是10.13之后的系统。本文选择的是 macOS 10.14 Mojave 版本，具体制作 macOS系统盘的教程可以参考 <a href="https://xungejiang.com/2016/07/03/install-macOS">本人博客</a></p><h3 id="timemachine-备份系统">TimeMachine 备份系统</h3><p>硬盘有价，数据无价！</p><p>拆机时还需要 T5 的螺丝刀，这里建议购买 <code>米家wiha螺丝刀</code></p><h2 id="更换过程">更换过程</h2><p>拆机等详细步骤可以参考 <a href="https://www.ifixit.com/Guide/MacBook+Pro+13-Inch+Retina+Display+Mid+2014+SSD+Replacement/27849" target="_blank" rel="noopener">IFIXIT 更换 SSD 教程</a></p><p>拆机过程要注意上面两颗螺丝和其他八颗螺丝的长度是不一样的，重新装机的时候要注意。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/18-11-18/004.jpg"></p><p>后机盖和机身有两个卡扣固定，装机要确定卡扣卡紧再上螺丝。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/18-11-18/005.jpg"></p><p>更换完 SSD 是这样的</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/18-11-18/003.jpg"></p><p>注意一定要将硬盘接头用力往里塞紧，并保证固定螺丝是可以拧上固定的状态。</p><h2 id="重装系统">重装系统</h2><p>插上刚才制作的 macOS 系统盘，按住 <code>option</code> 键开机，选择 install macOS 进入下面界面，选择磁盘工具，继续</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/18-11-18/006.jpg"></p><p>将新安装的 SSD 抹掉，格式为 <code>Mac OS 扩展（日志式）</code>，方案为 <code>GUID 分区图</code>，如下图所示</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/18-11-18/007.jpg"></p><p>若没有检测到新硬盘，则可能是硬盘没有插紧，或者硬盘不是全新的硬盘留有分区，只需要在 Windows 系统下删除卷即可</p><p>之后关闭磁盘工具，进入第二项 <code>安装 macOS</code> 即可成功安装。</p><p>新旧硬盘测速图如下（都是刚装完系统就测试的）：</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/18-11-18/008.jpg"></p><h2 id="休眠无法唤醒的解决办法">休眠无法唤醒的解决办法</h2><p>如果将电脑扣盖休眠 8 小时后（或者电脑休眠至没电关机）再开机发现无法唤醒电脑（电脑屏幕亮，但无反应），那么你可能需要继续往下阅读</p><p>Mac 电脑默认模式下休眠时间超过 8 小时后会将内存中的资料存储在硬盘中并将内存断电，以达到更好的省电目的。可能因为转接卡或硬盘不兼容将资料从硬盘导入内存造成无法唤醒的现象。</p><h3 id="方法1重置-mac-笔记本电脑上的-smc-和-nvram">方法1：重置 Mac 笔记本电脑上的 SMC 和 NVRAM：</h3><p>以下来自苹果官网：</p><p>1.如何重置 Mac 笔记本电脑上的 SMC：</p><p>如果电池不可拆卸： 选取苹果菜单 &gt;“关机”。 等 Mac 关机后，按下内建键盘左侧的 Shift-Control-Option，然后同时按下电源按钮。按住这些按键和电源按钮 10 秒钟。 如果您的 MacBook Pro 带有触控 ID，则触控 ID 按钮也是电源按钮。 松开所有按键。 再次按下电源按钮以开启 Mac。</p><p>2.如何重置 NVRAM</p><p>将 Mac 关机，然后开机并立即同时按住以下四个按键：Option、Command、P 和 R。您可以在大约 20 秒后松开这些按键，在此</p><p>期间您的 Mac 可能看似在重新启动。</p><p>在发出启动声的 Mac 电脑上，您可以在两次启动声之后松开这些按键。 在 iMac Pro 上，您可以在 Apple 标志第二次出现并消失后松开这些按键。 如果您的 Mac 使用了固件密码，这个组合键将不起任何作用或导致您的 Mac 从 macOS 恢复功能启动。要重置 NVRAM，请先关闭固件密码。</p><p>在您的 Mac 完成启动后，您可能需要打开“系统偏好设置”并调整已重置的任何设置，例如音量、显示屏分辨率、启动磁盘选择或时区。</p><h3 id="方法2更改电源管理模式">方法2：更改电源管理模式</h3><p>如果上述方法依旧存在休眠无法唤醒的情况，那就只能使用下述命令通过更改 hibernatemode，使电脑不进入内存断电的休眠模式。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 永不休眠</span></span><br><span class="line">sudo pmset -a hibernatemode 0 standby 0 autopoweroff 0</span><br><span class="line"><span class="comment"># 恢复默认</span></span><br><span class="line">sudo pmset -a hibernatemode 3 standby 1 autopoweroff 1</span><br></pre></td></tr></table></figure><p>详细命令参考博客 <a href="https://www.cnblogs.com/zhengran/p/4802582.html" target="_blank" rel="noopener">mac下pmset的使用方法</a></p><p>虽然更改后可能会略微增加耗电，但是开盖唤醒速度也会加快。需要注意的是更改模式后在电脑快要没电的时候需要关机，否则可能导致数据的丢失。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者一年后更新：&lt;/p&gt;
&lt;p&gt;不再建议使用转接卡更换苹果电脑固态硬盘，因为在一年后就无法正常工作了。转接卡失效，760p 固态硬盘主控坏掉，只能识别 1 GB 的缓存。虽然数据及时导出，且硬盘有 5 年质保，但仍不推荐使用此方法扩容。可以尝试咸鱼购买拆机硬盘，现在也不贵。&lt;/p&gt;
&lt;p&gt;本教程适用于 13/14/15 年 MacBook Pro 升级非官方硬盘&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="mac" scheme="https://xungejiang.com/tags/mac/"/>
    
      <category term="ssd" scheme="https://xungejiang.com/tags/ssd/"/>
    
  </entry>
  
  <entry>
    <title>如何将 Matplotlib 图像展示在 web 页面上</title>
    <link href="https://xungejiang.com//2018/08/04/matplotlib-html/"/>
    <id>https://xungejiang.com//2018/08/04/matplotlib-html/</id>
    <published>2018-08-04T07:08:00.000Z</published>
    <updated>2018-08-04T07:08:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道 Matplotlib 是一个非常强大的 Python 画图工具，其不仅可以画条形图、饼状图等统计图，也可以画以像素构成的图像。MATLAB 能画的图像，Matplotlib 通过 Python 语言也能画。</p><p>做项目的时候遇到一个需求，就是如何将网页后端生成的 Matplotlib 图像展示在前端页面上。尝试使用了如下几种方法，在此记录一下。</p><a id="more"></a><h2 id="使用-mpld3-包">使用 mpld3 包</h2><p>这是一个相对简单并且改动较小的方法，只需要在后端改一下 import 就可以，具体使用方法参照<a href="http://mpld3.github.io/quickstart.html" target="_blank" rel="noopener">官方教程</a>。</p><p>但是实现的时候遇到了一些问题</p><ul><li>不适合大数据可视化的处理，当图像超过几千个元素时，前端展示的图像会有一定的模糊；</li><li>使用时必须联网；</li><li>一些 Matplotlib 的方法在 mpld3 中缺失。</li></ul><h2 id="保存在网页服务器的-static-目录下">保存在网页服务器的 static 目录下</h2><p>该方法易于实现，首先将网页后端的图像保存到后端服务器的 static 目录下，前端再从 static 目录下读取图片进行展示。</p><p>但是依然存在一些问题</p><ul><li>无法判断响应时间。因为后端生成图片的时间未知，所以只能采用在前端延时展示，这样也浪费时间资源；</li><li>前后端分离的项目中，前端访问后端 static 目录路径时不方便。</li></ul><h2 id="使用请求的方式将图像传到前端">使用请求的方式将图像传到前端</h2><p>该方法将图像以请求的方式传到前端，前端只需将 <code>&lt;img&gt;</code> 标签的 src 属性赋值为后端的请求路径即可。</p><p>该方法可以在后端生成完图像后再发送给前端，无需设置延时获取图像，但也遇到一些问题</p><ul><li>项目中后端获取前端的请求后需要返回两个请求，一个是表格数据，一个是图像，这样代码就比较冗余；</li><li>由于 Matplotlib 生成的图像有白边，而只有加上 <code>fig.savefig('a.png', bbox_inches='tight', pad_inches=0.0)</code> 这句代码时才能去除白边，而发送请求只能发送 fig ，所以前端显示的图像有白边。</li></ul><h2 id="将图像以-base64-格式发送给前端">将图像以 Base64 格式发送给前端</h2><p>该方法也是本人最终采取的方法。原理是在调用 savefig 方法时不存储为图像，而是存储为二进制格式，二进制格式再转化为 Base64 格式，并将其发送给前端，前端只需要将 <code>&lt;img&gt;</code> 标签的 src 属性赋值为后端发送的 Base64 字符串即可。</p><p>后端代码如下所示</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">...</span><br><span class="line">sio = BytesIO()</span><br><span class="line">fig.savefig(sio, format=<span class="string">'png'</span>, bbox_inches=<span class="string">'tight'</span>, pad_inches=<span class="number">0.0</span>)</span><br><span class="line">data = base64.encodebytes(sio.getvalue()).decode()</span><br><span class="line">src = <span class="string">'data:image/png;base64,'</span> + str(data)</span><br></pre></td></tr></table></figure><p>将最后一行的 <code>src</code> 传到前端即可展示。</p><p>该方法优点如下</p><ul><li>该方法可以在后端生成完图像后再发送给前端，无需设置延时获取图像；</li><li>该方法只需要往前端发送一次请求，代码更加精简；</li><li>调用了 savefig 方法，可以去除白边。</li></ul><p>所以几乎解决了之前方法的所有痛点</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道 Matplotlib 是一个非常强大的 Python 画图工具，其不仅可以画条形图、饼状图等统计图，也可以画以像素构成的图像。MATLAB 能画的图像，Matplotlib 通过 Python 语言也能画。&lt;/p&gt;
&lt;p&gt;做项目的时候遇到一个需求，就是如何将网页后端生成的 Matplotlib 图像展示在前端页面上。尝试使用了如下几种方法，在此记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="经验值" scheme="https://xungejiang.com/categories/%E7%BB%8F%E9%AA%8C%E5%80%BC/"/>
    
    
      <category term="Django" scheme="https://xungejiang.com/tags/Django/"/>
    
      <category term="Matplotlib" scheme="https://xungejiang.com/tags/Matplotlib/"/>
    
      <category term="python" scheme="https://xungejiang.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>我是如何在黑苹果中编译安装 TensorFlow-GPU 1.8</title>
    <link href="https://xungejiang.com//2018/07/06/tensorflow-gpu-mac/"/>
    <id>https://xungejiang.com//2018/07/06/tensorflow-gpu-mac/</id>
    <published>2018-07-06T01:01:42.000Z</published>
    <updated>2018-07-06T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直使用 Ubuntu Linux 系统作为 TensorFlow 机器学习的服务器，但是相对于 macOS 来说，无论是界面美化还是应用覆盖都是远远强于 Ubuntu 的，所以计划安装一个黑苹果作为 TensorFlow 的服务器</p><p>但是因为 TensorFlow 在 1.2 版本后不再支持 macOS 的 GPU 版本，只能通过编译源代码进行安装，过程较为繁杂，所以在此记录</p><a id="more"></a><p>首先确定 Mac 显卡是 NVIDIA 显卡，且compute capabilities &gt;= 3.0，<a href="https://developer.nvidia.com/cuda-gpus" target="_blank" rel="noopener">点击这里</a> 查看你的显卡型号是否支持</p><h2 id="环境概览">环境概览</h2><table><thead><tr class="header"><th>软件</th><th>版本号</th></tr></thead><tbody><tr class="odd"><td>macOS High Sierra</td><td>10.13.4</td></tr><tr class="even"><td>TensorFlow</td><td>1.8</td></tr><tr class="odd"><td>python</td><td>3.6.4</td></tr><tr class="even"><td>NVIDIA Web-Drivers</td><td>387.10.10.10.30.106</td></tr><tr class="odd"><td>CUDA-Drivers</td><td>387.178</td></tr><tr class="even"><td>CUDA Toolkit</td><td>9.1</td></tr><tr class="odd"><td>cuDNN</td><td>7.0.5</td></tr><tr class="even"><td>bazel</td><td>0.10.0</td></tr><tr class="odd"><td>Xcode</td><td>8.3.2</td></tr><tr class="even"><td>Command Line Tools for Xcode</td><td>8.3.2</td></tr></tbody></table><h2 id="环境搭建">环境搭建</h2><h3 id="安装-homebrew">安装 Homebrew</h3><p>在终端输入下面命令安装 Homebrew</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><h3 id="安装-coreutilsllvmopenmp">安装 coreutils，llvm，OpenMP</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install coreutils llvm cliutils/apple/libomp</span><br></pre></td></tr></table></figure><h3 id="安装-python-依赖">安装 Python 依赖</h3><p>建议使用 Anaconda 包管理和 Virtualenv 虚拟环境等安装 Python</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install six numpy wheel</span><br></pre></td></tr></table></figure><h3 id="安装-bazel">安装 bazel</h3><p>下载 <a href="https://github.com/bazelbuild/bazel/releases" target="_blank" rel="noopener">0.10.0</a> 版本中的 <code>bazel-0.10.0-installer-darwin-x86_64.sh</code> 文件</p><p>需要注意，这里必须是 0.10.0 版本，新或旧都能导致编译失败</p><p>在下载目录打开终端，输入下面命令进行安装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x bazel-0.10.0-installer-darwin-x86_64.sh</span><br><span class="line">./bazel-0.10.0-installer-darwin-x86_64.sh</span><br></pre></td></tr></table></figure><h3 id="降级-xcode-到-8.3.2">降级 Xcode 到 8.3.2</h3><p>下载 <code>Xcode 8.3.2</code> 和 <code>Command Line Tools for Xcode 8.3.2</code>，Xcode 9 需要降级，因为编译 TensorFlow 只能使用 Xcode 8，官网下载需要登录苹果账号，<a href="https://developer.apple.com/download/more/" target="_blank" rel="noopener">官网下载链接</a>，按名称排列即可快速找到。</p><ul><li><code>Xcode8.3.2.xip</code> (4.49GB) 下载后解压，重命名为 <code>Xcode8.3.2</code> 并复制到 <code>应用程序</code> 即可</li><li><code>CommandLineToolsforXcode8.3.2.dmg</code> (166.1MB) 下载后安装即可</li></ul><p>使用下面的命令在终端激活 Xcode 8.3.2</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo xcode-select -s /Applications/Xcode8.3.2.app</span><br></pre></td></tr></table></figure><p>换回 Xcode 9 可以用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo xcode-select -s /Applications/Xcode.app</span><br></pre></td></tr></table></figure><h3 id="nvidia">NVIDIA</h3><h4 id="安装-nvidia-web-drivers">(1) 安装 NVIDIA Web-Drivers</h4><p>下载 <code>NVIDIA Web-Drivers</code> 驱动，根据不同的 Mac 系统进行下载，<a href="https://www.tonymacx86.com/nvidia-drivers/" target="_blank" rel="noopener">点击这里</a> 下载，支持 macOS 10.13.4 的版本为 387.10.10.10.30.106</p><ul><li><code>WebDriver-387.10.10.10.30.106.pkg</code> (63.9MB) 下载后安装即可</li></ul><h4 id="安装-cuda-drivers">(2) 安装 CUDA-Drivers</h4><p>下载 <code>CUDA-Drivers</code> 驱动，支持 CUDA 9.1 的版本号为 387.178，<a href="https://www.nvidia.cn/object/macosx-cuda-387.178-driver-cn.html" target="_blank" rel="noopener">官网</a> 下载、 <a href="https://pan.baidu.com/s/1GyoCyuh-hhJtEgFC0XS0IQ" target="_blank" rel="noopener">百度云</a> 下载</p><ul><li><code>cudadriver_387.178_macos.dmg</code> (39.9MB) 下载后安装即可</li></ul><h4 id="安装-cuda-toolkit-9.1">(3) 安装 CUDA Toolkit 9.1</h4><p>下载 <code>CUDA Toolkit 9.1</code>，<a href="https://developer.nvidia.com/cuda-91-download-archive?target_os=MacOSX&amp;target_arch=x86_64&amp;target_version=1013&amp;target_type=dmglocal" target="_blank" rel="noopener">官网</a> 下载和 <a href="https://pan.baidu.com/s/1zPU_2aC6_uK3P2j7v-RtEw" target="_blank" rel="noopener">百度云</a> 下载</p><ul><li><code>cuda_9.1.128_mac.dmg</code> (1.53GB) 下载后安装即可</li></ul><p>配置 CUDA 环境，编辑 <code>~/.bash_profile</code> 文件，如果安装了zsh则编辑 <code>~/.zshrc</code> 文件，打开终端：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">open -e .bash_profile</span><br></pre></td></tr></table></figure><p>然后在弹出的文件中添加：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export CUDA_HOME=/usr/local/cuda</span><br><span class="line">export DYLD_LIBRARY_PATH=/usr/local/cuda/lib:/usr/local/cuda/extras/CUPTI/lib</span><br><span class="line">export LD_LIBRARY_PATH=$DYLD_LIBRARY_PATH</span><br><span class="line">export PATH=$PATH:$DYLD_LIBRARY_PATH</span><br></pre></td></tr></table></figure><p>执行命令重启bash_profile</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">. ~/.bash_profile</span><br></pre></td></tr></table></figure><p>检测CUDA能否正常运行：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /usr/local/cuda/samples</span><br><span class="line">sudo make -C 1_Utilities/deviceQuery</span><br><span class="line">./bin/x86_64/darwin/release/deviceQuery</span><br></pre></td></tr></table></figure><p>第一次编译时可能需要同意苹果协议，按照要求填 <code>agree</code> 即可</p><p>最终结果为 <code>Result = PASS</code> 则安装正确。</p><h4 id="安装-cudnn-7.0.5">(4) 安装 cuDNN 7.0.5</h4><p>下载 <code>cuDNN 7.0.5</code>，该版本支持 CUDA 9.1 ，官网下载时需要登录 NVIDIA 账号，<a href="https://developer.nvidia.com/rdp/cudnn-archive" target="_blank" rel="noopener">官网</a> 下载、 <a href="https://pan.baidu.com/s/1wY5A75FzXbNVmf0ZAIwvkg" target="_blank" rel="noopener">百度云</a> 下载</p><ul><li><code>cudnn-9.1-osx-x64-v7-ga.tgz</code> (340.3MB) 下载后解压，切换到解压缩的 <code>cuda</code> 目录，输入以下命令</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp cuda/include/cudnn.h /usr/local/cuda/include</span><br><span class="line">sudo cp cuda/lib/libcudnn_static.a /usr/local/cuda/lib</span><br><span class="line">sudo cp cuda/lib/libcudnn.7.dylib /usr/local/cuda/lib</span><br><span class="line">sudo ln -s /usr/local/cuda/lib/libcudnn.7.dylib /usr/local/cuda/lib/libcudnn.dylib</span><br><span class="line">sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib/libcudnn*</span><br></pre></td></tr></table></figure><h2 id="编译准备">编译准备</h2><h3 id="拉取-tensorflow-源码-release-1.8-分支">拉取 TensorFlow 源码 release 1.8 分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/tensorflow/tensorflow -b r1.8</span><br><span class="line">cd tensorflow</span><br></pre></td></tr></table></figure><h3 id="修改代码使其与-macos-兼容">修改代码，使其与 macOS 兼容</h3><h4 id="替换掉以下三个文件的-alignsizeoft">替换掉以下三个文件的 align(sizeof(T))</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd tensorflow</span><br><span class="line">sed -i -e &quot;s/ __align__(sizeof(T))//g&quot; tensorflow/core/kernels/concat_lib_gpu_impl.cu.cc</span><br><span class="line">sed -i -e &quot;s/ __align__(sizeof(T))//g&quot; tensorflow/core/kernels/depthwise_conv_op_gpu.cu.cc</span><br><span class="line">sed -i -e &quot;s/ __align__(sizeof(T))//g&quot; tensorflow/core/kernels/split_lib_gpu.cu.cc</span><br></pre></td></tr></table></figure><h4 id="解决找不到-protobuf.bzl-的问题">解决找不到 'protobuf.bzl' 的问题</h4><p>我还遇到了以下错误</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR: /Users/xunge/Desktop/tensorflow/tensorflow/tools/pip_package/BUILD:166:1: error loading package &apos;tensorflow&apos;: Encountered error while reading extension file &apos;protobuf.bzl&apos;: no such package &apos;@protobuf_archive//&apos;: java.io.IOException: thread interrupted and referenced by &apos;//tensorflow/tools/pip_package:build_pip_package&apos;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/tensorflow/tensorflow/issues/12979" target="_blank" rel="noopener">解决办法</a> 如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -i &apos;\@https://github.com/google/protobuf/archive/0b059a3d8a8f8aa40dde7bea55edca4ec5dfea66.tar.gz@d&apos; tensorflow/workspace.bzl</span><br></pre></td></tr></table></figure><h4 id="添加依赖头文件-nccl.h-如编译1.7不用做此步骤">添加依赖头文件 nccl.h (如编译1.7不用做此步骤)</h4><p>下载 <a href="https://github.com/NVIDIA/nccl/blob/master/src/nccl.h" target="_blank" rel="noopener">nccl.h</a>，放在 <code>third_party/nccl</code> 文件夹内</p><h4 id="修改-tensorflowworkspace.bzl-文件">修改 tensorflow/workspace.bzl 文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf_http_archive(</span><br><span class="line">    name = &quot;protobuf_archive&quot;,</span><br><span class="line">    urls = [</span><br><span class="line">        &quot;https://mirror.bazel.build/github.com/google/protobuf/archive/396336eb961b75f03b25824fe86cf6490fb75e3a.tar.gz&quot;,</span><br><span class="line">        &quot;https://github.com/google/protobuf/archive/396336eb961b75f03b25824fe86cf6490fb75e3a.tar.gz&quot;,</span><br><span class="line">    ],</span><br><span class="line">    sha256 = &quot;846d907acf472ae233ec0882ef3a2d24edbbe834b80c305e867ac65a1f2c59e3&quot;,</span><br><span class="line">    strip_prefix = &quot;protobuf-396336eb961b75f03b25824fe86cf6490fb75e3a&quot;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>搜索如上替换为如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tf_http_archive(</span><br><span class="line">    name = &quot;protobuf_archive&quot;,</span><br><span class="line">    urls = [</span><br><span class="line">        &quot;https://mirror.bazel.build/github.com/dtrebbien/protobuf/archive/50f552646ba1de79e07562b41f3999fe036b4fd0.tar.gz&quot;,</span><br><span class="line">        &quot;https://github.com/dtrebbien/protobuf/archive/50f552646ba1de79e07562b41f3999fe036b4fd0.tar.gz&quot;,</span><br><span class="line">    ],</span><br><span class="line">    sha256 = &quot;eb16b33431b91fe8cee479575cee8de202f3626aaf00d9bf1783c6e62b4ffbc7&quot;,</span><br><span class="line">    strip_prefix = &quot;protobuf-50f552646ba1de79e07562b41f3999fe036b4fd0&quot;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>修复 third_party/gpus/cuda/BUILD.tpl 文件 -lgomp 报错</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">linkopts = [&quot;-lgomp&quot;],</span><br></pre></td></tr></table></figure><p>搜索如上，注释掉</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># linkopts = [&quot;-lgomp&quot;],</span><br></pre></td></tr></table></figure><h2 id="开始编译">开始编译</h2><h3 id="编译配置">编译配置</h3><p>在 TensorFlow 目录下输入以下命令进行命令配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure><p>配置文件如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You have bazel 0.10 installed.</span><br><span class="line">Please specify the location of python. [Default is /Users/user/.pyenv/versions/tensorflow-gpu/bin/python]: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Found possible Python library paths:</span><br><span class="line">  /Users/user/.pyenv/versions/tensorflow-gpu/lib/python3.6/site-packages</span><br><span class="line">Please input the desired Python library path to use.  Default is [/Users/user/.pyenv/versions/tensorflow-gpu/lib/python3.6/site-packages]</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with Google Cloud Platform support? [Y/n]: n</span><br><span class="line">No Google Cloud Platform support will be enabled for TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with Hadoop File System support? [Y/n]: n</span><br><span class="line">No Hadoop File System support will be enabled for TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with Amazon S3 File System support? [Y/n]: n</span><br><span class="line">No Amazon S3 File System support will be enabled for TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with Apache Kafka Platform support? [y/N]: n</span><br><span class="line">No Apache Kafka Platform support will be enabled for TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with XLA JIT support? [y/N]: n</span><br><span class="line">No XLA JIT support will be enabled for TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with GDR support? [y/N]: n</span><br><span class="line">No GDR support will be enabled for TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with VERBS support? [y/N]: n</span><br><span class="line">No VERBS support will be enabled for TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with OpenCL SYCL support? [y/N]: n</span><br><span class="line">No OpenCL SYCL support will be enabled for TensorFlow.</span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with CUDA support? [y/N]: y</span><br><span class="line">CUDA support will be enabled for TensorFlow.</span><br><span class="line"></span><br><span class="line">Please specify the CUDA SDK version you want to use, e.g. 7.0. [Leave empty to default to CUDA 9.0]: 9.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please specify the location where CUDA 9.1 toolkit is installed. Refer to README.md for more details. [Default is /usr/local/cuda]: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please specify the cuDNN version you want to use. [Leave empty to default to cuDNN 7.0]: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please specify the location where cuDNN 7 library is installed. Refer to README.md for more details. [Default is /usr/local/cuda]:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Please specify a list of comma-separated Cuda compute capabilities you want to build with.</span><br><span class="line">You can find the compute capability of your device at: https://developer.nvidia.com/cuda-gpus.</span><br><span class="line">Please note that each additional compute capability significantly increases your build time and binary size. [Default is: 3.5,5.2]6.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Do you want to use clang as CUDA compiler? [y/N]: n</span><br><span class="line">nvcc will be used as CUDA compiler.</span><br><span class="line"></span><br><span class="line">Please specify which gcc should be used by nvcc as the host compiler. [Default is /usr/bin/gcc]: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Do you wish to build TensorFlow with MPI support? [y/N]: n</span><br><span class="line">No MPI support will be enabled for TensorFlow.</span><br><span class="line"></span><br><span class="line">Please specify optimization flags to use during compilation when bazel option &quot;--config=opt&quot; is specified [Default is -march=native]: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Would you like to interactively configure ./WORKSPACE for Android builds? [y/N]: </span><br><span class="line">Not configuring the WORKSPACE for Android builds.</span><br><span class="line"></span><br><span class="line">Preconfigured Bazel build configs. You can use any of the below by adding &quot;--config=&lt;&gt;&quot; to your build command. See tools/bazel.rc for more details.</span><br><span class="line">--config=mkl         # Build with MKL support.</span><br><span class="line">--config=monolithic  # Config for mostly static monolithic build.</span><br><span class="line">Configuration finished</span><br></pre></td></tr></table></figure><h3 id="编译">编译</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bazel clean --expunge</span><br><span class="line">bazel build --config=cuda --config=opt --cxxopt=&quot;-D_GLIBCXX_USE_CXX11_ABI=0&quot; --action_env PATH --action_env LD_LIBRARY_PATH --action_env DYLD_LIBRARY_PATH //tensorflow/tools/pip_package:build_pip_package</span><br></pre></td></tr></table></figure><p>如果看到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO: Build completed successfully, 9160 total actions</span><br></pre></td></tr></table></figure><p>就说明编译成功</p><h3 id="创建wheel文件并安装">创建wheel文件并安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg</span><br><span class="line">cd ~</span><br><span class="line">sudo pip install /tmp/tensorflow_pkg/tensorflow-1.8-cp36-cp36m-macosx_10_13_x86_64.whl</span><br></pre></td></tr></table></figure><p>本人编译完成后的文件为 <code>tensorflow-1.8.0-cp36-cp36m-macosx_10_7_x86_64.whl</code> <a href="https://pan.baidu.com/s/14o0uIOutmW866ftbf8nvuA" target="_blank" rel="noopener">百度云下载</a></p><p>最后提供本人 Z270 + i7-7700k 的黑苹果 <a href="https://pan.baidu.com/s/1ttgZ1cralJrTYkZS5BmwnQ" target="_blank" rel="noopener">EFI</a></p><p>参考文章：</p><ul><li><a href="https://www.shifeng1993.com/2018/05/26/tensorflow_gpu_macos/" target="_blank" rel="noopener">【tensorflow】macOS 10.13.4 编译 GPU 版本的 TensorFlow 1.8</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前一直使用 Ubuntu Linux 系统作为 TensorFlow 机器学习的服务器，但是相对于 macOS 来说，无论是界面美化还是应用覆盖都是远远强于 Ubuntu 的，所以计划安装一个黑苹果作为 TensorFlow 的服务器&lt;/p&gt;
&lt;p&gt;但是因为 TensorFlow 在 1.2 版本后不再支持 macOS 的 GPU 版本，只能通过编译源代码进行安装，过程较为繁杂，所以在此记录&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="mac" scheme="https://xungejiang.com/tags/mac/"/>
    
      <category term="tensorflow" scheme="https://xungejiang.com/tags/tensorflow/"/>
    
      <category term="gpu" scheme="https://xungejiang.com/tags/gpu/"/>
    
  </entry>
  
  <entry>
    <title>Django报错 __init__() missing 1 required positional argument &#39;on_delete&#39;</title>
    <link href="https://xungejiang.com//2017/12/23/django-error-ondelete/"/>
    <id>https://xungejiang.com//2017/12/23/django-error-ondelete/</id>
    <published>2017-12-23T01:01:42.000Z</published>
    <updated>2017-12-23T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Django 在更新到 2.0 后 报错如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TypeError: __init__() missing 1 required positional argument: &apos;on_delete&apos;</span><br></pre></td></tr></table></figure><a id="more"></a><p>是因为在 Django 2.0 后，models.ForeignKey() 函数 和 models.OneToOneField() 中的 on_delete 参数不再默认为 CASCADE ，而是必须参数</p><p>官方文档：<a href="https://docs.djangoproject.com/en/1.11/ref/models/fields/#django.db.models.ForeignKey.on_delete" target="_blank" rel="noopener">https://docs.djangoproject.com/en/1.11/ref/models/fields/#django.db.models.ForeignKey.on_delete</a></p><p>修改方法如下</p><p>修改之前</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogArticles</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">300</span>)</span><br><span class="line">    author = models.ForeignKey(</span><br><span class="line">        User,</span><br><span class="line">        related_name=<span class="string">"blog_posts"</span>,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>修改之后</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogArticles</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    title = models.CharField(max_length=<span class="number">300</span>)</span><br><span class="line">    author = models.ForeignKey(</span><br><span class="line">        User,</span><br><span class="line">        related_name=<span class="string">"blog_posts"</span>,</span><br><span class="line">        on_delete=models.CASCADE,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django 在更新到 2.0 后 报错如下&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;TypeError: __init__() missing 1 required positional argument: &amp;apos;on_delete&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="经验值" scheme="https://xungejiang.com/categories/%E7%BB%8F%E9%AA%8C%E5%80%BC/"/>
    
    
      <category term="Django" scheme="https://xungejiang.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>远程开机_网络唤醒设置方法 (WOL, Wake on Lan)</title>
    <link href="https://xungejiang.com//2017/12/09/wake-on-lan/"/>
    <id>https://xungejiang.com//2017/12/09/wake-on-lan/</id>
    <published>2017-12-09T01:01:42.000Z</published>
    <updated>2017-12-09T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在实验室想控制家里的电脑。控制很容易， TeamViewer 就好啦。但是白天家里没人，没人帮我开电脑，于是找到了 WOL 这种方法。</p><a id="more"></a><h2 id="设置主板-bios">设置主板 BIOS</h2><p>需要在 BIOS 中进行更改。我的是微星 BIOS，操作如下</p><p><code>高级</code> -&gt; <code>换型事件设置</code> -&gt; 将 <code>PCIE设备唤醒</code> 和 <code>网络唤醒</code> 设置为 <code>允许</code> (Enable)</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-12-9/007.jpg"></p><p>其他 BIOS 也类似，因为网卡也属于 PCIE 设备，所以 PCIE设备唤醒 也需要打开。</p><h2 id="设置网卡">设置网卡</h2><p>在设备驱动管理器中，找到 <code>网络适配器</code> ，在第一个驱动 <code>右键</code> -&gt; <code>属性</code></p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-12-9/001.png"></p><p>在 <code>高级</code> 菜单中的属性找到 <code>唤醒魔包</code> (Wake on Magic Packet) 设置为 <code>启用</code></p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-12-9/002.png"></p><p>在 <code>电源管理</code> 中 <code>勾选</code> <code>允许此设备唤醒计算机</code></p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-12-9/003.png"></p><h2 id="配置路由器-ddns-动态-dns-服务">配置路由器 DDNS (动态 DNS) 服务</h2><p>由于 IPV4 地址紧张，运营商宽带都是使用的动态 IP 地址，这就需要 <code>动态 DNS 服务</code> 进行穿透局域网。</p><p>我家的路由器是 <code>网件 NETGEAR R7800</code> 所以这里使用 NETGEAR 的 DDNS 服务，其他路由器基本也有自己的 DDNS 服务，大家可以自己选择。</p><p>首先登录路由器控制界面，一般是浏览器输入 192.168.0.1 / 192.168.1.1 / 10.0.0.1 等进入。</p><p>找到 <code>DDNS</code> 或者 <code>动态 DNS</code> ，注册 DDNS 服务商。网件提供三个 DDNS 服务商，我选择的是 <code>www.No-IP.com</code>。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-12-9/004.png"></p><p>找到 <code>端口映射/端口触发</code>，在 <code>端口映射</code> 中 <code>添加自定义服务</code>。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-12-9/005.png"></p><p>服务名随便填，协议：TCP/UDP，<code>外部端口组</code> 和 <code>内部端口组</code> 一致即可，<code>内部 IP 地址</code>映射到家里电脑的 IP。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-12-9/008.png"></p><p>这样，你就可以使用 WOL 软件发送一个数据包唤醒家里的电脑了。</p><p>有一个网站就可以使用 <a href="https://www.depicus.com/wake-on-lan/woli" target="_blank" rel="noopener">https://www.depicus.com/wake-on-lan/woli</a>。</p><p>该网站还提供了 windows, mac OS, Android, iOS 等不同平台的应用，有需要的可以自行下载。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-12-9/006.png"></p><p>mac 地址可以在控制台输入 <code>ipconfig /all</code> 获取；</p><p>IP 地址填 <code>域名即可</code>；</p><p>子网掩码为 <code>255.255.255.255</code>；</p><p>端口号为之前设的外部和内部端口号。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在实验室想控制家里的电脑。控制很容易， TeamViewer 就好啦。但是白天家里没人，没人帮我开电脑，于是找到了 WOL 这种方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="WOL" scheme="https://xungejiang.com/tags/WOL/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】 Is attacking machine learning easier than defending it?</title>
    <link href="https://xungejiang.com//2017/11/29/translate-blog2/"/>
    <id>https://xungejiang.com//2017/11/29/translate-blog2/</id>
    <published>2017-11-29T01:01:42.000Z</published>
    <updated>2017-11-29T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="http://www.cleverhans.io/security/privacy/ml/2017/02/15/why-attacking-machine-learning-is-easier-than-defending-it.html" target="_blank" rel="noopener">Is attacking machine learning easier than defending it?</a></p><p>译文：<a href="http://xungejiang.com/2017/11/29/translate-blog2/">攻击机器学习比防御更容易吗?</a></p><p>原文写作日期：2017年3月15日 译文写作日期：2017年11月29日</p><p>本文为<a href="http://www.cleverhans.io/" target="_blank" rel="noopener">cleverhans-blog</a>的第二篇博客，作者为 Ian Goodfellow 和 Nicolas Papernot，主要讲解 <strong>对抗性训练</strong> 和 <strong>防御性蒸馏</strong> 两种防御方法之间的优势与不足。</p><p>xunge 是一名初学者，论文翻译中用到了 Google，并自己逐句检查过，但还是会有显得晦涩的地方，如有语法/专业名词翻译错误，还请见谅，并欢迎及时指出。</p><p>转载请注明出处！</p><a id="more"></a><p>在我们的<a href="http://www.cleverhans.io/security/privacy/ml/2016/12/15/breaking-things-is-easy.html" target="_blank" rel="noopener">第一篇文章</a>中，我们提出了几种攻击者可以打破当前机器学习系统的方式，比如通过毒化学习算法使用的数据[BNL12]，或者制作对抗性样本迫使模型做出错误的预测[SZS13]。在本文中，我们将以对抗性样本为例说明为什么攻击机器学习似乎比防御更容易。换句话说，我们将详细介绍为什么我们还没有完全有效的防御对抗性样本的一些原因，并推测我们是否能够进行防御。</p><p>对抗性样本是机器学习模型的输入，它是由攻击者设计，用来欺骗模型产生不正确的输出。例如，我们给一个熊猫图片添加一个经过计算的小扰动，使图像被认为是一个高可信度的长臂猿[GSS14]：</p><p><img class="lazyload"  data-src="http://cleverhans.io/assets/adversarial-example.png"></p><p>到目前为止，设计出这种欺骗模型的方法要比设计出不能欺骗模型的方法容易得多。</p><h2 id="我们如何使ml模型面对对抗性样本时更加强壮-how-have-we-tried-to-make-ml-models-more-robust-to-adversarial-examples">我们如何使ML模型面对对抗性样本时更加强壮？ (How have we tried to make ML models more robust to adversarial examples?)</h2><p>我们先介绍下两种防御方法：对抗性训练和防御性蒸馏。防御者如何试图使机器学习模型更加强壮并减轻对抗性样本的攻击效果。</p><p>对抗性训练旨在训练时主动产生对抗性样本，在测试时提取对抗性样本来改进模型的泛化。这个想法是由Szegedy等人首次提出的[SZS13]，但由于产生对抗性样本的成本太高而不实用。 Goodfellow等人展示了如何利用快速梯度符号方法低成本地产生对抗性样本，并且使得在训练过程中高计算效率地产生大批对抗性样本 [GSS14]。然后该模型被训练成将相同的标签分配给相对于原始样本的对抗性样本。例如：我们拍摄一张猫的照片，并对其进行扰动以欺骗模型，使其认为它是秃鹫，然后告诉模型这张照片仍然是一只猫。对抗训练的一个开源实现可以在<a href="https://github.com/openai/cleverhans" target="_blank" rel="noopener">cleverhans</a> 库中找到，其使用方法在下面的 <a href="https://github.com/openai/cleverhans/blob/master/tutorials/mnist_tutorial_tf.md" target="_blank" rel="noopener">教程</a> 中有说明。</p><p>防御性蒸馏平滑模型的决策表面在对抗方向被攻击者利用。蒸馏是一种训练过程，其中一个模型被训练以预测由先前训练的另一个模型输出的概率。蒸馏最初由Hinton等人提出。在[HVD15]中，其目标是用一个小模型来模拟一个大型的、计算成本很高的模型。防御性蒸馏有一个不同的目标，即简单地使最终模型的反应更加平滑，所以即使两个模型的大小相同也能起作用。训练一个模型来预测另一个具有相同架构的模型输出看起来是违反直觉的。它的工作原理是，第一个模型是用“硬”标签（图像100％概率是狗而不是猫）训练，然后第二个模型用“软”标签（图像95％概率是狗而不是猫）训练。第二个蒸馏模型对于诸如快速梯度符号法[PM16]或基于雅可比行列式显著图法[PMW16]的攻击更为鲁棒。这两种攻击的实现也分别在<a href="https://github.com/openai/cleverhans/blob/master/tutorials/mnist_tutorial_tf.md" target="_blank" rel="noopener">这里</a> 和<a href="https://github.com/openai/cleverhans/blob/master/tutorials/mnist_tutorial_jsma.md" target="_blank" rel="noopener">这里</a>的<a href="https://github.com/openai/cleverhans" target="_blank" rel="noopener">cleverhans</a> 上提供。(已经404 。。2333)</p><h2 id="一个失败的防御梯度掩蔽-a-failed-defense-gradient-masking">一个失败的防御：“梯度掩蔽” (A failed defense: “gradient masking”)</h2><p>大多数对抗性样本构建技术使用模型的梯度来进行攻击。换句话说，一张飞机的照片，他们测试在图像空间中往哪个方向移动使得图片识别为“猫”的概率增加，然后他们往那个方向进行移动（换句话说，扰乱了输入）。这样新修改后的图像被误认为是猫。</p><p>但是，如果没有梯度，如果对图像进行微小的修改不会导致模型的输出发生变化呢？这似乎提供了一些防御，因为攻击者不知道怎样去“推”图像。</p><p>我们可以很容易想到一些非常微不足道的方法来摆脱梯度。例如，大多数图像分类模型可以以两种模式运行：一种模式是输出最可能类别的标识，另一种模式是输出概率。如果模型的输出是“99.9％的飞机，0.1％的猫”，那么输入的一个微小的变化会给输出带来一个微小的变化，梯度告诉我们哪些变化会增加“猫”类的概率。如果我们在输出模式只是“飞机”的模式下运行模型，那么对输入的一个微小的变化根本不会改变输出，而梯度不会告诉我们任何事情。让我们做一个思考实验，如何通过以“最有可能的类”模式而不是“概率模式”运行它来防御对抗性样本。攻击者再也不能找到分类为猫的扰乱输入，所以我们可能会有一些防御。不幸的是，之前被归类为猫的图片现在仍被归类为猫。如果攻击者可以猜测哪些点是对抗性样本，这些点将仍然会被错误的分类。我们并没有使模型更加鲁棒，我们只是给了攻击者更少的线索来找出模型防御的漏洞。更不幸的是，事实证明攻击者有一个非常好的策略来猜测防御漏洞的位置。攻击者可以训练他们自己的模型，一个具有梯度的光滑模型，为他们的模型制作对抗性样本，然后将这些对抗性样本用于我们的非光滑模型。很多时候，我们的模型也会错误地分类这些样本。最后，我们的思想实验表明，隐藏梯度并没有达到我们的目的。</p><p>因此，我们称之为有缺陷的防御策略梯度掩蔽，这个术语在[PMG16]中有介绍。执行梯度掩蔽的防御策略通常导致在特定方向和训练点的邻域中模型变得非常平滑，这使得攻击者难以找到攻击方向的梯度去扰乱输入。然而，攻击者可以训练一个替代模型：一个模仿防御模型的副本，通过观察防御模型分配给攻击者输入的标签。[PMG16]中介绍了执行这种模型提取攻击的过程。然后攻击者可以使用替代模型的梯度来找到被防御模型错误分类的对抗性样本。在下面的图中，我们再现[PMS16]中对梯度掩蔽的讨论，我们用一维ML问题来说明这种攻击策略。对于高维问题，梯度掩蔽现象会加剧，但难以描述。</p><p><img class="lazyload"  data-src="http://cleverhans.io/assets/gradient-masking.png"></p><p>令人惊讶的是，我们发现对抗性训练和防御性蒸馏都意外地表现出一种梯度掩蔽。如果我们将对抗性样本从一个模型转移到另一个模型，并且用这些防御之一进行训练，即使对第二个模型的直接攻击会失败，攻击通常也会成功[PMG16]。这表明两种训练方法都能使模型变平滑和消除梯度，而不是确保对多个点进行正确地分类。</p><h2 id="打地鼠游戏-playing-a-game-of-whack-a-mole">打“地鼠”游戏 (Playing a game of “whack-a-mole”)</h2><p>在“隐藏梯度”的游戏中，我们看到梯度掩蔽并不是很好的防御。它防御使用梯度的攻击者，但是如果攻击者知道我们正在使用这种防御，那么他们只需要切换到移植攻击。在安全术语中，这意味着梯度掩蔽不是一种自适应防御。</p><p>迄今为止提出的大多数针对对抗性样本的防御措施根本不起作用，但是有效的那些并不是自适应的。这意味着就像他们在玩一个打地鼠游戏一样：他们关闭了一些漏洞，但是让其他人打开。</p><p>对抗训练需要选择算法来产生对抗性样本。通常情况下，这个模型被训练成可以抵抗在一个步骤中产生的低成本对抗性样本，例如快速梯度符号方法一样。经过训练能抵制这些低成本对抗性样本，这个模型通常能成功地抵制同类低成本的新对抗性样本。如果我们使用高成本的、迭代的对抗性样本，就像[SZS13]中的那些例子，那么模型通常就会被愚弄。</p><p>保证适应性是具有挑战性的。灵感可以从差异隐私的框架中得到，它提供了随机算法不会暴露个人用户隐私的正式保证。这一保证不会对攻击者的知识或能力做出假设，因此能够面对未来由攻击者设计的假想攻击。</p><h2 id="为什么很难防御对抗性样本-why-is-it-hard-to-defend-against-adversarial-examples">为什么很难防御对抗性样本？ (Why is it hard to defend against adversarial examples?)</h2><p>对抗性样本很难防御，因为很难构建对抗性样本制定过程的理论模型。对抗性样本是许多ML模型（包括神经网络）的非线性和非凸的优化问题的解决方案。由于我们没有很好的理论工具去描述这些复杂的优化问题的解决方案，所以很难做出任何一种防御理论来排除一系列对抗性样本。</p><p>从另一个角度来看，对抗性样本很难防御，因为它们需要机器学习模型来为每一个可能的输入生成好的输出。大多数情况下，机器学习模型工作得很好，但只能处理遇到所有可能输入中的很少一部分。</p><p>由于可能的输入的量非常巨大，设计出真正自适应的防御是非常困难的。</p><h2 id="其他攻击和防御方法-other-attack-and-defense-scenarios">其他攻击和防御方法 (Other attack and defense scenarios)</h2><p>其他几种对机器学习的攻击也是难以防御。在本文中，我们专注于试图混淆机器学习模型测试过程的输入。但是其他类型的攻击是可能的，例如基于暗中修改训练数据的攻击，使得模型学习攻击者希望它进行的行为。</p><p>对抗性机器学习的一个亮点是差分隐私，我们实际上有理论上的观点，即某些训练算法可以防止攻击者从训练好的模型中恢复关于训练集的敏感信息。</p><p>将机器学习与攻击和防御都可能的其他场景进行比较是有趣的。</p><p>在密码学中，防御者似乎有优势。给定一系列合理的假设，例如加密算法的正确实现，防御者可以可靠地发送攻击者无法解密的消息。</p><p>在物理冲突中，攻击者似乎有优势。建造核弹比建造一个能够承受核爆的城市要容易得多。热力学的第二定律似乎意味着，如果防御要求将熵维持在某个阈值以下，那么即使没有明确的攻击者有意引起这种熵的增加，防御者也必然随着时间熵增加而最终失去。</p><p>监督学习的“没有免费午餐定理”[W96]指出，在所有可能的数据集进行平均，没有任何机器学习算法在测试时间的新点上比其他算法更好。乍一看，这似乎表明，所有的算法都同样容易受到对抗性样本。然而，“没有免费午餐定理”只适用于我们对问题结构不作假设的情况。当我们研究对抗性样本时，我们假设输入的小扰动不应该改变输出类别，所以一般形式的“没有免费午餐定理”并不适用。</p><p>正式揭露攻击者的鲁棒性和对清洁数据的模型表现之间的矛盾关系仍然是一个活跃的研究问题。在[PMS16]中，针对机器学习的对抗性样本的第一个“没有免费午餐定理”表明，在从有限的数据中学习时存在这样的矛盾。结果表明，防御者可以通过转向更丰富的假设类别来阻挠对抗性样本。然而，这种矛盾关系是由于没有合适的数据和学习算法来学习高保真模型所面临的挑战。</p><h2 id="总结">总结</h2><p>对抗性样本的研究是令人兴奋的，因为许多最重要的问题在理论和应用方面都是开放的。在理论上，还没有人知道防御对抗性样本是否是一个理论上没有希望的努力（如试图找到一个通用的机器学习算法），或者是否存在一个最优策略会使防御者更有利。（如在密码学和差分隐私）。在应用方面，还没有人设计出真正强大的防御算法，可以抵抗各种对抗性样本的攻击算法。我们希望我们的读者能够得到启发，解决其中的一些问题。</p><h2 id="references">References</h2><p>[BNL12] Biggio, B., Nelson, B., &amp; Laskov, P. (2012). Poisoning attacks against support vector machines. arXiv preprint arXiv:1206.6389.</p><p>[GSS14] Goodfellow, I. J., Shlens, J., &amp; Szegedy, C. (2014). Explaining and harnessing adversarial examples. arXiv preprint arXiv:1412.6572.</p><p>[HVD15] Hinton, Geoffrey, Oriol Vinyals, and Jeff Dean. “Distilling the knowledge in a neural network.” arXiv preprint arXiv:1503.02531 (2015).</p><p>[PM16] Papernot, N., &amp; McDaniel, P. (2016). On the effectiveness of defensive distillation. arXiv preprint arXiv:1607.05113.</p><p>[PMG16] Papernot, N., McDaniel, P., Goodfellow, I., Jha, S., Berkay Celik, Z., &amp; Swami, A. (2016). Practical Black-Box Attacks against Deep Learning Systems using Adversarial Examples. arXiv preprint arXiv:1602.02697.</p><p>[PMS16] Papernot, N., McDaniel, P., Sinha, A., &amp; Wellman, M. (2016). Towards the Science of Security and Privacy in Machine Learning. arXiv preprint arXiv:1611.03814.</p><p>[PMW16] Papernot, N., McDaniel, P., Wu, X., Jha, S., &amp; Swami, A. (2016, May). Distillation as a defense to adversarial perturbations against deep neural networks. In the 2016 IEEE Symposium on Security and Privacy (pp. 582-597).</p><p>[SZS13] Szegedy, C., Zaremba, W., Sutskever, I., Bruna, J., Erhan, D., Goodfellow, I., &amp; Fergus, R. (2013). Intriguing properties of neural networks. arXiv preprint arXiv:1312.6199.</p><p>[W96] Wolpert, David H. (1996). The lack of a priori distinction between learning algorithms. Neural Computation</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://www.cleverhans.io/security/privacy/ml/2017/02/15/why-attacking-machine-learning-is-easier-than-defending-it.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Is attacking machine learning easier than defending it?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;译文：&lt;a href=&quot;http://xungejiang.com/2017/11/29/translate-blog2/&quot;&gt;攻击机器学习比防御更容易吗?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原文写作日期：2017年3月15日 译文写作日期：2017年11月29日&lt;/p&gt;
&lt;p&gt;本文为&lt;a href=&quot;http://www.cleverhans.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;cleverhans-blog&lt;/a&gt;的第二篇博客，作者为 Ian Goodfellow 和 Nicolas Papernot，主要讲解 &lt;strong&gt;对抗性训练&lt;/strong&gt; 和 &lt;strong&gt;防御性蒸馏&lt;/strong&gt; 两种防御方法之间的优势与不足。&lt;/p&gt;
&lt;p&gt;xunge 是一名初学者，论文翻译中用到了 Google，并自己逐句检查过，但还是会有显得晦涩的地方，如有语法/专业名词翻译错误，还请见谅，并欢迎及时指出。&lt;/p&gt;
&lt;p&gt;转载请注明出处！&lt;/p&gt;
    
    </summary>
    
    
      <category term="论文向" scheme="https://xungejiang.com/categories/%E8%AE%BA%E6%96%87%E5%90%91/"/>
    
    
      <category term="translate" scheme="https://xungejiang.com/tags/translate/"/>
    
      <category term="cleverhans" scheme="https://xungejiang.com/tags/cleverhans/"/>
    
  </entry>
  
  <entry>
    <title>Windows 下 MySQL 绿色版安装详细教程</title>
    <link href="https://xungejiang.com//2017/10/17/mysql-install/"/>
    <id>https://xungejiang.com//2017/10/17/mysql-install/</id>
    <published>2017-10-17T01:01:42.000Z</published>
    <updated>2017-10-17T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL 绿色版安装详细操作步骤。</p><p>MySQL 绿色版优点是安装时间短，可在一部电脑兼容多个版本的 MySQL。</p><a id="more"></a><h2 id="下载">1. 下载。</h2><p>下载地址：<a href="http://downloads.mysql.com/archives/get/file/mysql-5.7.11-winx64.zip" target="_blank" rel="noopener">http://downloads.mysql.com/archives/get/file/mysql-5.7.11-winx64.zip</a></p><p>可以复制链接使用迅雷下载，速度较快。</p><h2 id="解压-mysql-压缩包">2. 解压 MySQL 压缩包</h2><p>解压到指定目录，我的是 “C:.11-winx64”</p><h2 id="修改配置文件">3. 修改配置文件</h2><p>将解压目录中的 <code>my-default.ini</code> 文件重命名为 <code>my.ini</code>，并将内容替换为以下即可</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 注意：路径是反斜线，也可以改为两个正斜线，还可以加上双引号</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span> = C:\MySQL\mysql-<span class="number">5.7</span>.<span class="number">11</span>-winx64</span><br><span class="line"><span class="comment"># 设置 mysql 数据库的数据的存放目录，必须是 data</span></span><br><span class="line"><span class="attr">datadir</span> = C:\MySQL\mysql-<span class="number">5.7</span>.<span class="number">11</span>-winx64\data</span><br><span class="line"><span class="comment"># mysql端口</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sql_mode</span> = NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务端编码格式</span></span><br><span class="line"><span class="attr">character_set_server</span> = utf8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不加这句话可能报错</span></span><br><span class="line"><span class="attr">innodb_flush_method</span> = normal</span><br></pre></td></tr></table></figure><h2 id="安装mysql服务">4. 安装MySQL服务</h2><p>以管理员身份运行 cmd</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:: 进入 `C:\MySQL\mysql-5.7.11-winx64\bin` 目录下，</span><br><span class="line">cd C:\MySQL\mysql-5.7.11-winx64\bin</span><br><span class="line"></span><br><span class="line">:: 安装 MySQL 服务</span><br><span class="line">mysqld -install</span><br><span class="line">:: 显示 “Service successfully installed.” 即成功</span><br><span class="line"></span><br><span class="line">:: 初始化 MySQL (若安装目录有 data 文件夹则删除)</span><br><span class="line">mysqld --initialize</span><br><span class="line"></span><br><span class="line">:: 启动 MySQL 服务</span><br><span class="line">net start mysql</span><br><span class="line">:: 显示 “MySQL 服务正在启动 .”</span><br><span class="line">:: 显示 “MySQL 服务已经启动成功。”</span><br><span class="line">:: 若启动失败，在任务管理器中找到 “mysqld.exe” 进程，并删除</span><br></pre></td></tr></table></figure><h2 id="更改默认密码">5. 更改默认密码</h2><p>打开 MySQL 安装目录，打开 data 目录，有一个 <code>.err</code> 后缀名的文件，用编辑器打开</p><p>如果每一行都是 <code>[Warning]</code>，没有 <code>[Error]</code>，就说明安装正确，并且最后一行应该如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Note] A temporary password is generated for root@localhost: oK-R(foa&gt;4by</span><br></pre></td></tr></table></figure><p>后面 12 个字符为默认生成初始密码，复制</p><p>打开 cmd ，输入以下命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">:: 显示 “Enter password:” 后粘贴密码</span><br></pre></td></tr></table></figure><p>若出现 “Welcome to the MySQL monitor. Commands end with ; or . ...” 则说明密码正确</p><p>若出现 “ERROR 1045 (28000): Access denied for user 'root'@'localhost' (using password: YES)” 则说明密码错误，编辑 MySQL 配置文件 <code>my.ini</code> ，在 <code>[mysqld]</code> 这个条目下加入 <code>skip-grant-tables</code>，保存退出后重启 MySQL</p><p>密码正确后更改默认密码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;newPassword&apos;;</span><br></pre></td></tr></table></figure><p><code>newPassword</code> 更改为新密码</p><h2 id="卸载-mysql-服务">6. 卸载 MySQL 服务</h2><p>进入 <code>C:\MySQL\mysql-5.7.11-winx64\bin</code> 目录下，输入</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld -remove</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc delete mysql</span><br></pre></td></tr></table></figure><p>执行卸载服务。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL 绿色版安装详细操作步骤。&lt;/p&gt;
&lt;p&gt;MySQL 绿色版优点是安装时间短，可在一部电脑兼容多个版本的 MySQL。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="MySQL" scheme="https://xungejiang.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>《跟老齐学 Python 轻松入门》学习笔记--1.基本对象类型</title>
    <link href="https://xungejiang.com//2017/10/05/python-easy/"/>
    <id>https://xungejiang.com//2017/10/05/python-easy/</id>
    <published>2017-10-05T01:01:42.000Z</published>
    <updated>2017-10-05T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文根据 《跟老齐学python轻松入门》 的知识点整理，主要是代码打了一遍做了总结，非常零基础。</p><a id="more"></a><h2 id="数和数的运算">数和数的运算</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id()   # 查看每个对象的内存地址</span><br><span class="line">help() # 查看其它函数文档</span><br><span class="line">type() # 查看对象类型</span><br><span class="line">dir()  # 查看模块中函数名称</span><br></pre></td></tr></table></figure><ul><li>python 自动解决大整数问题</li></ul><h3 id="加法">加法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; 4.0 + 2</span><br><span class="line">6.0</span><br></pre></td></tr></table></figure><h3 id="乘法">乘法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 9^2</span><br><span class="line">&gt;&gt;&gt; 9 ** 2</span><br><span class="line">81</span><br><span class="line"></span><br><span class="line"># 2 * 10^3</span><br><span class="line">&gt;&gt;&gt; 2e3</span><br><span class="line">2000.0</span><br></pre></td></tr></table></figure><h3 id="除法">除法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; 5 / 2</span><br><span class="line">2.5</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; 5 // 2</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="异常计算">异常计算</h3><p>浮点数十进制转化为二进制造成误差 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; 10.0 / 3</span><br><span class="line">3.3333333333333335</span><br></pre></td></tr></table></figure></p><p>解决方法1：使用 decimal 模块(小数)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import decimal</span><br><span class="line">&gt;&gt;&gt; a = decimal.Decimal(&quot;10.0&quot;)</span><br><span class="line">&gt;&gt;&gt; b = decimal.Decimal(&quot;3&quot;)</span><br><span class="line">&gt;&gt;&gt; a / b</span><br><span class="line">Decimal(&apos;3.333333333333333333333333333&apos;)</span><br></pre></td></tr></table></figure><p>解决方法1：使用 fractions 模块(分数)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from fractions import Fraction  </span><br><span class="line"># fractions 是一个大模块(库)，</span><br><span class="line"># 只想用其中的子模块 Fraction</span><br><span class="line">&gt;&gt;&gt; Fraction(10, 3)</span><br><span class="line">Fraction(10, 3)</span><br><span class="line">&gt;&gt;&gt; Fraction(10, 8)</span><br><span class="line">Fraction(5, 4)</span><br></pre></td></tr></table></figure><h3 id="余数">余数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; 5 % 2</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; 5.0 % 2</span><br><span class="line">1.0</span><br><span class="line">&gt;&gt;&gt; </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; divmod(5, 2)</span><br><span class="line">(2, 1) # 返回商和余数</span><br></pre></td></tr></table></figure><h3 id="四舍五入">四舍五入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; round(1.23456, 2)</span><br><span class="line">1.23</span><br></pre></td></tr></table></figure><p>浮点数十进制转化为二进制造成误差</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; round(1.2345, 3)</span><br><span class="line">1.234  # 应该是 1.235</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; round(2.235, 2)</span><br><span class="line">2.23   # 应该是 2.24</span><br></pre></td></tr></table></figure><h3 id="math-模块">math 模块</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import math</span><br><span class="line">&gt;&gt;&gt; math.pi</span><br><span class="line">3.141592653589793</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; 4 ** 2</span><br><span class="line">16</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; math.pow(4, 2)</span><br><span class="line">16.0</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; math.sqrt(9)</span><br><span class="line">3.0</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; math.floor(3.14)</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; math.floor(3.92)</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; math.fabs(-2)</span><br><span class="line">2.0</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; abs(-2)</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; math.fmod(5, 3)</span><br><span class="line">2.0</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; 5 % 3</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h2 id="字符串">字符串</h2><h3 id="键盘输入">键盘输入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># input() 函数进行输入赋值</span><br><span class="line">&gt;&gt;&gt; age = input(&quot;how old are you?&quot;)</span><br><span class="line">how old are you?10  # 提示输入内容，通过键盘输入10</span><br><span class="line">&gt;&gt;&gt; age</span><br><span class="line">&apos;10&apos;</span><br><span class="line">&gt;&gt;&gt; type(age)</span><br><span class="line">&lt;class &apos;str&apos;&gt;</span><br></pre></td></tr></table></figure><h3 id="原始字符串">原始字符串</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; dos = &quot;c:\news&quot;</span><br><span class="line">&gt;&gt;&gt; print(dos)</span><br><span class="line">c:</span><br><span class="line">ews</span><br><span class="line">&gt;&gt;&gt; dos = &quot;c:\\news&quot;  # 转义字符解决</span><br><span class="line">&gt;&gt;&gt; print(dos)</span><br><span class="line">c:\news</span><br><span class="line">&gt;&gt;&gt; print(r&quot;c:\news&quot;) # r 开头的字符串是原始字符串</span><br><span class="line">c:\news</span><br></pre></td></tr></table></figure><h3 id="字符串切片">字符串切片</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; lang = &apos;study python&apos;</span><br><span class="line">&gt;&gt;&gt; b = lang[1:]</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&apos;tudy python&apos;</span><br><span class="line">&gt;&gt;&gt; c = lang[:]</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">&apos;study python&apos;</span><br><span class="line">&gt;&gt;&gt; d = lang[:10]</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&apos;study pyth&apos;</span><br><span class="line">&gt;&gt;&gt; e = lang[0:10]</span><br><span class="line">&gt;&gt;&gt; e</span><br><span class="line">&apos;study pyth&apos;</span><br><span class="line">&gt;&gt;&gt; f = lang[1:12]</span><br><span class="line">&gt;&gt;&gt; f</span><br><span class="line">&apos;tudy python&apos;</span><br></pre></td></tr></table></figure><h3 id="连接字符串">连接字符串</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;py&quot; + &quot;thon&quot;</span><br><span class="line">&apos;python&apos;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; a = 1996</span><br><span class="line">&gt;&gt;&gt; b = &quot;xunge&quot;</span><br><span class="line">&gt;&gt;&gt; a + b</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">TypeError: unsupported operand type(s) for +: &apos;int&apos; and &apos;str&apos;</span><br><span class="line">&gt;&gt;&gt; str(a) + b</span><br><span class="line">&apos;1996xunge&apos;</span><br><span class="line">&gt;&gt;&gt; repr(a) + b</span><br><span class="line">&apos;1996xunge&apos;</span><br><span class="line"></span><br><span class="line"># str() 与 repr() 区别:</span><br><span class="line"># str() 转化后的结果更适合与人进行交互</span><br><span class="line"># repr()转化后的结果则可以被 Python的 解释器阅读</span><br><span class="line">&gt;&gt;&gt; s = &apos;xunge \n&apos;</span><br><span class="line">&gt;&gt;&gt; str(s)</span><br><span class="line">&apos;xunge \n&apos;</span><br><span class="line">&gt;&gt;&gt; repr(s)</span><br><span class="line">&quot;&apos;xunge \\n&apos;&quot;</span><br><span class="line">&gt;&gt;&gt; print(str(s))</span><br><span class="line">xunge </span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print(repr(s))</span><br><span class="line">&apos;xunge \n&apos;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="判断元素是否在字符串中">判断元素是否在字符串中</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; str = &quot;python&quot;</span><br><span class="line">&gt;&gt;&gt; &quot;th&quot; in str</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h3 id="最值和比较">最值和比较</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; max(str)</span><br><span class="line">&apos;y&apos;</span><br><span class="line">&gt;&gt;&gt; min(str)</span><br><span class="line">&apos;h&apos;</span><br><span class="line">&gt;&gt;&gt; ord(&apos;y&apos;) # 字符转化为编码</span><br><span class="line">121</span><br><span class="line">&gt;&gt;&gt; chr(121) # 编码转化为字符</span><br><span class="line">&apos;y&apos;</span><br></pre></td></tr></table></figure><h3 id="测量长度">测量长度</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; len(str)</span><br><span class="line">6</span><br></pre></td></tr></table></figure><h3 id="字符串格式化输出">字符串格式化输出</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; &quot;I love %s&quot; % &quot;gong yu xin&quot;</span><br><span class="line">&apos;I love gong yu xin&apos;</span><br><span class="line">&gt;&gt;&gt; &quot;I love &#123;0&#125;.&#123;1&#125;.&#123;2&#125;&quot;.format(&quot;gong&quot;, &quot;yu&quot;, &quot;xin&quot;)</span><br><span class="line">&apos;I love gong.yu.xin&apos;</span><br><span class="line">&gt;&gt;&gt; &quot;I love &#123;0:8&#125;.&#123;1:&gt;8&#125;.&#123;2:^8&#125;&quot;.format(&quot;gong&quot;, &quot;yu&quot;, &quot;xin&quot;)</span><br><span class="line">&apos;I love gong    .      yu.  xin   &apos;</span><br><span class="line">&gt;&gt;&gt; &quot;I love &#123;0:.2&#125;.&#123;1:&gt;8.2&#125;.&#123;2:^4.2&#125;&quot;.format(&quot;gong&quot;, &quot;yu&quot;, &quot;xin&quot;)</span><br><span class="line">&apos;I love go.      yu. xi &apos;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; &quot;She is &#123;0:d&#125; years old and &#123;1:f&#125;cm&quot;.format(21, 175.1221)</span><br><span class="line">&apos;She is 21 years old and 175.122100cm&apos;</span><br><span class="line">&gt;&gt;&gt; &quot;She is &#123;0:4d&#125; years old and &#123;1:7.2f&#125;cm&quot;.format(21, 175.1221)</span><br><span class="line">&apos;She is   21 years old and  175.12cm&apos;</span><br><span class="line">&gt;&gt;&gt; &quot;She is &#123;0:04d&#125; years old and &#123;1:07.2f&#125;cm&quot;.format(21, 175.1221)</span><br><span class="line">&apos;She is 0021 years old and 0175.12cm&apos;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; &quot;I like &#123;lang&#125; and &#123;name&#125;&quot;.format(lang = &quot;python&quot;, name = &quot;gongyuxin&quot;)</span><br><span class="line">&apos;I like python and gongyuxin&apos;</span><br><span class="line">&gt;&gt;&gt; data = &#123;&quot;name&quot;:&quot;gongyuxin&quot;, &quot;age&quot;:21&#125;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;name&#125; is &#123;age&#125;&quot;.format(**data)</span><br><span class="line">&apos;gongyuxin is 21&apos;</span><br></pre></td></tr></table></figure><h3 id="常用字符串方法">常用字符串方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 判断是否全是字母</span><br><span class="line">&gt;&gt;&gt; &quot;python&quot;.isalpha()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &quot;python2&quot;.isalpha()</span><br><span class="line">False</span><br><span class="line"></span><br><span class="line"># 根据分隔符分割字符串</span><br><span class="line">&gt;&gt;&gt; s = &quot;I love gong yu xin&quot;</span><br><span class="line">&gt;&gt;&gt; s.split(&quot; &quot;)</span><br><span class="line">[&apos;I&apos;, &apos;love&apos;, &apos;gong&apos;, &apos;yu&apos;, &apos;xin&apos;]</span><br><span class="line"></span><br><span class="line"># 去掉字符串两头的空格</span><br><span class="line">&gt;&gt;&gt; s.strip()  # 去掉两边空格</span><br><span class="line">&apos;gong&apos;</span><br><span class="line">&gt;&gt;&gt; s.lstrip() # 去掉左边空格</span><br><span class="line">&apos;gong &apos;</span><br><span class="line">&gt;&gt;&gt; s.rstrip() # 去掉右边空格</span><br><span class="line">&apos; gong&apos;</span><br><span class="line"></span><br><span class="line"># 字符大小写转换</span><br><span class="line">&gt;&gt;&gt; a = &quot;gong yu xin&quot;</span><br><span class="line">&gt;&gt;&gt; b = a.upper()  # 小写字母转换为大写字母</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&apos;GONG YU XIN&apos;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&apos;gong yu xin&apos;      # 原对象未变</span><br><span class="line">&gt;&gt;&gt; c = b.lower()  # 大写字母转换为小写字母</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">&apos;gong yu xin&apos;</span><br><span class="line">&gt;&gt;&gt; c.capitalize() # 把字符串的第一个字母变成大写</span><br><span class="line">&apos;Gong yu xin&apos;</span><br><span class="line">&gt;&gt;&gt; d = a.title()  # 每个单词首字母大写</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">&apos;Gong Yu Xin&apos;</span><br><span class="line">&gt;&gt;&gt; a.islower()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; b.isupper()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; c.islower()</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; d.istitle()</span><br><span class="line">True</span><br><span class="line"></span><br><span class="line"># join() 拼接字符串</span><br><span class="line">&gt;&gt;&gt; b = &quot;www.xungejiang.com&quot;</span><br><span class="line">&gt;&gt;&gt; c = b.split(&quot;.&quot;)</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">[&apos;www&apos;, &apos;xungejiang&apos;, &apos;com&apos;]</span><br><span class="line">&gt;&gt;&gt; &quot;.&quot;.join(c)</span><br><span class="line">&apos;www.xungejiang.com&apos;</span><br></pre></td></tr></table></figure><h2 id="列表">列表</h2><h3 id="列表切片">列表切片</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a = [&apos;gong&apos;, 831, &apos;xungejiang.com&apos;]</span><br><span class="line">&gt;&gt;&gt; a[1:]</span><br><span class="line">[831, &apos;xungejiang.com&apos;]</span><br><span class="line">&gt;&gt;&gt; a[2][11:14]</span><br><span class="line">&apos;com&apos;</span><br><span class="line"></span><br><span class="line"># -1 是右边第一个</span><br><span class="line">&gt;&gt;&gt; a[-1]</span><br><span class="line">&apos;xungejiang.com&apos;</span><br><span class="line">&gt;&gt;&gt; a[-3:-1]    # a[(3-3):(3-1)] = a[0:2]</span><br><span class="line">[&apos;gong&apos;, 831]</span><br><span class="line"></span><br><span class="line"># 完整写法 seq[start:end:step]</span><br><span class="line">&gt;&gt;&gt; alst = [1, 2, 3, 4, 5, 6]</span><br><span class="line">&gt;&gt;&gt; alst[::2]</span><br><span class="line">[1, 3, 5]</span><br><span class="line">&gt;&gt;&gt; alst[::1]</span><br><span class="line">[1, 2, 3, 4, 5, 6]</span><br><span class="line">&gt;&gt;&gt; alst[::-1]   # 反转</span><br><span class="line">[6, 5, 4, 3, 2, 1]</span><br><span class="line">&gt;&gt;&gt; alst[::-2]</span><br><span class="line">[6, 4, 2]</span><br><span class="line"></span><br><span class="line"># 使用 reversed() 函数将原来序列对象反转</span><br><span class="line"># 使用 list() 函数将迭代对象转换为列表显示</span><br><span class="line">&gt;&gt;&gt; list(reversed(alst))</span><br><span class="line">[6, 5, 4, 3, 2, 1]</span><br><span class="line">&gt;&gt;&gt; list(reversed(&quot;abcd&quot;))</span><br><span class="line">[&apos;d&apos;, &apos;c&apos;, &apos;b&apos;, &apos;a&apos;]</span><br></pre></td></tr></table></figure><h3 id="列表基本操作">列表基本操作</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; lst = [&apos;jiang&apos;, &apos;xun&apos;, &apos;zhi&apos;]</span><br><span class="line"># len() 列表长度</span><br><span class="line">&gt;&gt;&gt; len(lst)</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; alst = [&apos;gong&apos;, &apos;yu&apos;, &apos;xin&apos;]</span><br><span class="line"># &quot;+&quot; 连接两个序列</span><br><span class="line">&gt;&gt;&gt; lst + alst</span><br><span class="line">[&apos;jiang&apos;, &apos;xun&apos;, &apos;zhi&apos;, &apos;gong&apos;, &apos;yu&apos;, &apos;xin&apos;]</span><br><span class="line"># &quot;*&quot; 重复序列元素</span><br><span class="line">&gt;&gt;&gt; lst * 3</span><br><span class="line">[&apos;jiang&apos;, &apos;xun&apos;, &apos;zhi&apos;, &apos;jiang&apos;, &apos;xun&apos;, &apos;zhi&apos;, &apos;jiang&apos;, &apos;xun&apos;, &apos;zhi&apos;]</span><br><span class="line"># 序列是否包含该元素</span><br><span class="line">&gt;&gt;&gt; &quot;jiang&quot; in lst</span><br><span class="line">True</span><br><span class="line"># 按照元素字典顺序进行比较</span><br><span class="line">&gt;&gt;&gt; max(lst)</span><br><span class="line">&apos;zhi&apos;</span><br><span class="line">&gt;&gt;&gt; min(lst)</span><br><span class="line">&apos;jiang&apos;</span><br><span class="line"></span><br><span class="line"># 修改列表元素</span><br><span class="line"># list.append(x) 向列表中追加元素 x</span><br><span class="line">&gt;&gt;&gt; cities = [&apos;harbin&apos;, &apos;changchun&apos;]</span><br><span class="line">&gt;&gt;&gt; cities[1] = &apos;beijing&apos;</span><br><span class="line">&gt;&gt;&gt; cities</span><br><span class="line">[&apos;harbin&apos;, &apos;beijing&apos;]</span><br><span class="line">&gt;&gt;&gt; cities.append(&apos;shanghai&apos;)</span><br><span class="line">&gt;&gt;&gt; cities</span><br><span class="line">[&apos;harbin&apos;, &apos;beijing&apos;, &apos;shanghai&apos;]</span><br><span class="line"></span><br><span class="line"># list.extend([L]) 向列表中追加列表 L 的元素</span><br><span class="line">&gt;&gt;&gt; la = [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; lb = [&apos;jiang&apos;, &apos;gong&apos;]</span><br><span class="line">&gt;&gt;&gt; la.extend(lb)</span><br><span class="line">&gt;&gt;&gt; la</span><br><span class="line">[1, 2, 3, &apos;jiang&apos;, &apos;gong&apos;]</span><br><span class="line">&gt;&gt;&gt; lb</span><br><span class="line">[&apos;jiang&apos;, &apos;gong&apos;]</span><br><span class="line"></span><br><span class="line"># append() 和 extend() 的区别</span><br><span class="line"># append() 是整建制的追加</span><br><span class="line"># extend() 是个体化扩编</span><br><span class="line">&gt;&gt;&gt; alst = [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; blst = [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; clst = [&quot;jiang&quot;, &quot;gong&quot;]</span><br><span class="line">&gt;&gt;&gt; alst.append(clst)</span><br><span class="line">&gt;&gt;&gt; alst</span><br><span class="line">[1, 2, 3, [&apos;jiang&apos;, &apos;gong&apos;]]</span><br><span class="line">&gt;&gt;&gt; len(alst)</span><br><span class="line">4</span><br><span class="line">&gt;&gt;&gt; blst.extend(clst)</span><br><span class="line">&gt;&gt;&gt; blst</span><br><span class="line">[1, 2, 3, &apos;jiang&apos;, &apos;gong&apos;]</span><br><span class="line">&gt;&gt;&gt; len(blst)</span><br><span class="line">5</span><br><span class="line"></span><br><span class="line"># list.count(x) x 元素出现次数</span><br><span class="line">&gt;&gt;&gt; la = [1, 2, 2, 1, 3, 1]</span><br><span class="line">&gt;&gt;&gt; la.count(1)</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line"># list.insert(i, x) 将 x 插入到索引是 i 的元素前面</span><br><span class="line">&gt;&gt;&gt; lst = [&quot;gong&quot;, &quot;xin&quot;]</span><br><span class="line">&gt;&gt;&gt; lst.insert(1, &quot;yu&quot;)</span><br><span class="line">&gt;&gt;&gt; lst</span><br><span class="line">[&apos;gong&apos;, &apos;yu&apos;, &apos;xin&apos;]</span><br><span class="line"></span><br><span class="line"># list.remove(x) 删除第一次出现的 x 元素，无返回值</span><br><span class="line">&gt;&gt;&gt; lst = [&quot;python&quot;, &quot;c++&quot;, &quot;python&quot;, &quot;java&quot;]</span><br><span class="line">&gt;&gt;&gt; lst.remove(&quot;python&quot;)</span><br><span class="line">&gt;&gt;&gt; lst</span><br><span class="line">[&apos;c++&apos;, &apos;python&apos;, &apos;java&apos;]</span><br><span class="line"></span><br><span class="line"># list.pop([i]) 删除索引为 i 的元素，并将删除元素作为返回值。</span><br><span class="line"># i 为空则删除列表最后一个</span><br><span class="line">&gt;&gt;&gt; lst.pop(1)</span><br><span class="line">&apos;python&apos;</span><br><span class="line">&gt;&gt;&gt; lst</span><br><span class="line">[&apos;c++&apos;, &apos;java&apos;]</span><br><span class="line"></span><br><span class="line"># list.reverse(L) 将元素顺序反转，不返回值</span><br><span class="line">&gt;&gt;&gt; a = [8, 3, 1, 4, 3, 0]</span><br><span class="line">&gt;&gt;&gt; a.reverse()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[0, 3, 4, 1, 3, 8]</span><br><span class="line"># reversed(L) 实现对列表的反向迭代</span><br><span class="line">&gt;&gt;&gt; b = reversed(a)</span><br><span class="line">&gt;&gt;&gt; list(b)</span><br><span class="line">[8, 3, 1, 4, 3, 0]</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&lt;list_reverseiterator object at 0x0000015DFC053710&gt;</span><br><span class="line"></span><br><span class="line"># list.sort() 对列表进行排序</span><br><span class="line">&gt;&gt;&gt; a.sort()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[0, 1, 3, 3, 4, 8]</span><br><span class="line"># 从大到小排序</span><br><span class="line">&gt;&gt;&gt; a.sort(reverse = True)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[8, 4, 3, 3, 1, 0]</span><br><span class="line"># 按字符串长度排序</span><br><span class="line">&gt;&gt;&gt; lst = [&quot;java&quot;, &quot;python&quot;, &quot;c++&quot;, &quot;basic&quot;, &quot;pascal&quot;]</span><br><span class="line">&gt;&gt;&gt; lst.sort(key = len)</span><br><span class="line">&gt;&gt;&gt; lst</span><br><span class="line">[&apos;c++&apos;, &apos;java&apos;, &apos;basic&apos;, &apos;python&apos;, &apos;pascal&apos;]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文根据 《跟老齐学python轻松入门》 的知识点整理，主要是代码打了一遍做了总结，非常零基础。&lt;/p&gt;
    
    </summary>
    
    
      <category term="知识点" scheme="https://xungejiang.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Python" scheme="https://xungejiang.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>群晖 synology 的 SHR 、raid1 、raid0 、raid1 、raid5 的区别</title>
    <link href="https://xungejiang.com//2017/08/03/shr-raid015/"/>
    <id>https://xungejiang.com//2017/08/03/shr-raid015/</id>
    <published>2017-08-03T01:01:42.000Z</published>
    <updated>2017-08-03T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料 <a href="http://www.goodnas.net/forum.php?mod=viewthread&amp;tid=24" target="_blank" rel="noopener">http://www.goodnas.net/forum.php?mod=viewthread&amp;tid=24</a></p><p>本文主要讲述群晖的 SHR 、raid1 、raid0 、raid1 、raid5 之间的区别。</p><a id="more"></a><h2 id="shr">SHR</h2><p>SHR 是 <strong>Synology Hybrid RAID</strong> 的缩写；当NAS里面只有一颗硬盘的时候，磁盘阵列的模式为 basic ，无数据保护。当再添加为一个硬盘的时候磁盘阵列的模式自动转换成类似 raid1 模式，空间大小不变，但是多了个数据保护。当再加入一个硬盘的时候会自动转换成类似 raid5 模式（前提是你的NAS可以放3个及以上的硬盘），容量为 N-1 个硬盘的总容量，假如 3 个 3Ｔ 的硬盘，此时的SHR空间总容量为 <code>(3 - 1) * 3T</code> 为 <code>6T</code> 的空间，后期可以慢慢加硬盘数据也不影响的。</p><p><strong>SHR 优点</strong>：在于方便不熟悉磁盘阵列的玩家，傻瓜简单式的帮你组好磁盘阵列，而且还能合理利用容量大小不一的硬盘，减少浪费，raid 是按照最小的硬盘算，而 SHR 则可以合理利用减少浪费，智能 raid 推荐使用~</p><p>附计算网址：<a href="https://www.synology.cn/zh-cn/support/RAID_calculator" target="_blank" rel="noopener">https://www.synology.cn/zh-cn/support/RAID_calculator</a>。</p><h2 id="basic">basic</h2><p>basic 是基本模式，一个硬盘一个独立的空间。</p><h2 id="raid0">raid0</h2><p>raid0：无数据保护，空间最大化利用，当在NAS中运行的时候就和JBOD属性差不多，就不再多介绍，raid0是将多个磁盘合并成一个大的磁盘，不具有冗余，并行 <code>I / O</code>，速度最快。它是将多个磁盘并列起来，成为一个大磁盘。</p><p><strong>raid0 优点</strong>：传输速度快且空间最大化利用，传输速度理论数值是一般raid的2倍，实际速度为1.6倍。</p><p><strong>raid0 缺点</strong>：没有冗余，数据存入都是以拆分打散的方式放到不同的硬盘，所以说当一块硬盘坏掉的时候所以的数据都会丢失！慎用~</p><h2 id="raid1">raid1</h2><p>raid1 是镜像备份，实际容量为总空间的一半，N/2，如果有2块3T的硬盘，总容量为（3+3）/2。</p><p><strong>raid1 优点</strong>：有数据保护，让硬盘坏掉一个时，数据还在，硬盘还可以正常读取。</p><p><strong>rard1 缺点</strong>：空间折一半，放放重要数据资料，照片，放电影就不划算啦！</p><h2 id="raid5">raid5</h2><p>raid5 是一种既考虑到数据保护又考虑到硬盘运作成本的解决方案，raid5不对数据进行存储，而是把奇偶校检信息存储到不同的磁盘上。损坏后，用奇偶校检信息和对应的数据去恢复损坏的数据，实际空间为 N-1 ，上面有介绍，假如有3块3T的硬盘，实际空间为 <code>( 3 - 1 ) * 3T</code> 为 <code>6T</code> ，说直白点：就是假如4个硬盘，3个放数据，1个备份，值得强调的一点就是4个硬盘不分主次，可以任意坏一块硬盘。</p><p><strong>raid5 优点</strong>：数据安全和成本兼顾，是4盘位NAS玩家的首选。</p><p><strong>raid5 缺点</strong>：只有一个硬容错，当硬盘坏掉一个是要及时更换。</p><h2 id="raid6">raid6</h2><p>raid6 和 riad5 原理差不多，riad5 是 <code>N - 1</code> 可以任意坏一个硬盘，raid6 则是可以任意坏 2 个硬盘，<code>N - 2</code> 的模式，适合盘位很多的玩家。</p><p>还有 raid2、raid3、raid4、raid6、raid7、raid50、raid53，NAS不支持，感兴趣的朋友可自行百度。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考资料 &lt;a href=&quot;http://www.goodnas.net/forum.php?mod=viewthread&amp;amp;tid=24&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.goodnas.net/forum.php?mod=viewthread&amp;amp;tid=24&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文主要讲述群晖的 SHR 、raid1 、raid0 、raid1 、raid5 之间的区别。&lt;/p&gt;
    
    </summary>
    
    
      <category term="知识点" scheme="https://xungejiang.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="NAS" scheme="https://xungejiang.com/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>群晖 NAS 简单体验</title>
    <link href="https://xungejiang.com//2017/07/31/NAS-introduction/"/>
    <id>https://xungejiang.com//2017/07/31/NAS-introduction/</id>
    <published>2017-07-31T01:01:42.000Z</published>
    <updated>2017-07-31T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>好吧，最近家人出去玩不带我，自己在家无聊买了一个 <code>群晖（Synology）DS216play</code> ，<code>2017-7-29</code> 京东购买，下午就到了，狗东物流就是快啊。</p><p>买的是带 <strong>两块</strong> 希捷 <strong>4T</strong> 硬盘的套装，一共 <code>3799</code> 元。单买是 (2250 + 1299 * 2) = 4848 元，相当于赠了一块硬盘，还算挺合适的，当然比 618 贵 100+ 。</p><a id="more"></a><p>NAS (Network Attached Storage) 网络附属存储，也叫网络存储器，是专门用来存储数据的服务器，家用的主要功能其实就是私有云、照片电影的存储等。在各大网盘都被封掉的时代，买一个 NAS 存放一些私有文件还是一个比较好的选择。</p><p>传说中群晖是买软件送硬件，一是说群晖性价比低，二是说群晖软件做的确实良心，各大平台都有，插件也比较全，可玩性比较高。</p><h2 id="配置-群晖">配置 群晖</h2><p><code>DS216play</code> 是双硬盘位，不支持热插拔硬盘位。个人认为双盘位在家庭中使用足够了，8T (4T * 2) 的硬盘也够使好长时间了。</p><p>把两个硬盘装好后，拧上螺丝，插上电源和网线(连路由器或交换机的 LAN 口)，按下电源键就可以开机啦~</p><p>在连接网络的电脑浏览器输入网址 <a href="http://find.synology.com" target="_blank" rel="noopener">http://find.synology.com</a> 进行初次配置，设置群晖账号密码等。</p><p>之后会提示你安装推荐插件，先点取消，因为我们还要更改一下 RAID 格式。</p><h2 id="选择-raid-类型">选择 RAID 类型</h2><p>详细的 <code>shr</code> <code>basic</code> <code>raid0</code> <code>raid1</code> <code>raid5</code> <code>raid6</code> 类型介绍参照下面的链接 <a href="http://xungejiang.com/2017/08/03/shr-raid015/">http://xungejiang.com/2017/08/03/shr-raid015/</a></p><p>安装完系统后默认为 <code>shr</code> 格式，双盘位时为 raid1 模式，多了数据备份功能，但是容量只有一半，也就是说 2 块 4T 的硬盘只有 4T 的容量。由于是家庭使用，没有太重要的文件，所以没必要进行数据备份，需要把 <code>shr</code> 模式改为 <code>basic</code> 模式，这样可用容量才是 8T。</p><p>具体方法如下。</p><p>如果 NAS 里已经有一些重要的资料不想拿另一个硬盘备份，可以参照这篇博客 <a href="http://support-cn.synology.me/wordpress/?p=589" target="_blank" rel="noopener">如何将raid1（SHR）降级为basic</a>。</p><p>不过如果你已经把资料都备份了，推荐恢复出厂设置。方法如下：</p><p><code>控制面板</code> -&gt; <code>更新和还原</code> -&gt; <code>重置</code> -&gt; <code>删除所有数据</code>。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-7-31/002.png"></p><p>如果你已经安装过插件，不建议你选择 <code>删除存储空间</code> 进行重置，因为插件容易卸载不干净，影响后续使用。所以最好的方法还是恢复出厂设置。</p><p>变为新系统后，在 <code>存储空间管理员</code> -&gt; <code>存储空间</code> -&gt; <code>删除</code> -&gt; <code>删除</code> 将系统默认的 shr 删掉。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-7-31/001.png"></p><p>之后点 <code>新增</code> -&gt; <code>自定义</code> -&gt; <code>使用所有硬盘容量的存储空间</code> -&gt; <code>勾选第一个硬盘</code> -&gt; <code>确定</code> -&gt; <code>Basic</code> -&gt; <code>否</code> -&gt; <code>下一步</code> -&gt; <code>应用</code></p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-7-31/003.png"> <img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-7-31/004.png"> <img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-7-31/005.png"> <img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-7-31/006.png"> <img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-7-31/007.png"> <img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-7-31/008.png"> <img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-7-31/009.png"> <img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-7-31/010.png"> <img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-7-31/011.png"></p><p>同理，第二块硬盘重复上述操作，只是在第四步勾选第二块硬盘。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-7-31/012.png"></p><h2 id="套件中心-初体验">套件中心 初体验</h2><p>群晖的软件可谓是真的良心，很多插件都已经集成，可直接下载，兼容性很强。</p><p><code>存储空间分析器</code>：可查看文件类型、重复文件等。</p><p><code>Cloud Station Server</code>：可下载 <code>Cloud Station Drive</code> 和 <code>Cloud Station Backup</code> 两个客户端，区别是 <code>Drive</code> 是 <strong>双向同步</strong>，保证云端和本地一致；而 <code>Backup</code> 只有新增才会同步，删除本地云端不会删除。</p><p><code>Cloud Sync</code>：可同步各大网盘，以 <code>百度网盘</code> 为例，配置好后，只要将文件保存至 <code>我的应用数据</code> -&gt; <code>Cloud Sync</code> 里即可自动下载到 NAS 中，不过速度较慢</p><p><code>Download Station</code>：远程下载，不过速度较慢。由于迅雷取消了第三方软件的远程下载，只有迅雷的下载包和小米路由器可以使用，所以群晖的远程下载也被取消，远程下东西只能用 <code>Download Station</code> 和 同步云盘。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好吧，最近家人出去玩不带我，自己在家无聊买了一个 &lt;code&gt;群晖（Synology）DS216play&lt;/code&gt; ，&lt;code&gt;2017-7-29&lt;/code&gt; 京东购买，下午就到了，狗东物流就是快啊。&lt;/p&gt;
&lt;p&gt;买的是带 &lt;strong&gt;两块&lt;/strong&gt; 希捷 &lt;strong&gt;4T&lt;/strong&gt; 硬盘的套装，一共 &lt;code&gt;3799&lt;/code&gt; 元。单买是 (2250 + 1299 * 2) = 4848 元，相当于赠了一块硬盘，还算挺合适的，当然比 618 贵 100+ 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="NAS" scheme="https://xungejiang.com/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>SSM 框架下的 jcaptcha 验证码实例</title>
    <link href="https://xungejiang.com//2017/07/11/ssm-jcaptcha/"/>
    <id>https://xungejiang.com//2017/07/11/ssm-jcaptcha/</id>
    <published>2017-07-11T01:01:42.000Z</published>
    <updated>2017-07-11T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近把 SSM(Spring + Spring MVC + MyBatis) 的 Maven 项目搭建好了，并完成了登录和注册功能。其中注册功能使用 jcaptcha 加入了验证码，并使用 AJAX 完成了基本的验证功能。</p><p>本文主要介绍一下 <code>jcaptcha</code> 验证码的实现 (IDEA , 附源码)。</p><a id="more"></a><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-7-11/luntan.png"></p><p>项目源码：</p><p><a href="https://github.com/xunge/SSM-jcaptcha" target="_blank" rel="noopener">https://github.com/xunge/SSM-jcaptcha</a></p><p>参考：</p><p><a href="http://jcaptcha.sourceforge.net/" target="_blank" rel="noopener">jcaptcha 官网</a></p><p><a href="http://blog.csdn.net/u011403655/article/details/46843331" target="_blank" rel="noopener">IDEA 搭建 SSM</a></p><p><a href="http://ojeta.iteye.com/blog/2111963" target="_blank" rel="noopener">jcaptcha 验证码</a></p><p>由于 jcaptcha 有个缺陷，就是无法使用 AJAX 进行验证，因为一旦验证就会清除 session，这就导致如果使用 AJAX 验证后，如果输入的验证码错误，就无法重复验证，只有刷新网页才可重新使用。</p><p>这里参考 <a href="http://blog.csdn.net/lovesomnus/article/details/50487486" target="_blank" rel="noopener">这篇博客</a>，将清除 session 的操作提取出来，便可以使用 AJAX 进行验证了。</p><h2 id="项目介绍">项目介绍</h2><ol type="1"><li>注册页面使用 <code>jcaptcha</code> 实现了验证码功能，并使用AJAX技术实时验证。</li><li>注册页面的邮箱输入完成，光标移开输入框后，使用AJAX技术到后台数据库进行查找，如果已经注册过则提示该邮箱已被注册。</li></ol><h2 id="maven-依赖">maven 依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.octo.captcha<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcaptcha-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-RC6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-pool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>hsqldb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hsqldb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>concurrent<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>concurrent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xerces<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xercesImpl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xerces<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xmlParserAPIs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jcaptcha-配置文件spring-jcaptcha.xml">jcaptcha 配置文件：spring-jcaptcha.xml</h2><p>在 <code>resources/spring</code> 下新建 <code>spring-jcaptcha.xml</code> 。</p><p>该文件主要控制验证码的样式，可根据官网适当修改。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">default-lazy-init</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--&lt;bean id="captchaService" class="com.octo.captcha.service.multitype.GenericManageableCaptchaService"&gt;</span></span><br><span class="line"><span class="comment">        &lt;constructor-arg index="0" ref="imageEngine"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;constructor-arg type="int" index="1" value="180"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;constructor-arg type="int" index="2" value="100000"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里我为了使用 AJAX 验证验证码，使用了自己创建的 captchaService--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"captchaService"</span> <span class="attr">class</span>=<span class="string">"com.xunge.springemp.service.impl.CustomGenericManageableCaptchaService"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"imageEngine"</span>/&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>180<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>180000<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"imageEngine"</span> <span class="attr">class</span>=<span class="string">"com.octo.captcha.engine.GenericCaptchaEngine"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"captchaFactory"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"captchaFactory"</span> <span class="attr">class</span>=<span class="string">"com.octo.captcha.image.gimpy.GimpyFactory"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"wordgen"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"wordtoimage"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"wordgen"</span> <span class="attr">class</span>= <span class="string">"com.octo.captcha.component.word.wordgenerator.RandomWordGenerator"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可选字符--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>aabbccddeefgghhkkmnnooppqqsstuuvvwxxyyzz<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"wordtoimage"</span> <span class="attr">class</span>=<span class="string">"com.octo.captcha.component.image.wordtoimage.ComposedWordToImage"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"fontGenRandom"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"backGenUni"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"decoratedPaster"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"fontGenRandom"</span> <span class="attr">class</span>=<span class="string">"com.octo.captcha.component.image.fontgenerator.RandomFontGenerator"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--最小字体--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>26<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--最大字体--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>34<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"java.awt.Font"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>Arial<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>32<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"backGenUni"</span> <span class="attr">class</span>=<span class="string">"com.octo.captcha.component.image.backgroundgenerator.UniColorBackgroundGenerator"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--背景宽度--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>110<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--背景高度--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>50<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"decoratedPaster"</span> <span class="attr">class</span>=<span class="string">"com.octo.captcha.component.image.textpaster.DecoratedRandomTextPaster"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--最大字符长度--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>4<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--最小字符长度--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>4<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--文本颜色--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"colorGen"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--文本混淆--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;ref bean="baffleDecorator"/&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"baffleDecorator"</span> <span class="attr">class</span>=<span class="string">"com.octo.captcha.component.image.textpaster.textdecorator.BaffleTextDecorator"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.awt.Color"</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"colorWrite"</span>/&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"colorGen"</span> <span class="attr">class</span>=<span class="string">"com.octo.captcha.component.image.color.SingleColorGenerator"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"java.awt.Color"</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"colorBlack"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"colorWrite"</span> <span class="attr">class</span>=<span class="string">"java.awt.Color"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>255<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>255<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">index</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>255<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"colorBlack"</span> <span class="attr">class</span>=<span class="string">"java.awt.Color"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>50<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>50<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">index</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>50<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="web.xml-代码">web.xml 代码</h2><p>因为是在 <code>resources/spring</code> 下新建 <code>spring-jcaptcha.xml</code> ， 所以 <code>web.xml</code> 无需重新配置。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">         http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">        classpath:spring/spring-*.xml</span><br><span class="line">      <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jcaptchaimagecreater.java">JcaptchaImageCreater.java</h2><p>在 <code>controller</code> 下新建 <code>JcaptchaImageCreater.java</code>，用来生成验证码图片。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.octo.captcha.service.image.ImageCaptchaService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/captcha"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JcaptchaImageCreater</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ImageCaptchaService imageCaptchaService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteArrayOutputStream jpegOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            String captchaId = request.getSession().getId();</span><br><span class="line">            BufferedImage challenge = imageCaptchaService.getImageChallengeForID(captchaId, request.getLocale());</span><br><span class="line"></span><br><span class="line">            response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-store"</span>);</span><br><span class="line">            response.setHeader(<span class="string">"Pragma"</span>, <span class="string">"no-cache"</span>);</span><br><span class="line">            response.setDateHeader(<span class="string">"Expires"</span>, <span class="number">0L</span>);</span><br><span class="line">            response.setContentType(<span class="string">"image/jpeg"</span>);</span><br><span class="line"></span><br><span class="line">            ImageIO.write(challenge, <span class="string">"jpeg"</span>, jpegOutputStream);</span><br><span class="line">            <span class="keyword">byte</span>[] captchaChallengeAsJpeg = jpegOutputStream.toByteArray();</span><br><span class="line"></span><br><span class="line">            ServletOutputStream respOs = response.getOutputStream();</span><br><span class="line">            respOs.write(captchaChallengeAsJpeg);</span><br><span class="line">            respOs.flush();</span><br><span class="line">            respOs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            logger.error(<span class="string">"generate captcha image error: &#123;&#125;"</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="customgenericmanageablecaptchaservice.java-重写-genericmanageablecaptchaservice.java">CustomGenericManageableCaptchaService.java 重写 GenericManageableCaptchaService.java</h2><p>在 <code>service</code> 下新建 <code>CustomGenericManageableCaptchaService.java</code>，将 removeCaptcha 方法提出来，便可以使用 AJAX 进行验证。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.octo.captcha.engine.CaptchaEngine;</span><br><span class="line"><span class="keyword">import</span> com.octo.captcha.service.CaptchaServiceException;</span><br><span class="line"><span class="keyword">import</span> com.octo.captcha.service.multitype.GenericManageableCaptchaService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Somnus</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2015年11月24日 下午1:21:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomGenericManageableCaptchaService</span> <span class="keyword">extends</span> <span class="title">GenericManageableCaptchaService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> captchaEngine</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minGuarantedStorageDelayInSeconds</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> maxCaptchaStoreSize</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomGenericManageableCaptchaService</span><span class="params">(CaptchaEngine captchaEngine, <span class="keyword">int</span> minGuarantedStorageDelayInSeconds,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                 <span class="keyword">int</span> maxCaptchaStoreSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(captchaEngine, minGuarantedStorageDelayInSeconds, maxCaptchaStoreSize);</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改验证码校验逻辑，默认的是执行了该方法后，就把sessionid从store当中移除&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 然而在ajax校验的时候，如果第一次验证失败，第二次还得重新刷新验证码，这种逻辑不合理&lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * 现在修改逻辑，只有校验通过以后，才移除sessionid。 Method Name：validateResponseForID .</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CaptchaServiceException</span></span><br><span class="line"><span class="comment">     *             the return type：Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">validateResponseForID</span><span class="params">(String ID, Object response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> CaptchaServiceException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.store.hasCaptcha(ID)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CaptchaServiceException(</span><br><span class="line">                    <span class="string">"Invalid ID, could not validate unexisting or already validated captcha"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Boolean valid = <span class="keyword">this</span>.store.getCaptcha(ID).validateResponse(response);</span><br><span class="line">        <span class="comment">//源码的这一句是没被注释的，这里我们注释掉，在下面暴露一个方法给我们自己来移除sessionId</span></span><br><span class="line">        <span class="comment">//this.store.removeCaptcha(ID);</span></span><br><span class="line">        <span class="keyword">return</span> valid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除session绑定的验证码信息.</span></span><br><span class="line"><span class="comment">     * Method Name：removeCaptcha .</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sessionId</span></span><br><span class="line"><span class="comment">     * the return type：void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeCaptcha</span><span class="params">(String sessionId)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sessionId!=<span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.store.hasCaptcha(sessionId))&#123;</span><br><span class="line">            <span class="keyword">this</span>.store.removeCaptcha(sessionId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="logincontroller">LoginController</h2><p>在 <code>controller</code> 下新建 <code>LoginController</code>，进行用户注册和检查验证码的方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.octo.captcha.service.image.ImageCaptchaService;</span><br><span class="line"><span class="keyword">import</span> com.xunge.springemp.service.impl.CustomGenericManageableCaptchaService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.SessionAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xunge.springemp.dao.UserDAO;</span><br><span class="line"><span class="keyword">import</span> com.xunge.springemp.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.xunge.springemp.service.IUserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@SessionAttributes</span>(<span class="string">"username"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ImageCaptchaService imageCaptchaService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CustomGenericManageableCaptchaService customGenericManageableCaptchaService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDAO userDAO;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"userAdd"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">doAdd</span><span class="params">(User user, String captcha, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Boolean isResponseCorrect = imageCaptchaService.validateResponseForID(request.getSession().getId(), captcha);</span><br><span class="line">        <span class="keyword">if</span> (isResponseCorrect) &#123;</span><br><span class="line">            userDAO.addUser(user);</span><br><span class="line">            customGenericManageableCaptchaService.removeCaptcha(request.getSession().getId());</span><br><span class="line">            ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">"personal"</span>);</span><br><span class="line">            <span class="keyword">return</span> mv;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">"register"</span>);</span><br><span class="line">            <span class="keyword">return</span> mv;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/checkCaptcha"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function"><span class="keyword">int</span> <span class="title">checkCaptcha</span><span class="params">(String captcha, HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Boolean isResponseCorrect = imageCaptchaService.validateResponseForID(request.getSession().getId(), captcha);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isResponseCorrect == <span class="keyword">false</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端代码">前端代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control input-lg input_size input-captcha"</span> <span class="attr">id</span>=<span class="string">"captcha"</span> <span class="attr">name</span>=<span class="string">"captcha"</span> <span class="attr">maxlength</span>=<span class="string">"4"</span> <span class="attr">placeholder</span>=<span class="string">"请输入验证码"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img-captcha"</span> <span class="attr">src</span>=<span class="string">"captcha"</span> <span class="attr">onclick</span>=<span class="string">"this.src='captcha?d='+new Date().getTime()"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="js-代码">JS 代码</h2><p>前端 AJAX 验证使用 JQuery 的 validate，进行表单的验证更美观。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#regform"</span>).validate(&#123;</span><br><span class="line">    rules: &#123;</span><br><span class="line">        captcha: &#123;</span><br><span class="line">            required: <span class="literal">true</span>,</span><br><span class="line">            remote: &#123;</span><br><span class="line">                url:<span class="string">"checkCaptcha.do"</span>,</span><br><span class="line">                type:<span class="string">"get"</span>,</span><br><span class="line">                contentType: <span class="string">"application/json;charset=utf-8"</span>,</span><br><span class="line">                data:&#123;</span><br><span class="line">                    captcha:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> $(<span class="string">"#captcha"</span>).val();&#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                dataFilter: <span class="function"><span class="keyword">function</span>(<span class="params">data, type</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (data == <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    messages: &#123;</span><br><span class="line">        captcha: &#123;</span><br><span class="line">            required: <span class="string">"请输入验证码"</span>,</span><br><span class="line">            remote: <span class="string">"验证码错误"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><p>更详细信息可以参考源码。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近把 SSM(Spring + Spring MVC + MyBatis) 的 Maven 项目搭建好了，并完成了登录和注册功能。其中注册功能使用 jcaptcha 加入了验证码，并使用 AJAX 完成了基本的验证功能。&lt;/p&gt;
&lt;p&gt;本文主要介绍一下 &lt;code&gt;jcaptcha&lt;/code&gt; 验证码的实现 (IDEA , 附源码)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="经验值" scheme="https://xungejiang.com/categories/%E7%BB%8F%E9%AA%8C%E5%80%BC/"/>
    
    
      <category term="SSM" scheme="https://xungejiang.com/tags/SSM/"/>
    
      <category term="jcaptcha" scheme="https://xungejiang.com/tags/jcaptcha/"/>
    
  </entry>
  
  <entry>
    <title>i7-7700k 装机实录</title>
    <link href="https://xungejiang.com//2017/06/08/build-up-computer/"/>
    <id>https://xungejiang.com//2017/06/08/build-up-computer/</id>
    <published>2017-06-08T01:01:42.000Z</published>
    <updated>2017-06-08T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近感觉家里的 iMac 配置有些低，于是准备自己组装一台电脑。本文主要介绍一下自己的选购配件的过程以及装机时候的注意事项。</p><a id="more"></a><h2 id="选购">选购</h2><p>在购买前已经做了一年多的功课啦，本来上次双十一就准备买来着，不过因为某种原因没有买成。今天再看当时的配件不是换代就是降价很多，不禁感叹摩尔定律依旧成立。。</p><p>买之前一直参照知乎大神的 <span class="citation" data-cites="毅种循环">@毅种循环</span> 的专栏<a href="https://zhuanlan.zhihu.com/p/27166476?utm_source=qq&amp;utm_medium=social" target="_blank" rel="noopener">6.18</a>，参考价值非常大，再次感谢毅神。</p><p>6.1 福利最大，幸好我当天锁了两单，还是非常优惠的。</p><p>下面给出我的配置单</p><table><thead><tr class="header"><th>配件</th><th>品牌</th><th>价格</th></tr></thead><tbody><tr class="odd"><td>CPU</td><td>i7-7700k(散)</td><td>2078￥</td></tr><tr class="even"><td>显卡</td><td>索泰 GTX1060 6G</td><td>1899￥(-200)</td></tr><tr class="odd"><td>主板</td><td>微星 Z270 gaming pro carbon</td><td>1375￥(-224)</td></tr><tr class="even"><td>内存条</td><td>英睿达 DDR4 2400 8G</td><td>主板赠(-339)</td></tr><tr class="odd"><td>固态硬盘</td><td>三星 PM961 256G</td><td>629￥</td></tr><tr class="even"><td>机械硬盘</td><td>希捷酷鱼 7200转 2T</td><td>329￥(-80)</td></tr><tr class="odd"><td>散热器</td><td>九州风神 大霜塔</td><td>179￥(-40)</td></tr><tr class="even"><td>电源</td><td>海韵 G-550</td><td>419￥(-80)</td></tr><tr class="odd"><td>机箱</td><td>先马黑洞</td><td>289￥(-10)</td></tr><tr class="even"><td>显示器</td><td>戴尔 U2417h</td><td>1474(-175)</td></tr></tbody></table><p>总计：8671￥(-1208)</p><p>其中除了 CPU 和 固态是从淘宝买的之外，其余全部走的京东，可以说福利还是足够的。</p><h3 id="cpu-选购">CPU 选购</h3><p>因为 AMD 最近崛起的 Ryzen 处理器表现也相当不俗，也曾经考虑不过是否上 AMD。不过还是感觉英特尔稳妥一点，在游戏体验上英特尔也是略胜一筹，最终决定还是英特尔吧。</p><h3 id="固态硬盘选购">固态硬盘选购</h3><p>M.2 接口的固态硬盘还是非常有必要的，读写速度也比 SATA 接口快了好几倍。</p><p>下面列取市场上主流 nvme 协议的固态硬盘，容量为 256G。大家可以根据自己的钱包进行选择。</p><table><thead><tr class="header"><th>品牌</th><th>价钱</th><th>颗粒</th><th>读/写(MB/S)</th><th></th></tr></thead><tbody><tr class="odd"><td>英特尔 600p</td><td>660￥</td><td>TLC</td><td>1570/540</td><td></td></tr><tr class="even"><td>建兴 T10</td><td>680￥</td><td>MLC</td><td>2700/1300</td><td></td></tr><tr class="odd"><td>三星960 evo</td><td>900￥</td><td>TLC</td><td>3200/1800</td><td></td></tr><tr class="even"><td>SM 961</td><td>850￥</td><td>MLC</td><td>3200/1400</td><td></td></tr><tr class="odd"><td>PM 961</td><td>680￥</td><td>TLC</td><td>2800/1100</td><td></td></tr></tbody></table><blockquote><p>注：MLC 好于 TLC，价格来源于 6月12日 淘宝。</p></blockquote><h2 id="装机">装机</h2><p>京东买的东西就是快，下完单最晚第二天就到了。然而 CPU 和 固态 走的淘宝，第二周才送到。</p><p>装机前看了几个装机视频，感觉还不错，推荐给大家 。</p><ol type="1"><li><a href="http://www.bilibili.com/video/av5780671" target="_blank" rel="noopener">装机视频教程</a>本文并没有介绍如何走背线，这篇视频介绍背线走法还是很详细的。</li><li><a href="http://www.bilibili.com/video/av11246090/" target="_blank" rel="noopener">手把手带你从零开始台式电脑的组装</a>同样是先马黑洞的机箱。</li><li><a href="http://www.bilibili.com/video/av10093818" target="_blank" rel="noopener">PcPartPicker装机教程</a>外国大神装机教程</li></ol><p><strong>并且要仔细看主板的说明书！！！（x3）</strong></p><p>装机的时候要注意避免静电。因为静电很容易损坏 CPU 或 主板，可以用手经常摸一下机箱，有条件的可以戴白色手套，戴防静电手环当然更好啦。</p><h3 id="装-cpu">1. 装 CPU</h3><p>这一步算是最容易的啦。将压杆侧压掀起保护盖，将 CPU 放入。注意 Intel 的 CPU 有两个小凹槽的防呆设计，与卡槽对齐后即可将压杆归位，同时保护盖跳起。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-6-8/002.jpg"></p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-6-8/003.jpg"></p><h3 id="装内存条">2. 装内存条</h3><p>内存条的安装按道理也很简单，但是还是花了不少功夫。</p><p>内存条也有个凹槽，两边距离不同，按的时候对比一下凹槽对应即可，不容易安错。</p><p>不过在按内存条的时候真的是需要很大力气的。这里建议在主板底下垫一个软垫，可以更好地发力。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-6-8/004.jpg"></p><h3 id="安装-m.2-固态硬盘">3. 安装 M.2 固态硬盘</h3><p>我买的 Z270 主板有两个 M.2 插槽，其中有一个带有散热装甲，对固态硬盘的加速还是很有帮助的。</p><p>先将中间的平齐螺丝放在外侧，再将固态硬盘装好并用固定螺丝固定即可。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-6-8/005.jpg"></p><h3 id="装-cpu-散热">4. 装 CPU 散热</h3><p>散热的安装相对复杂一些。因为买的 CPU 想超频，低端水冷还不如高端风冷，所以买了大霜塔。</p><p>说明书讲的还是很清楚的，这里简单说一下注意事项。</p><p>1.将四个固定钉插入中间孔，并套上保护胶套进行固定。（不要加矩形胶垫）</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-6-8/006.jpg"></p><p>2.将 4 个固定钉从主板底下穿出。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-6-8/007.jpg"></p><p>3.套上四个胶垫。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-6-8/008.jpg"></p><p>4.固定支架，注意螺丝少量多次拧紧，对向螺丝一起拧。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-6-8/009.jpg"></p><p>5.将中间的风扇去掉，记住风扇是怎么摘的，一会还要装回去。</p><p>6.涂硅脂。往 CPU 上挤出黄豆粒大小的硅脂，用牙签涂匀。注意只需要薄薄一层，太厚了反倒不适合散热。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-6-8/010.jpg"></p><p>7.固定散热器本体。注意风扇方向是朝着内存吹的。如果挡内存可以把风扇往上移一些，或者把外侧的风扇放到相反一侧。拧螺丝时一定不要太用力，否则会压坏 CPU 或 主板。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-6-8/011.jpg"></p><p>8.将中间的风扇装好。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-6-8/012.jpg"></p><p>9.接风扇电源线。中间的风扇(4pin)接到 <code>CPU_FAN1</code> 接口上，旁边的风扇(3pin)接到任意 <code>SYS_FAN</code> 接口即可。(3pin插到4pin接口就行)</p><h3 id="装电源">5. 装电源</h3><p>我买的是 <code>海韵 G-550</code> 模组电源。首先把电源后面的模组都插好，再把电源用螺丝拧紧在机箱后面底部，注意风扇向下。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-6-8/016.jpg"></p><h3 id="装-机械硬盘固态硬盘光驱sata-接口">6. 装 机械硬盘/固态硬盘/光驱（SATA 接口）</h3><p>每个机箱都不同，照着机箱说明书装就好啦。SATA 接口需要连接两根线：一根数据线，和主板相连；一根电源线，和电源相连。</p><h3 id="固定主板-io-挡板">7. 固定主板 IO 挡板</h3><p>将主板的 IO 挡板固定在机箱上。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-6-8/013.jpg"></p><h3 id="固定主板到机箱">8. 固定主板到机箱</h3><p>机箱在买回来的时候就有六个铜柱，在如图位置。因为我的主板是大板，所以需要把外面三个红圈的铜柱也拧上，并拧掉绿圈的铜柱（很紧，可能需要扳子）。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-6-8/014.jpg"></p><blockquote><p>注意没用的铜柱一定要拧下来，否则可能导致主板短路。</p></blockquote><p>固定螺丝如图所示。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-6-8/017.jpg"></p><p>这里说明一下，如果你用的也是大霜塔等大型散热器，最好提前插上 CPU 供电线，再固定主板。</p><p>因为我买的 CPU 散热器大霜塔太大，我又从背板走的线，CPU 的供电线非常难插，只有很小的空间，像我的大手根本进不去，最后没办法求助母上大人。母上大人的纤纤玉手也是勉强才伸进去。为了插这根线花了大约半个小时的时间。所以建议在固定主板前先把 CPU 的供电线插上，再固定主板，会轻松很多。</p><h3 id="连接各种跳线">9. 连接各种跳线</h3><p><a href="https://jingyan.baidu.com/article/acf728fd4a6680f8e410a34a.html" target="_blank" rel="noopener">推荐个百度经验</a></p><p>这一步是对新手来说最不友好的一步。需要往主板上插各种跳线。有电源线，机箱前置面板线，硬盘、风扇线等。</p><p>下图为主板用到的几个接口。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-6-8/018.jpg"></p><table><thead><tr class="header"><th>接口</th><th>名称</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>①</td><td>AUD1</td><td>耳机与麦克风接口</td></tr><tr class="even"><td>②</td><td>JFP1</td><td>机箱开机键、指示灯等接口</td></tr><tr class="odd"><td>③</td><td>JUSB1</td><td>机箱前面板USB</td></tr><tr class="even"><td>④</td><td>SATA</td><td>接硬盘、光驱</td></tr><tr class="odd"><td>⑤</td><td>JUSB3</td><td>机箱前面板USB</td></tr><tr class="even"><td>⑥</td><td>ATX_PWR1</td><td>主板供电线</td></tr><tr class="odd"><td>⑦</td><td>SYS_FAN4</td><td>CPU散热副风扇供电线</td></tr><tr class="even"><td>⑧</td><td>CPU_FAN1</td><td>CPU散热主风扇供电线</td></tr><tr class="odd"><td>⑨</td><td>CPU_PWR1</td><td>CPU供电线</td></tr></tbody></table><p>其中 ② <code>JFP1</code> 接口需要连接多根跳线，下图为具体连接方式。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-6-8/019.jpg"></p><h3 id="安装显卡">10. 安装显卡</h3><p>因为显卡比较大，容易挡住跳线接口，我们选择最后安装它。</p><p>需要卸下机箱的两个挡板，将显卡插入 PCIE 接口后用卸下的螺丝固定。</p><p>我买的是索泰至尊需要 6+8 pin 供电。模组电源有两个 8 pin 的显卡供电线，需要都连上，其中有一个 8 pin 线只连接 6 pin 接口。</p><h2 id="总结">总结</h2><p>至此，装机已经完成，我们需要连接电源，连接显示器（用显卡的接口连，不是主板），开机看看是否点亮。</p><p>如果没有点亮也不用着急，我第一次也没有点亮，原因是机箱开关机键没有插好（可能是电源灯正负极接反了）。把 ② <code>JFP1</code> 接口的跳线拔下来重新插上再试试吧。</p><p>装系统速度神快，坦克世界终于开了最高特效！！那效果，爽！！</p><p>p.s. 幸亏 6.1 就全买完了。。显卡由于被挖矿的高价买走了，显卡至少贵500。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近感觉家里的 iMac 配置有些低，于是准备自己组装一台电脑。本文主要介绍一下自己的选购配件的过程以及装机时候的注意事项。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="装机" scheme="https://xungejiang.com/tags/%E8%A3%85%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Java 常见面试题及答案</title>
    <link href="https://xungejiang.com//2017/05/04/Java-interview-questions/"/>
    <id>https://xungejiang.com//2017/05/04/Java-interview-questions/</id>
    <published>2017-05-04T01:01:42.000Z</published>
    <updated>2017-05-04T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="什么是java虚拟机为什么java被称作是平台无关的编程语言">1.什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？</h2><p>Java 虚拟机是一个可以执行 Java 字节码的虚拟机进程。Java 源文件被编译成能被 Java 虚拟机执行的字节码文件。</p><p>Java 被设计成允许应用程序可以运行在任意的平台，而不需要程序员为每一个平台单独重写或者是重新编译。</p><p>Java 虚拟机让这个变为可能，因为它知道底层硬件平台的指令长度和其他特性。</p><h2 id="jdk和jre的区别是什么">2.JDK和JRE的区别是什么？</h2><p>JDK: Java开发工具包,包含了JRE、编译器和其它工具（如：JavaDOc、Java调试器)</p><p>JRE: Java运行环境,包含Java虚拟机和Java程序所需的核心类库。</p><p>如果只是想跑Java程序，那么只需安装JRE，如果要写Java程序并且运行，那就需要JDK了。</p><h2 id="static关键字是什么意思java中是否可以覆盖一个private或者是static的方法">3."static"关键字是什么意思？Java中是否可以覆盖一个private或者是static的方法？</h2><p>如果一个类的变量或者方法前面有static修饰，那么表明这个方法或者变量属于这个类，也就是说可以在不创建对象的情况下直接使用</p><p>当父类的方法被private修饰时，表明该方法为父类私有，对其他任何类都是不可见的，因此如果子类定了一个与父类一样的方法，这对于子类来说相当于是一个新的私有方法，且如果要进行向上转型，然后去调用该“覆盖方法”，会产生编译错误。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Parent c = <span class="keyword">new</span> Child();</span><br><span class="line">        c.fun(); <span class="comment">//编译出错</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>static方法时编译时静态绑定的，属于类，而覆盖是运行时动态绑定的(动态绑定的多态),因此不能覆盖。</p><h2 id="java支持的基本数据类型有哪些什么是自动拆装箱">4.Java支持的基本数据类型有哪些？什么是自动拆装箱？</h2><p>Java支持的基本数据类型有以下9种: <strong>byte</strong>, <strong>shot</strong>, <strong>int</strong>, <strong>long</strong>, <strong>float</strong>, <strong>double</strong>, <strong>char</strong>, <strong>boolean</strong>, <strong>void</strong> 。</p><p>自动拆装箱是Java从jdk1.5引用，目的是将原始类型自动的转换为相对应的对象，也可以逆向进行，即拆箱。这也体现Java中一切皆对象的宗旨。</p><p>所谓自动装箱就是将原始类型自动的转换为对应的对象，而拆箱就是将对象类型转换为基本类型。Java中的自动拆装箱通常发生在变量赋值的过程中，如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer object = <span class="number">3</span>; <span class="comment">//自动装箱</span></span><br><span class="line"><span class="keyword">int</span> o = object; <span class="comment">//拆箱</span></span><br></pre></td></tr></table></figure><p>在 Java 中，应该注意自动拆装箱，因为有时可能因为 Java 自动装箱机制，而导致创建了许多对象，对于内存小的平台会造成压力。</p><h2 id="覆盖和重载是什么">5. 覆盖和重载是什么?</h2><p><strong>覆盖</strong> 也叫 <strong>重写</strong> ，发生在子类与父类之间，表示子类中的方法可以与父类中的某个方法的名称和参数完全相同，通过子类创建的实例对象调用这个方法时，将调用子类中的定义方法，这相当于把父类中定义的那个完全相同的方法给覆盖了，这也是面向对象编程的多态性的一种表现。</p><p><strong>重载</strong> 是指在一个类中，可以有多个相同名称的方法，但是他们的参数列表的个数或类型不同，当调用该方法时，根据传递的参数类型调用对应参数列表的方法。<strong>注意！！</strong> 当参数列表相同但返回值不同时，将会出现编译错误，这并不是重载，因为jvm无法根据返回值类型来判断应该调用哪个方法。</p><h2 id="java支持多继承么如果不支持如何实现">6.Java支持多继承么？如果不支持，如何实现?</h2><p>在 Java 中是单继承的，也就是说一个类只能继承一个父类。</p><p>Java 中实现多继承有两种方式,一是接口，二是内部类。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现多个接口 如果两个接口的变量相同 那么在调用该变量的时候 编译出错</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">interface1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> String field = <span class="string">"dd"</span>; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">interface2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> String field = <span class="string">"dddd"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">child</span> <span class="keyword">implements</span> <span class="title">interface1</span>, <span class="title">interface2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> String field = <span class="string">"dddd"</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内部类 间接多继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">strong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"父类"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Mother</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"母亲"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getStrong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Father f = <span class="keyword">new</span> Father();</span><br><span class="line">        f.strong();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Mother m = <span class="keyword">new</span> Mother();</span><br><span class="line">        m.getCute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="什么是值传递和引用传递java中是值传递还是引用传递还是都有">7.什么是值传递和引用传递？java中是值传递还是引用传递，还是都有?</h2><p><strong>值传递</strong> 就是在方法调用的时候，实参是将自己的一份拷贝赋给形参，在方法内，对该参数值的修改不影响原来实参，常见的例子就是刚开始学习c语言的时候那个交换方法的例子了。</p><p><strong>引用传递</strong> 是在方法调用的时候，实参将自己的地址传递给形参，此时方法内对该参数值的改变，就是对该实参的实际操作。</p><p>在java中只有一种传递方式，那就是值传递.可能比较让人迷惑的就是java中的对象传递时，对形参的改变依然会影响到该对象的内容。</p><p>下面这个例子来说明Java中是值传递.</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"hello "</span>);</span><br><span class="line">        getString(sb);</span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getString</span><span class="params">(StringBuffer s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//s = new StringBuffer("ha");</span></span><br><span class="line">        s.append(<span class="string">"world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面这个例子中,当前输出结果为:<code>hello world</code>。这并没有什么问题，可能就是大家平常所理解的引用传递，那么当然会改变StringBuffer的内容。</p><p>但是如果把上面的注释去掉，那么就会输出:<code>hello</code>。此时sb的值并没有变成 <code>ha hello</code>。假如说是引用传递的话，那么形参的 s 也就是 sb 的地址，此时在方法里 new StringBuffer() ，并将该对象赋给 s ，也就是说 s 现在指向了这个新创建的对象.按照引用传递的说法，此时对 s 的改变就是对 sb 的操作，也就是说 sb 应该也指向新创建的对象，那么输出的结果应该为 <code>ha world</code>。但实际上输出的仅是 <code>hello</code>。这说明sb指向的还是原来的对象，而形参 s 指向的才是创建的对象,这也就验证了 Java 中的对象传递也是值传递。</p><h2 id="接口和抽象类的区别是什么">8.接口和抽象类的区别是什么?</h2><p>不同点在于：</p><ol type="1"><li>接口中所有的方法隐含的都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。</li><li>类可以实现很多个接口，但是只能继承一个抽象类</li><li>类如果要实现一个接口，它必须要实现接口声明的所有方法。但是，类可以不实现抽象类声明的所有方法，当然，在这种情况下，类也必须得声明成是抽象的。</li><li>抽象类可以在不提供接口方法实现的情况下实现接口。</li><li>Java 接口中声明的变量默认都是 final 的。抽象类可以包含非 final 的变量。</li><li>Java 接口中的成员函数默认是 public 的。抽象类的成员函数可以是 private，protected 或者是 public 。</li><li>接口是绝对抽象的，不可以被实例化(java 8已支持在接口中实现默认的方法)</li><li>抽象类也不可以被实例化，但是，如果它包含 main 方法的话是可以被调用的。</li></ol><h2 id="构造器constructor是否可被重写override">9.构造器（constructor）是否可被重写（override）?</h2><p>构造方法是不能被子类重写的，但是构造方法可以重载，也就是说一个类可以有多个构造方法。</p><h2 id="math.round11.5-等于多少-math.round-11.5等于多少">10.Math.round(11.5) 等于多少? Math.round(-11.5)等于多少?</h2><p>Math.round(11.5)==12 Math.round(-11.5)==-11</p><p>round 方法返回与参数 最接近的长整数，参数加 1/2 后求其 floor.</p><h2 id="string-stringbuffer-stringbuilder的区别">11. String, StringBuffer StringBuilder的区别。</h2><p>String 的长度是不可变的；</p><p>StringBuffer的长度是可变的，如果你对字符串中的内容经常进行操作，特别是内容要修改时，那么使用 StringBuffer，如果最后需要 String，那么使用 StringBuffer 的 toString() 方法；线程安全；</p><p>StringBuilder 是从 JDK 5 开始，为StringBuffer该类补充了一个单个线程使用的等价类；通常应该优先使用 StringBuilder 类，因&gt;为它支持所有相同的操作，但由于它不执行同步，所以速度更快。 使用字符串的时候要特别小心，如果对一个字符串要经常改变的话，就一定不要用String,否则会创建许多无用的对象出来. 来看一下比较</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="string">"hello"</span>+<span class="string">"world"</span>+<span class="string">"i love you"</span>;</span><br><span class="line">StringBuffer Sb = <span class="keyword">new</span> StringBuilder(<span class="string">"hello"</span>).append(<span class="string">"world"</span>).append(<span class="string">"i love you"</span>);</span><br></pre></td></tr></table></figure><p>这个时候s有多个字符串进行拼接，按理来说会有多个对象产生，但是jvm会对此进行一个优化，也就是说只创建了一个对象，此时它的执行速度要比 StringBuffer 拼接快。再看下面这个:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s2 = <span class="string">"hello"</span>;  </span><br><span class="line">String s3 = <span class="string">"world"</span>;  </span><br><span class="line">String s4 = <span class="string">"i love you"</span>;  </span><br><span class="line">String s1 = s2 + s3 + s4;</span><br></pre></td></tr></table></figure><p>上面这种情况，就会多创建出来三个对象，造成了内存空间的浪费。</p><h2 id="jvm内存分哪几个区每个区的作用是什么">12.JVM内存分哪几个区，每个区的作用是什么?</h2><p>java虚拟机主要分为以下五个区:</p><h3 id="方法区">(1) 方法区</h3><ol type="1"><li>有时候也成为永久代，在该区内很少发生垃圾回收，但是并不代表不发生GC，在这里进行的GC主要是对方法区里的常量池和对类型的卸载</li><li>方法区主要用来存储已被虚拟机加载的类的信息、常量、静态变量和即时编译器编译后的代码等数据。</li><li>该区域是被线程共享的。</li><li>方法区里有一个运行时常量池，用于存放静态编译产生的字面量和符号引用。该常量池具有动态性，也就是说常量并不一定是编译时确定，运行时生成的常量也会存在这个常量池中。</li></ol><h3 id="虚拟机栈">(2) 虚拟机栈</h3><ol type="1"><li>虚拟机栈也就是我们平常所称的栈内存,它为java方法服务，每个方法在执行的时候都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接和方法出口等信息。</li><li>虚拟机栈是线程私有的，它的生命周期与线程相同。</li><li>局部变量表里存储的是基本数据类型、returnAddress类型（指向一条字节码指令的地址）和对象引用，这个对象引用有可能是指向对象起始地址的一个指针，也有可能是代表对象的句柄或者与对象相关联的位置。局部变量所需的内存空间在编译器间确定</li><li>操作数栈的作用主要用来存储运算结果以及运算的操作数，它不同于局部变量表通过索引来访问，而是压栈和出栈的方式</li><li>每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接.动态链接就是将常量池中的符号引用在运行期转化为直接引用。</li></ol><h3 id="本地方法栈">(3) 本地方法栈</h3><p>本地方法栈和虚拟机栈类似，只不过本地方法栈为Native方法服务。</p><h3 id="堆">(4) 堆</h3><p>java堆是所有线程所共享的一块内存，在虚拟机启动时创建，几乎所有的对象实例都在这里创建，因此该区域经常发生垃圾回收操作。</p><h3 id="程序计数器">(5) 程序计数器</h3><p>内存空间小，字节码解释器工作时通过改变这个计数值可以选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理和线程恢复等功能都需要依赖这个计数器完成。该内存区域是唯一一个java虚拟机规范没有规定任何OOM情况的区域。</p><p><img class="lazyload"  data-src="http://wiki.jikexueyuan.com/project/java-vm/images/jvmdata.png"></p><h2 id="如和判断一个对象是否存活或者gc对象的判定方法">如和判断一个对象是否存活?(或者GC对象的判定方法)</h2><p>判断一个对象是否存活有两种方法:</p><h3 id="引用计数法">(1) 引用计数法</h3><p>所谓引用计数法就是给每一个对象设置一个引用计数器，每当有一个地方引用这个对象时，就将计数器加一，引用失效时，计数器就减一。当一个对象的引用计数器为零时，说明此对象没有被引用，也就是“死对象”,将会被垃圾回收。</p><p>引用计数法有一个缺陷就是无法解决循环引用问题，也就是说当对象A引用对象B，对象B又引用者对象A，那么此时A,B对象的引用计数器都不为零，也就造成无法完成垃圾回收，所以主流的虚拟机都没有采用这种算法。</p><h3 id="可达性算法引用链法">(2) 可达性算法(引用链法)</h3><p>该算法的思想是：从一个被称为 GC Roots 的对象开始向下搜索，如果一个对象到 GC Roots 没有任何引用链相连时，则说明此对象不可用。</p><p>在java中可以作为 GC Roots 的对象有以下几种:</p><ul><li>虚拟机栈中引用的对象</li><li>方法区类静态属性引用的对象</li><li>方法区常量池引用的对象</li><li>本地方法栈JNI引用的对象</li></ul><p>当一个对象不可达 GC Root 时，这个对象并不会立马被回收，而是出于一个死缓的阶段，若要被真正的回收需要经历两次标记。</p><p>如果对象在可达性分析中没有与 GC Root 的引用链，那么此时就会被第一次标记并且进行一次筛选，筛选的条件是是否有必要执行 finalize() 方法。当对象没有覆盖 finalize() 方法或者已被虚拟机调用过，那么就认为是没必要的。</p><p>如果该对象有必要执行 finalize() 方法，那么这个对象将会放在一个称为 F-Queue 的对队列中，虚拟机会触发一个 Finalize() 线程去执行，此线程是低优先级的，并且虚拟机不会承诺一直等待它运行完，这是因为如果 finalize() 执行缓慢或者发生了死锁，那么就会造成 F-Queue 队列一直等待，造成了内存回收系统的崩溃。 GC 对处于 F-Queue 中的对象进行第二次被标记，这时，该对象将被移除"即将回收"集合，等待回收。</p><h2 id="java中垃圾收集的方法有哪些">15.java中垃圾收集的方法有哪些?</h2><h3 id="标记-清除">(1) 标记-清除:</h3><p>这是垃圾收集算法中最基础的，根据名字就可以知道，它的思想就是标记哪些要被回收的对象，然后统一回收。这种方法很简单，但是会有两个主要问题：</p><ol type="1"><li>效率不高，标记和清除的效率都很低；</li><li>会产生大量不连续的内存碎片，导致以后程序在分配较大的对象时，由于没有充足的连续内存而提前触发一次GC动作。</li></ol><h3 id="复制算法">(2) 复制算法:</h3><p>为了解决效率问题，复制算法将可用内存按容量划分为相等的两部分，然后每次只使用其中的一块，当一块内存用完时，就将还存活的对象复制到第二块内存上，然后一次性清楚完第一块内存，再将第二块上的对象复制到第一块。但是这种方式，内存的代价太高，每次基本上都要浪费一半的内存。</p><p>于是将该算法进行了改进，内存区域不再是按照 1：1 去划分，而是将内存划分为 8:1:1 三部分，较大那份内存交 Eden 区，其余是两块较小的内存区叫 Survior 区。每次都会优先使用 Eden 区，若 Eden 区满，就将对象复制到第二块内存区上，然后清除Eden区，如果此时存活的对象太多，以至于 Survivor 不够时，会将这些对象通过分配担保机制复制到老年代中。(java堆又分为新生代和老年代)</p><h3 id="标记-整理">(3) 标记-整理:</h3><p>该算法主要是为了解决标记-清除，产生大量内存碎片的问题；当对象存活率较高时，也解决了复制算法的效率问题。它的不同之处就是在清除对象的时候现将可回收对象移动到一端，然后清除掉端边界以外的对象，这样就不会产生内存碎片了。</p><h3 id="分代收集">(4) 分代收集:</h3><p>现在的虚拟机垃圾收集大多采用这种方式，它根据对象的生存周期，将堆分为新生代和老年代。在新生代中，由于对象生存期短，每次回收都会有大量对象死去，那么这时就采用复制算法。老年代里的对象存活率较高，没有额外的空间进行分配担保，所以可以使用 <strong>标记-整理</strong> 或者 <strong>标记-清除</strong>。</p><h2 id="java内存模型">16.java内存模型</h2><p>java内存模型 (JMM) 是线程间通信的控制机制。 JMM 定义了主内存和线程之间抽象关系。线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是 JMM 的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。 Java 内存模型的抽象示意图如下：</p><p><img class="lazyload"  data-src="http://upload-images.jianshu.io/upload_images/277730-377221ab99d50e0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"></p><p>从上图来看，线程 A 与线程 B 之间如要通信的话，必须要经历下面2个步骤：</p><ol type="1"><li>首先，线程 A 把本地内存 A 中更新过的共享变量刷新到主内存中去。</li><li>然后，线程 B 到主内存中去读取线程A之前已更新过的共享变量。</li></ol><h2 id="java类加载过程">17.java类加载过程?</h2><p>java类加载需要经历以下 7 个过程：</p><h3 id="加载">(1) 加载</h3><p>加载时类加载的第一个过程，在这个阶段，将完成以下三件事情：</p><ol type="1"><li>通过一个类的全限定名获取该类的二进制流。</li><li>将该二进制流中的静态存储结构转化为方法去运行时数据结构。</li><li>在内存中生成该类的 Class 对象，作为该类的数据访问入口。</li></ol><h3 id="验证">(2) 验证</h3><p>验证的目的是为了确保Class文件的字节流中的信息不回危害到虚拟机。在该阶段主要完成以下四钟验证:</p><ol type="1"><li>文件格式验证: 验证字节流是否符合Class文件的规范，如主次版本号是否在当前虚拟机范围内，常量池中的常量是否有不被支持的类型。</li><li>元数据验证: 对字节码描述的信息进行语义分析，如这个类是否有父类，是否集成了不被继承的类等。</li><li>字节码验证: 是整个验证过程中最复杂的一个阶段，通过验证数据流和控制流的分析，确定程序语义是否正确，主要针对方法体的验证。如: 方法中的类型转换是否正确，跳转指令是否正确等。</li><li>符号引用验证: 这个动作在后面的解析过程中发生，主要是为了确保解析动作能正确执行。</li></ol><h3 id="准备">(3) 准备</h3><p>准备阶段是为类的静态变量分配内存并将其初始化为默认值，这些内存都将在方法区中进行分配。准备阶段不分配类中的实例变量的内存，实例变量将会在对象实例化时随着对象一起分配在Java堆中。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static int value=123;//在准备阶段value初始值为0 。在初始化阶段才会变为123 。</span><br></pre></td></tr></table></figure><h3 id="解析">(4) 解析</h3><p>该阶段主要完成符号引用到直接引用的转换动作。解析动作并不一定在初始化动作完成之前，也有可能在初始化之后。</p><h3 id="初始化">(5) 初始化</h3><p>初始化时类加载的最后一步，前面的类加载过程，除了在加载阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的Java程序代码。</p><h2 id="简述-java-类加载机制">18. 简述 Java 类加载机制?</h2><p>虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验，解析和初始化，最终形成可以被虚拟机直接使用的 Java 类型。</p><h2 id="类加载器双亲委派模型机制">19. 类加载器双亲委派模型机制？</h2><p>当一个类收到了类加载请求时，不会自己先去加载这个类，而是将其委派给父类，由父类去加载，如果此时父类不能加载，反馈给子类，由子类去完成类的加载。</p><h2 id="什么是类加载器类加载器有哪些">20.什么是类加载器，类加载器有哪些?</h2><p>实现通过类的权限定名获取该类的二进制字节流的代码块叫做类加载器。</p><p>主要有一下四种类加载器:</p><ol type="1"><li>启动类加载器(Bootstrap ClassLoader): 用来加载 Java 核心类库，无法被 Java 程序直接引用。</li><li>扩展类加载器(extensions class loader): 它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。</li><li>系统类加载器(system class loader): 它根据 Java 应用的类路径 (CLASSPATH) 来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader() 来获取它。</li><li>用户自定义类加载器，通过继承 java.lang.ClassLoader 类的方式实现。</li></ol><h2 id="简述java内存分配与回收策率以及-minor-gc-和-major-gc">21.简述java内存分配与回收策率以及 Minor GC 和 Major GC</h2><ol type="1"><li>对象优先在堆的 Eden 区分配。</li><li>大对象直接进入老年代。</li><li>长期存活的对象将直接进入老年代。</li></ol><p>当 Eden 区没有足够的空间进行分配时，虚拟机会执行一次 Minor GC。</p><p>Minor Gc 通常发生在新生代的 Eden 区，在这个区的对象生存期短，往往发生 Gc 的频率较高，回收速度比较快;</p><p>Full Gc/Major GC 发生在老年代，一般情况下，触发老年代GC的时候不会触发Minor GC,但是通过配置，可以在 Full GC 之前进行一次 Minor GC 这样可以加快老年代的回收速度。</p><h2 id="hashmap的工作原理是什么">22.HashMap的工作原理是什么?</h2><p>HashMap 内部是通过一个数组实现的，只是这个数组比较特殊，数组里存储的元素是一个 Entry 实体 (jdk 8为Node) ，这个 Entry 实体主要包含 key 、 value 以及一个指向自身的 next 指针。HashMap 是基于 hashing 实现的，当我们进行 put 操作时，根据传递的 key 值得到它的 hashcode ，然后再用这个 hashcode 与数组的长度进行<strong>模</strong>运算，得到一个 int 值，就是 Entry 要存储在数组的位置（下标）；当通过 get 方法获取指定 key 的值时，会根据这个 key 算出它的 hash 值（数组下标），根据这个 hash 值获取数组下标对应的 Entry ，然后判断 Entry 里的 key ， hash 值或者通过 equals() 比较是否与要查找的相同，如果相同，返回 value ，否则的话，遍历该链表（有可能就只有一个 Entry ，此时直接返回 null ），直到找到为止，否则返回null。</p><p>HashMap 之所以在每个数组元素存储的是一个链表，是为了解决 hash 冲突问题，当两个对象的 hash 值相等时，那么一个位置肯定是放不下两个值的，于是 hashmap 采用链表来解决这种冲突， hash 值相等的两个元素会形成一个链表。</p><h2 id="hashmap与hashtable的区别是什么">23.HashMap与HashTable的区别是什么?</h2><ol type="1"><li>HashTable 基于 Dictionary 类，而 HashMap 是基于 AbstractMap 。 Dictionary 是任何可将键映射到相应值的类的抽象父类，而 AbstractMap 是基于 Map 接口的实现，它以最大限度地减少实现此接口所需的工作。</li><li>HashMap的key 和 value 都允许为 null ，而 Hashtable 的 key 和 value 都不允许为 null 。 HashMap 遇到 key 为 null 的时候，调用 putForNullKey 方法进行处理，而对 value 没有处理； Hashtable 遇到null ，直接返回 NullPointerException。</li><li>Hashtable 是同步的，而 HashMap 是非同步的，但是我们也可以通过 Collections.synchronizedMap(hashMap) ,使其实现同步。</li></ol><h2 id="correnthashmap的工作原理">24.CorrentHashMap的工作原理?</h2><p><strong>jdk 1.6版</strong>: ConcurrenHashMap 可以说是 HashMap 的升级版， ConcurrentHashMap 是线程安全的，但是与 Hashtable 相比，实现线程安全的方式不同。 Hashtable 是通过对 hash 表结构进行锁定，是阻塞式的，当一个线程占有这个锁时，其他线程必须阻塞等待其释放锁。 ConcurrentHashMap 是采用分离锁的方式，它并没有对整个 hash 表进行锁定，而是局部锁定，也就是说当一个线程占有这个局部锁时，不影响其他线程对 hash 表其他地方的访问。</p><p>具体实现: ConcurrentHashMap 内部有一个 Segment&lt;K,V&gt; 数组,该 Segment 对象可以充当锁。 Segment 对象内部有一个 HashEntry&lt;K,V&gt; 数组，于是每个 Segment 可以守护若干个桶 (HashEntry) ,每个桶又有可能是一个 HashEntry 连接起来的链表，存储发生碰撞的元素。</p><p>每个 ConcurrentHashMap 在默认并发级下会创建包含 16 个 Segment 对象的数组，每个数组有若干个桶，当我们进行 put 方法时，通过 hash 方法对 key 进行计算，得到 hash 值，找到对应的 segment ，然后对该 segment 进行加锁，然后调用 segment 的 put 方法进行存储操作，此时其他线程就不能访问当前的 segment ，但可以访问其他的 segment 对象，不会发生阻塞等待。</p><p><strong>jdk 1.8版</strong>: 在jdk 8中， ConcurrentHashMap 不再使用 Segment 分离锁，而是采用一种乐观锁CAS算法来实现同步问题，但其底层还是 “数组+链表-&gt;红黑树” 的实现。</p><h2 id="遍历一个list有哪些不同的方式">25.遍历一个List有哪些不同的方式？</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//for-each</span></span><br><span class="line"><span class="keyword">for</span>(String str:strList) &#123;</span><br><span class="line">    System.out.print(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//use iterator 尽量使用这种 更安全(fail-fast)</span></span><br><span class="line">Iterator&lt;String&gt; it = strList.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext) &#123;</span><br><span class="line">    System.out.printf(it.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fail-fast与fail-safe有什么区别">26.fail-fast与fail-safe有什么区别？</h2><p>Iterator 的 fail-fast 属性与当前的集合共同起作用，因此它不会受到集合中任何改动的影响。 Java.util 包中的所有集合类都被设计为 fail-&gt;fast 的，而 java.util.concurrent 中的集合类都为 fail-safe 的。当检测到正在遍历的集合的结构被改变时， Fail-fast 迭代器抛出 ConcurrentModificationException ，而 fail-safe 迭代器从不抛出 ConcurrentModificationException。</p><h2 id="array和arraylist有何区别">27.Array和ArrayList有何区别？</h2><ol type="1"><li>Array可以容纳基本类型和对象，而ArrayList只能容纳对象。</li><li>Array是指定大小的，而ArrayList大小是固定的</li></ol><h2 id="哪些集合类提供对元素的随机访问">28.哪些集合类提供对元素的随机访问？</h2><p>ArrayList、HashMap、TreeMap和HashTable类提供对元素的随机访问。</p><h2 id="hashset-的底层实现是什么">29.HashSet 的底层实现是什么?</h2><p>通过看源码知道 HashSet 的实现是依赖于 HashMap 的，HashSet 的值都是存储在 HashMap 中的。在 HashSet 的构造法中会初始化一个 HashMap 对象， HashSet 不允许值重复，因此， HashSet 的值是作为 HashMap 的 key 存储在 HashMap 中的，当存储的值已经存在时返回 false。</p><h2 id="linkedhashmap-的实现原理">30.LinkedHashMap 的实现原理?</h2><p>LinkedHashMap 也是基于 HashMap 实现的，不同的是它定义了一个 Entry header ，这个 header 不是放在 Table 里，它是额外独立出来的。 LinkedHashMap 通过继承 hashMap 中的 Entry ,并添加两个属性 Entry before , after ,和 header 结合起来组成一个双向链表，来实现按插入顺序或访问顺序排序。 LinkedHashMap 定义了排序模式 accessOrder ，该属性为 boolean 型变量，对于访问顺序，为 true ；对于插入顺序，则为 false 。一般情况下，不必指定排序模式，其迭代顺序即为默认为插入顺序。</p><h2 id="linkedlist和arraylist的区别是什么">31.LinkedList和ArrayList的区别是什么?</h2><ol type="1"><li>ArrayList是基于数组实现，LinkedList是基于链表实现</li><li>ArrayList在查找时速度快，LinkedList在插入与删除时更具优势</li></ol><h2 id="什么是线程进程和线程的关系是什么">32.什么是线程？进程和线程的关系是什么？</h2><p>线程可定义为进程内的一个执行单位，或者定义为进程内的一个可调度实体。 在具有多线程机制的操作系统中，处理机调度的基本单位不是进程而是线程。一个进程可以有多个线程，而且至少有一个可执行线程。</p><p>打个比喻:进程好比工厂(计算机)里的车间，一个工厂里有多个车间(进程)在运转,每个车间里有多个工人（线程）在协同工作，这些工人就可以理解为线程。</p><p>线程和进程的关系:</p><ol type="1"><li>线程是进程的一个组成部分。</li><li>进程的多个线程都在进程地址空间活动。</li><li>系统资源是分配给进程的，线程需要资源时，系统从进程的资源里分配给线程。</li><li>处理机调度的基本单位是线程。</li></ol><h2 id="thread-类中的-start-和-run-方法有什么区别">33.Thread 类中的 start() 和 run() 方法有什么区别？</h2><p>start() 方法被用来启动新创建的线程，而且 start() 内部调用了 run() 方法，这和直接调用 run() 方法的效果不一样。当你调用 run() 方法的时候，只会是在原来的线程中调用，没有新的线程启动，start() 方法才会启动新线程。</p><h2 id="什么是线程安全">34.什么是线程安全?</h2><p>当多个线程访问某个类时，不管运行时环境采用何种调度方式或者线程将如何交替执行，并且在主调代码中不需要任何额外的同步或协同，这个类都能表现出正确的行为。</p><p>线程安全的核心是 <strong>“正确性”</strong> ，也就是说当多个线程访问某个类时，能够得到预期的结果，那么就是线程安全的。</p><h2 id="java中有哪几种锁">35.Java中有哪几种锁?</h2><p><strong>自旋锁</strong>: 自旋锁在 JDK1.6 之后就默认开启了。基于之前的观察，共享数据的锁定状态只会持续很短的时间，为了这一小段时间而去挂起和恢复线程有点浪费，所以这里就做了一个处理，让后面请求锁的那个线程在稍等一会，但是不放弃处理器的执行时间，看看持有锁的线程能否快速释放。为了让线程等待，所以需要让线程执行一个忙循环也就是自旋操作。</p><p>在jdk6之后，引入了自适应的自旋锁，也就是等待的时间不再固定了，而是由上一次在同一个锁上的自旋时间及锁的拥有者状态来决定</p><p><strong>偏向锁</strong>: 目的是消除数据在无竞争情况下的同步原语。进一步提升程序的运行性能。 偏向锁就是偏心的偏，意思是这个锁会偏向第一个获得他的线程，如果接下来的执行过程中，该锁没有被其他线程获取，则持有偏向锁的线程将永远不需要再进行同步。偏向锁可以提高带有同步但无竞争的程序性能，也就是说他并不一定总是对程序运行有利，如果程序中大多数的锁都是被多个不同的线程访问，那偏向模式就是多余的，在具体问题具体分析的前提下，可以考虑是否使用偏向锁。</p><p><strong>轻量级锁</strong>: 为了减少获得锁和释放锁所带来的性能消耗，引入了“偏向锁”和“轻量级锁”，所以在 Java SE1.6 里锁一共有四种状态，<strong>无锁状态</strong>，<strong>偏向锁状态</strong>，<strong>轻量级锁状态</strong>和<strong>重量级锁状态</strong>，它会随着竞争情况逐渐升级。锁可以升级但不能降级，意味着偏向锁升级成轻量级锁后不能降级成偏向锁。这种锁升级却不能降级的策略，目的是为了提高获得锁和释放锁的效率。</p><h2 id="synchronized内置锁">36.synchronized内置锁</h2><p>java中以synchronize的形式, 为防止资源冲突提供了内置支持。当任务要执行被 synchronize 关键字保护的代码段时, 它将检查锁是否可用, 然后获取锁--执行代码--释放锁。</p><p>所有对象都自动含有单一的锁。当一个线程正在访问一个对象的 synchronized 方法,那么其他线程不能访问该对象的其他 synchronized 方法,但可以访问非 synchronized 方法。因为一个对象只有一把锁,当一个线程获取了该对象的锁之后,其他线程无法获取该对象的锁,所以无法访问该对象的其他 synchronized 方法。</p><p>synchronized代码块</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(synObject) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当在某个线程中执行这段代码块，该线程会获取对象 synObject 的锁，从而使得其他线程无法同时访问该代码块。 synObject 可以是 this ,代表获取当前对象的锁,也可以是类中的一个属性,代表获取该属性的锁。</p><p>针对每一个类,也有一个锁,所以 static synchronize 方法可以在类的范围内防止对static数据的并发访问。如果一个线程执行一个对象的非 static synchronized 方法，另外一个线程需要执行这个对象所属类的 static synchronized方法，此时不会发生互斥现象，因为访问 static synchronized 方法占用的是类锁，而访问非 static synchronized方法占用的是对象锁，所以不存在互斥现象。</p><p>对于 synchronized 方法或者 synchronized 代码块，当出现异常时，JVM 会自动释放当前线程占用的锁，因此不会由于异常导致出现死锁现象。</p><h2 id="threadlocal理解">37.ThreadLocal理解</h2><p>ThreadLocal 是一个创建线程局部变量的类。通常情况下我们创建的变量,可以被多个线程访问并修改,通过 ThreadLocal 创建的变量只能被当前线程访问。</p><p>ThreadLocal 内部实现：</p><p>ThreadLocal 提供了 set 和 get 方法。</p><p>set 方法会先获取当前线程,然后用当前线程作为句柄,获取 ThreadLocaMap 对象,并判断该对象是否为空,如果为空则创建一个,并设置值,不为空则直接设置值。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ThreadLocal 的值是放入了当前线程的一个 ThreadLocalMap 实例中，所以只能在本线程中访问，其他线程无法访问。</p><p>ThreadLocal 并不会导致内存泄露,因为 ThreadLocalMap 中的 key 存储的是 ThreadLocal 实例的弱引用,因此如果应用使用了线程池,即便之前的线程实例处理完之后出于复用的目的依然存活,也不会产生内存泄露。</p><h2 id="为什么wait-notify-和-notifyall这些方法不在thread类里面">38.为什么wait, notify 和 notifyAll这些方法不在thread类里面?</h2><p>这是个设计相关的问题，它考察的是面试者对现有系统和一些普遍存在但看起来不合理的事物的看法。回答这些问题的时候，你要说明为什么把这些方法放在Object类里是有意义的，还有不把它放在Thread类里的原因。</p><p>一个很明显的原因是JAVA提供的锁是对象级的而不是线程级的，每个对象都有锁，通过线程获得。如果线程需要等待某些锁那么调用对象中的 wait() 方法就有意义了。如果 wait() 方法定义在 Thread 类中，线程正在等待的是哪个锁就不明显了。简单的说，由于 wait ， notify 和 notifyAll 都是锁级别的操作，所以把他们定义在Object类中因为锁属于对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;什么是java虚拟机为什么java被称作是平台无关的编程语言&quot;&gt;1.什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？&lt;/h2&gt;
&lt;p&gt;Java 虚拟机是一个可以执行 Java 字节码的虚拟机进程。Java 源
      
    
    </summary>
    
    
      <category term="知识点" scheme="https://xungejiang.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Java" scheme="https://xungejiang.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>快速排序 C++</title>
    <link href="https://xungejiang.com//2017/05/03/quick-sort/"/>
    <id>https://xungejiang.com//2017/05/03/quick-sort/</id>
    <published>2017-05-03T01:01:42.000Z</published>
    <updated>2017-05-03T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>快速排序由于排序效率在同为O(N*logN)的几种排序方法中效率较高，因此经常被采用，再加上快速排序思想--分治法也确实实用，因此很多软件公司的笔试面试，包括像腾讯，微软等知名IT公司都喜欢考这个，还有大大小的程序方面的考试如软考，考研中也常常出现快速排序的身影。</p><a id="more"></a><p>快速排序是C.R.A.Hoare于1962年提出的一种划分交换排序。它采用了一种分治的策略，通常称其为分治法</p><p>该方法的基本思想是：</p><ol type="1"><li>先从数列中取出一个数作为基准数。</li><li>分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</li><li>再对左右区间重复第二步，直到各区间只有一个数。</li></ol><p>对挖坑填数进行总结</p><ol type="1"><li>i =L; j = R; 将基准数挖出形成第一个坑a[i]。</li><li>j--由后向前找比它小的数，找到后挖出此数填前一个坑a[i]中。</li><li>i++由前向后找比它大的数，找到后也挖出此数填到前一个坑a[j]中。</li><li>再重复执行2，3二步，直到i==j，将基准数填入a[i]中。</li></ol><p>照着这个总结很容易实现挖坑填数的代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> s[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Swap(s[l], s[(l + r) / 2]); //将中间的这个数和第一个数交换 参见注1</span></span><br><span class="line">        <span class="keyword">int</span> i = l, j = r, x = s[l];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; s[j] &gt;= x) <span class="comment">// 从右向左找第一个小于x的数</span></span><br><span class="line">            &#123;</span><br><span class="line">                j--;  </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; j)</span><br><span class="line">            &#123;</span><br><span class="line">                s[i++] = s[j];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(i &lt; j &amp;&amp; s[i] &lt; x) <span class="comment">// 从左向右找第一个大于等于x的数</span></span><br><span class="line">            &#123;</span><br><span class="line">                i++;  </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; j)</span><br><span class="line">            &#123;</span><br><span class="line">                s[j--] = s[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s[i] = x;</span><br><span class="line">        quick_sort(s, l, i - <span class="number">1</span>); <span class="comment">// 递归调用 </span></span><br><span class="line">        quick_sort(s, i + <span class="number">1</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快速排序还有很多改进版本，如随机选择基准数，区间内数据较少时直接用另的方法排序以减小递归深度。有兴趣的筒子可以再深入的研究下。</p><p>参考资料<a href="http://blog.csdn.net/morewindows/article/details/6684558" target="_blank" rel="noopener">http://blog.csdn.net/morewindows/article/details/6684558</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速排序由于排序效率在同为O(N*logN)的几种排序方法中效率较高，因此经常被采用，再加上快速排序思想--分治法也确实实用，因此很多软件公司的笔试面试，包括像腾讯，微软等知名IT公司都喜欢考这个，还有大大小的程序方面的考试如软考，考研中也常常出现快速排序的身影。&lt;/p&gt;
    
    </summary>
    
    
      <category term="知识点" scheme="https://xungejiang.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="快速排序" scheme="https://xungejiang.com/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式简介</title>
    <link href="https://xungejiang.com//2017/05/02/regular-expression/"/>
    <id>https://xungejiang.com//2017/05/02/regular-expression/</id>
    <published>2017-05-02T01:01:42.000Z</published>
    <updated>2017-05-02T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式是一种特殊的字符串模式，用于匹配一组字符串。本文将介绍正则表达式的简单规则。</p><a id="more"></a><h2 id="正则表达式通用匹配符号">正则表达式通用匹配符号</h2><table><colgroup><col style="width: 25%"><col style="width: 25%"><col style="width: 25%"><col style="width: 25%"></colgroup><thead><tr class="header"><th>正则表达式</th><th>说明</th><th>正确示例</th><th>错误示例</th></tr></thead><tbody><tr class="odd"><td>.</td><td>匹配任何单个符号，包括所有字符</td><td>(“..”, “a%”) – true</td><td>(“..”, “a”) – false</td></tr><tr class="even"><td>^xxx</td><td>在开头匹配正则xxx</td><td>(“^a.c.”, “abcd”) – true</td><td>(“^a”, “ac”) – false</td></tr><tr class="odd"><td>xxx\<span class="math inline">\(|在结尾匹配正则xxx|(“..cd\\\)</span>”, “abcd”) – true</td><td>(“a\$”, “aca”) – false</td><td></td><td></td></tr><tr class="even"><td>[abc]</td><td>能够匹配字母a,b或c</td><td>(“<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a>d.”, “ad9”) – true</td><td>(“[ab]x”, “cx”) – false</td></tr><tr class="odd"><td>[^abc]</td><td>当^是[]中的第一个字符时代表取反</td><td>(“[^ab][^12].”, “c3#”) – true</td><td>(“[^ab][^12]“, “c2″) – false</td></tr><tr class="even"><td>[a-e1-8]</td><td>匹配a到e或者1到8之间的字符</td><td>(“[a-e1-3].”, “d#”) – true</td><td>(“[a-e1-3]“, “f2″) – false</td></tr><tr class="odd"><td>xx\</td><td>yy</td><td>匹配正则xx或者yy</td><td>(“x.\</td></tr></tbody></table><h2 id="正则表达式元字符">正则表达式元字符</h2><table><thead><tr class="header"><th style="text-align: center;">正则表达式</th><th>说明</th></tr></thead><tbody></tbody></table><p>任意数字，等同于[0-9] |任意非数字，等同于[^0-9] |任意空白字符，等同于[0B |任意非空白字符，等同于[^\s] |任意英文字符，等同于[a-zA-Z_0-9] |任意非英文字符，等同于[^\w] 单词边界 |非单词边界</p><p>有两种方法可以在正则表达式中像一般字符一样使用元字符。</p><ol type="1"><li>在元字符前添加反斜杠()</li><li>将元字符置于(开始引用)和(结束引用)间</li></ol><h2 id="正则表达式量词">正则表达式量词</h2><table><thead><tr class="header"><th>正则表达式</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>x?</td><td>x没有出现或者只出现一次</td></tr><tr class="even"><td>X*</td><td>X出现0次或更多</td></tr><tr class="odd"><td>X+</td><td>X出现1次或更多</td></tr><tr class="even"><td>X{n}</td><td>X正好出现n次</td></tr><tr class="odd"><td>X{n,}</td><td>X出席n次或更多</td></tr><tr class="even"><td>X{n,m}</td><td>X出现至少n次但不多于m次</td></tr></tbody></table><p>原文链接： <a href="http://www.journaldev.com/634/regular-expression-in-java-regex-example" target="_blank" rel="noopener">journaldev</a> 翻译： ImportNew.com - ImportNew读者 译文链接： <a href="http://www.importnew.com/6810.html" target="_blank" rel="noopener">http://www.importnew.com/6810.html</a> [ 转载请保留原文出处、译者和译文链接。]</p><section class="footnotes footnotes-end-of-document" role="doc-endnotes"><hr><ol><li id="fn1" role="doc-endnote"><p>abc<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正则表达式是一种特殊的字符串模式，用于匹配一组字符串。本文将介绍正则表达式的简单规则。&lt;/p&gt;
    
    </summary>
    
    
      <category term="知识点" scheme="https://xungejiang.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="正则" scheme="https://xungejiang.com/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>MI5 刷 MIUI 国际版</title>
    <link href="https://xungejiang.com//2017/04/09/MIUI-global-install/"/>
    <id>https://xungejiang.com//2017/04/09/MIUI-global-install/</id>
    <published>2017-04-09T01:01:42.000Z</published>
    <updated>2017-04-09T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>MIUI 是基于 Android 开发的手机系统，非常适合国人使用。然而由于国内的某些原因， MIUI 并不支持 Google 全家桶，这对谷歌应用有强烈需求的小伙伴们来说是不能忍的。</p><p>MIUI 国际版很好的解决了这点不足。MIUI 国际版是自带 Google 全家桶的，不仅 MIUI 的功能大部分都有保留，而且还能享受完整的 Google 服务，岂不完美？</p><p>本文将介绍小米手机（米5）如何刷 <code>MIUI 国际版</code>，以及一些踩坑经历。</p><a id="more"></a><p><img class="lazyload"  data-src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-04-12-001.jpeg?imageView2/2/w/400"></p><h2 id="miui-国际版的优点和不足">MIUI 国际版的优点和不足</h2><p>MIUI 国际版优点自然不必多说，不仅可以享受完整的 Google 服务，而且所有被人诟病的 MIUI 系统广告全都消失，相当干净，这对广告过敏者是一个非常棒的选择。</p><p>当然，在使用了一周后，发现一些在 国行版 很方便的功能在 国际版 进行了阉割，如自动和运营商校准流量（仍能显示已使用流量），<del>小米钱包（MiPay，公交卡）下方方法已解决</del>，<del>小米应用商店(底部有旧版apk)</del> 等都因为国界问题消失了。如果您很依赖上述功能，那么在刷国际版之前一定要三思啊！！</p><p>当然你也可以通过在国行版中安装 <code>Google框架服务</code> 使用 <code>Google套件</code>，但是因为 Android 升级到了7.0 ，博主试了好多种方法都没有成功，无奈只好安装 MIUI 国际版啦...</p><h2 id="刷机教程">刷机教程</h2><p>MIUI 国际版官方其实是有官方教程的， <a href="http://en.miui.com/a-232.html" target="_blank" rel="noopener">链接如下</a>， 一共有三种方法，在这里因为安装包更新，recovery 系统更新等原因，前两种方法楼主都没有尝试成功，于是只好使用第三种 <strong>线刷法</strong>。</p><p>首先需要下载线刷包。因为线刷包和卡刷包不同，不太好找，博主找线刷包的链接找了好久，可算被我找到了~~ <a href="http://en.miui.com/a-234.html" target="_blank" rel="noopener">链接如下</a>， 该链接附带线刷法教程，这里简单翻译一下。</p><p>1.解除 BootLoader 锁</p><p>目前，小米全线手机已经加上了 BL 锁，必须解除 BL 锁才能刷机。想要解除 BL 锁可以参考 <a href="http://www.miui.com/thread-6145737-1-1.html" target="_blank" rel="noopener">这个帖子</a>，写的很详细。</p><p>2.下载 <a href="http://api.bbs.miui.com/url/MiFlash" target="_blank" rel="noopener">MiFlash</a> 刷机工具。解压后点击 <code>MiFlash.exe</code> 安装。中间可能会出现提示条，始终点击继续安装就可以正常安装完毕。</p><p>3.下载线刷包，链接同 <a href="http://en.miui.com/a-234.html" target="_blank" rel="noopener">上方教程链接</a>，下载对应手机版本的线刷包并解压。注意 <strong>不要</strong> 在官网的 <code>Download</code> 里下载。</p><p>4.关机。同时按住 <code>音量-</code> 和 <code>电源键</code> ,进入 <code>Fastboot</code> 模式，界面是一个 <strong>正在修安卓机器人的米兔</strong>。</p><p>5.用数据线连结电脑，将解压后的路径复制到 <code>MiFlash</code> 的路径中，点击刷新，列表中会出现你的设备。注意一定要选中底下的 <code>清除所有数据</code>！！（都刷机了就别抱幻想保留用户数据了。。博主当时就选择的保留用户数据，结果卡在开机界面一个多小时，后来没办法进入 <code>Recovery模式</code> 清除所有数据，马上就开机了）然后点击刷机就成功了。</p><p>因为刷完机后只能使用 Google Play 商店，所以建议之前先准备好 VPN 或 Shadowsocks 等翻墙软件。</p><h2 id="使用中的一些问题">使用中的一些问题</h2><h3 id="google-play-商店下载应用始终显示-正在等待连接wlan">Google Play 商店下载应用始终显示 正在等待连接WLAN</h3><p>博主在使用 Google Play 商店时发现下载应用时出现 <code>正在等待连接WLAN</code> 提示。。然而我已经连上 WLAN 了。。</p><p>解决办法是 <code>设置</code> -&gt; <code>更多应用</code> -&gt; <code>Google Play 商店</code> -&gt; <code>卸载更新</code>。 之后再打开 <code>Google Play 商店</code> 就可以下载软件了。不过过几天下载就又提示 <code>正在等待连接WLAN</code>，还需要重复上述操作。这应该是系统 Bug，应该会解决的。</p><h3 id="miui-国际版无法使用-小米钱包mipay公交卡">MIUI 国际版无法使用 小米钱包（MiPay，公交卡）</h3><p>无需 Root 权限，只需要安装两个 apk 就可以啦。 <a href="http://pan.baidu.com/s/1sl2NiQL" target="_blank" rel="noopener">下载链接</a></p><h3 id="小米应用商店旧版下载">小米应用商店旧版下载</h3><p>旧版小米应用商店 <a href="http://pan.baidu.com/s/1gfcgGyJ" target="_blank" rel="noopener">下载链接</a></p><p>不过由于是旧版，风格与 MIUI8 格格不入，所以推荐 <code>酷安</code> 应用商店，很全，不流氓。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MIUI 是基于 Android 开发的手机系统，非常适合国人使用。然而由于国内的某些原因， MIUI 并不支持 Google 全家桶，这对谷歌应用有强烈需求的小伙伴们来说是不能忍的。&lt;/p&gt;
&lt;p&gt;MIUI 国际版很好的解决了这点不足。MIUI 国际版是自带 Google 全家桶的，不仅 MIUI 的功能大部分都有保留，而且还能享受完整的 Google 服务，岂不完美？&lt;/p&gt;
&lt;p&gt;本文将介绍小米手机（米5）如何刷 &lt;code&gt;MIUI 国际版&lt;/code&gt;，以及一些踩坑经历。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="MIUI" scheme="https://xungejiang.com/tags/MIUI/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络面试常考点--参照 谢希仁(第6版)</title>
    <link href="https://xungejiang.com//2017/04/01/computer-network/"/>
    <id>https://xungejiang.com//2017/04/01/computer-network/</id>
    <published>2017-04-01T01:01:42.000Z</published>
    <updated>2017-04-01T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇计算机网络面试常考点，参照《计算机网络（第6版） 谢希仁》教材，希望对大家有所帮助。</p><a id="more"></a><p><img class="lazyload"  data-src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-04-13-001.png?imageView2/2/w/400"></p><p>这是我总结的两个知识点，对于期末复习的小伙伴很有帮助。</p><p><a href="http://pan.baidu.com/s/1bpeTlJx" target="_blank" rel="noopener">知识点1</a></p><p><a href="http://pan.baidu.com/s/1eRQ9VcI" target="_blank" rel="noopener">知识点2</a></p><p>下文主要写的是在笔试或面试中常问的知识点</p><h2 id="ositcpip五层协议的体系结构以及各层协议">OSI，TCP/IP，五层协议的体系结构，以及各层协议</h2><p><strong>OSI分层（7层）</strong>：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。</p><p><strong>TCP/IP分层（4层）</strong>：网络接口层、网际层、运输层、应用层。</p><p><strong>五层协议（5层）</strong>：物理层、数据链路层、网络层、运输层、应用层。</p><p><img class="lazyload"  data-src="http://images.cnitblog.com/i/512940/201406/190956475362659.jpg"></p><p><strong>每一层的协议如下</strong>：</p><ul><li>物理层：RJ45、CLOCK、IEEE802.3 （中继器，集线器，网关）</li><li>数据链路：PPP、FR、HDLC、VLAN、MAC （网桥，交换机）</li><li>网络层：IP、ICMP、ARP、RARP、OSPF、IPX、RIP、IGRP、 （路由器）</li><li>传输层：TCP、UDP、SPX</li><li>会话层：NFS、SQL、NETBIOS、RPC</li><li>表示层：JPEG、MPEG、ASII</li><li>应用层：FTP、DNS、Telnet、SMTP、HTTP、WWW、NFS</li></ul><p><img class="lazyload"  data-src="http://hi.csdn.net/attachment/201201/5/0_1325744597WM32.gif"></p><p><strong>每一层的作用如下</strong>：</p><p><strong>物理层：</strong>通过媒介传输比特,确定机械及电气规范（比特Bit）</p><p><strong>数据链路层</strong>：将比特组装成帧和点到点的传递（帧Frame）</p><p><strong>网络层</strong>：负责数据包从源到宿的传递和网际互连（包Packet）</p><p><strong>传输层</strong>：提供端到端的可靠报文传递和错误恢复（段Segment）</p><p><strong>会话层</strong>：建立、管理和终止会话（会话协议数据单元SPDU）</p><p><strong>表示层</strong>：对数据进行翻译、加密和压缩（表示协议数据单元PPDU）</p><p><strong>应用层</strong>：允许访问OSI环境的手段（应用协议数据单元APDU）</p><p><img class="lazyload"  data-src="http://up.2cto.com/2013/0731/20130731095736383.png"></p><h2 id="ip地址的分类">IP地址的分类</h2><table><thead><tr class="header"><th>类别</th><th>最大网络数</th><th>IP地址范围</th><th>最大主机数</th></tr></thead><tbody><tr class="odd"><td>A</td><td>126（2^7-2)</td><td>0.0.0.0-127.255.255.255</td><td>16777214</td></tr><tr class="even"><td>B</td><td>16384(2^14)</td><td>128.0.0.0-191.255.255.255</td><td>65534</td></tr><tr class="odd"><td>C</td><td>2097152(2^21)</td><td>192.0.0.0-223.255.255.255</td><td>254</td></tr></tbody></table><p>A类地址：以0开头；</p><p>B类地址：以10开头；</p><p>C类地址：以110开头；</p><p>10.0.0.0~10.255.255.255， 172.16.0.0~172.31.255.255， 192.168.0.0~192.168.255.255。（Internet上保留地址用于内部）</p><p><strong>IP地址与子网掩码相与得到主机号</strong></p><h2 id="arp是地址解析协议简单语言解释一下工作原理">ARP是地址解析协议，简单语言解释一下工作原理。</h2><ol type="1"><li><p>首先，每个主机都会在自己的ARP缓冲区中建立一个 ARP 列表，以表示 IP 地址和 MAC 地址之间的对应关系。</p></li><li><p>当源主机要发送数据时，首先检查 ARP 列表中是否有对应 IP 地址的目的主机的 MAC 地址，如果有，则直接发送数据，如果没有，就向本网段的所有主机发送 ARP 数据包，该数据包包括的内容有：<strong>源主机IP地址，源主机 MAC 地址，目的主机的 IP 地址</strong>。</p></li><li><p>当本网络的所有主机收到该 ARP 数据包时，首先检查数据包中的 IP 地址是否是自己的 IP 地址，如果不是，则忽略该数据包，如果是，则首先从数据包中取出源主机的 IP 和 MAC 地址写入到 ARP 列表中，如果已经存在，则覆盖，然后将自己的 MAC 地址写入 ARP 响应包中，告诉源主机自己是它想要找的 MAC 地址。</p></li><li><p>源主机收到ARP响应包后。将目的主机的 IP 和 MAC 地址写入 ARP 列表，并利用此信息发送数据。如果源主机一直没有收到 ARP 响应数据包，表示 ARP 查询失败。</p></li></ol><p>广播发送 ARP 请求，单播发送 ARP 响应。</p><h2 id="各种协议">各种协议</h2><p><strong>ICMP协议：</strong> 因特网控制报文协议。它是 TCP/IP 协议族的一个子协议，用于在 IP 主机、路由器之间传递控制消息。</p><p><strong>TFTP协议：</strong> 是 TCP/IP 协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，提供不复杂、开销不大的文件传输服务。</p><p><strong>HTTP协议：</strong> 超文本传输协议，是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。</p><p><strong>DHCP协议：</strong> 动态主机配置协议，是一种让系统得以连接到网络上，并获取所需要的配置参数手段。</p><p><strong>NAT协议：</strong> 网络地址转换属接入广域网(WAN)技术，是一种将私有（保留）地址转化为合法IP地址的转换技术，</p><p><strong>DHCP协议：</strong> 一个局域网的网络协议，使用 UDP 协议工作，用途：给内部网络或网络服务供应商自动分配 IP 地址，给用户或者内部网络管理员作为对所有计算机作中央管理的手段。</p><h2 id="描述rarp">描述：RARP</h2><p>RARP是逆地址解析协议，作用是完成硬件地址到IP地址的映射，主要用于无盘工作站，因为给无盘工作站配置的IP地址不能保存。</p><p>工作流程：在网络中配置一台RARP服务器，里面保存着 IP 地址和 MAC 地址的映射关系，当无盘工作站启动后，就封装一个 RARP 数据包，里面有其 MAC 地址，然后广播到网络上去，当服务器收到请求包后，就查找对应的 MAC 地址的 IP 地址装入响应报文中发回给请求者。</p><p>因为需要广播请求报文，因此 RARP 只能用于具有广播能力的网络。</p><h2 id="tcp三次握手和四次挥手的全过程">TCP三次握手和四次挥手的全过程</h2><p><strong>三次握手：</strong></p><p>第一次握手：客户端发送 syn 包 (syn=x) 到服务器，并进入 SYN_SEND 状态，等待服务器确认；</p><p>第二次握手：服务器收到 syn 包，必须确认客户的 SYN （ack=x+1） ，同时自己也发送一个 SYN 包 （syn=y） ，即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态；</p><p>第三次握手：客户端收到服务器的 SYN＋ACK 包，向服务器发送确认包 ACK (ack=y+1) ，此包发送完毕，客户端和服务器进入 ESTABLISHED 状态，完成三次握手。</p><p>握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。</p><p><strong>四次握手</strong></p><p>与建立连接的 <strong>三次握手</strong> 类似，断开一个 TCP 连接则需要 四次握手 。</p><p>第一次挥手：主动关闭方发送一个 FIN ，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不 会再给你发数据了(当然，在 fin 包之前发送出去的数据，如果没有收到对应的 ack 确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可以接受数据。</p><p>第二次挥手：被动关闭方收到 FIN 包后，发送一个 ACK 给对方，确认序号为收到序号 +1 （与 SYN 相同，一个 FIN 占用一个序号）。</p><p>第三次挥手：被动关闭方发送一个 FIN ，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。</p><p>第四次挥手：主动关闭方收到 FIN 后，发送一个 ACK 给被动关闭方，确认序号为收到序号 +1，至此，完成四次挥手。</p><p><img class="lazyload"  data-src="http://images0.cnblogs.com/blog2015/621032/201508/092017231747399.jpg"></p><h2 id="在浏览器中输入-www.baidu.com-后执行的全部过程">在浏览器中输入 www.baidu.com 后执行的全部过程</h2><ol type="1"><li><p>客户端浏览器通过 DNS 解析到 www.baidu.com 的IP地址 220.181.27.48 ，通过这个IP地址找到客户端到服务器的路径。客户端浏览器发起一个 HTTP 会话到 220.161.27.48 ，然后通过TCP进行封装数据包，输入到网络层。</p></li><li><p>在客户端的传输层，把 HTTP 会话请求分成报文段，添加源和目的端口，如服务器使用 80 端口监听客户端的请求，客户端由系统随机选择一个端口如 5000 ，与服务器进行交换，服务器把相应的请求返回给客户端的 5000 端口。然后使用IP层的IP地址查找目的端。</p></li><li><p>客户端的网络层不用关系应用层或者传输层的东西，主要做的是通过查找路由表确定如何到达服务器，期间可能经过多个路由器，这些都是由路由器来完成的工作，我不作过多的描述，无非就是通过查找路由表决定通过那个路径到达服务器。</p></li><li><p>客户端的链路层，包通过链路层发送到路由器，通过邻居协议查找给定 IP 地址的 MAC 地址，然后发送 ARP 请求查找目的地址，如果得到回应后就可以使用 ARP 的请求应答交换的IP数据包现在就可以传输了，然后发送 IP 数据包到达服务器的地址。</p></li></ol><h2 id="tcp和udp的区别">TCP和UDP的区别</h2><table><thead><tr class="header"><th>--</th><th>TCP</th><th>UDP</th></tr></thead><tbody><tr class="odd"><td>连接性</td><td>面向连接</td><td>无连接</td></tr><tr class="even"><td>可靠性</td><td>可靠</td><td>不可靠</td></tr><tr class="odd"><td>报文</td><td>面向字节流</td><td>面向报文</td></tr><tr class="even"><td>应用场合</td><td>传输大量的数据</td><td>少量数据</td></tr><tr class="odd"><td>速度</td><td>慢</td><td>快</td></tr><tr class="even"><td>流量控制</td><td>有</td><td>无</td></tr><tr class="odd"><td>拥塞控制</td><td>有</td><td>无</td></tr></tbody></table><h2 id="tcp对应的协议和udp对应的协议">TCP对应的协议和UDP对应的协议</h2><p><strong>TCP对应的协议：</strong></p><p>（1） <strong>FTP</strong>：定义了文件传输协议，使用 <strong>21</strong> 端口。</p><p>（2） <strong>Telnet</strong>：一种用于远程登陆的端口，使用 <strong>23</strong> 端口，用户可以以自己的身份远程连接到计算机上，可提供基于 DOS 模式下的通信服务。</p><p>（3） <strong>SMTP</strong>：邮件传送协议，用于发送邮件。服务器开放的是 <strong>25</strong> 端口。</p><p>（4） <strong>POP3</strong>：它是和SMTP对应， POP3 用于接收邮件。POP3协议所用的是 <strong>110</strong> 端口。</p><p>（5）<strong>HTTP</strong>：是从Web服务器传输超文本到本地浏览器的传送协议，使用 <strong>80</strong> 端口。</p><p><strong>UDP对应的协议：</strong></p><p>（1） <strong>DNS</strong>：用于域名解析服务，将域名地址转换为IP地址。 DNS 用的是 <strong>53</strong> 端口。</p><p>（2） <strong>SNMP</strong>：简单网络管理协议，使用 <strong>161</strong> 端口，是用来管理网络设备的。由于网络设备很多，无连接的服务就体现出其优势。</p><p>（3） <strong>TFTP</strong> (Trival File Transfer Protocal)，简单文件传输协议，该协议在熟知端口 <strong>69</strong> 上使用UDP服务。</p><h2 id="dns域名系统简单描述其工作原理">DNS域名系统，简单描述其工作原理。</h2><p>当DNS客户机需要在程序中使用名称时，它会查询DNS服务器来解析该名称。客户机发送的每条查询信息包括三条信息，包括：指定的DNS域名，指定的查询类型，DNS域名的指定类别。基于 UDP 服务，端口 53 。 该应用一般不直接为用户使用，而是为其他应用服务，如 HTTP， SMTP 等在其中需要完成主机名到IP地址的转换。</p><h2 id="面向连接和非面向连接的服务的特点是什么">面向连接和非面向连接的服务的特点是什么？</h2><p>面向连接的服务，通信双方在进行通信之前，要先在双方建立起一个完整的可以彼此沟通的通道，在通信过程中，整个连接的情况一直可以被实时地监控和管理。</p><p>非面向连接的服务，不需要预先建立一个联络两个通信节点的连接，需要通信的时候，发送节点就可以往网络上发送信息，让信息自主地在网络上去传，一般在传输的过程中不再加以监控。</p><h2 id="tcp的三次握手过程为什么会采用三次握手若采用二次握手可以吗">TCP的三次握手过程？为什么会采用三次握手，若采用二次握手可以吗？</h2><p>答：建立连接的过程是利用客户服务器模式，假设主机A为客户端，主机B为服务器端。</p><p>（1）TCP的三次握手过程：主机 A 向 B 发送连接请求；主机 B 对收到的主机 A 的报文段进行确认；主机 A 再次对主机 B 的确认进行确认。</p><p>（2）采用三次握手是为了防止失效的连接请求报文段突然又传送到主机 B ，因而产生错误。 失效的连接请求报文段是指：主机 A 发出的连接请求没有收到主机 B 的确认，于是经过一段时间后，主机 A 又重新向主机 B 发送连接请求，且建立成功，顺序完成数据传输。考虑这样一种特殊情况，主机 A 第一次发送的连接请求并没有丢失，而是因为网络节点导致延迟达到主机 B ，主机B以为是主机 A 又发起的新连接，于是主机 B 同意连接，并向主机 A 发回确认，但是此时主机 A 根本不会理会，主机 B 就一直在等待主机 A 发送数据，导致主机 B 的资源浪费。</p><p>（3）采用两次握手不行，原因就是上面说的实效的连接请求的特殊情况。</p><h2 id="端口及对应的服务">端口及对应的服务</h2><table><thead><tr class="header"><th>服务</th><th>端口号</th><th>服务</th><th>端口号</th></tr></thead><tbody><tr class="odd"><td>FTP</td><td>21</td><td>SSH</td><td>22</td></tr><tr class="even"><td>telnet</td><td>23</td><td>SMTP</td><td>25</td></tr><tr class="odd"><td>Domain(域名服务器)</td><td>53</td><td>HTTP</td><td>80</td></tr><tr class="even"><td>POP3</td><td>110</td><td>NTP（网络时间协议）</td><td>123</td></tr><tr class="odd"><td>MySQL数据库服务</td><td>3306</td><td>Shell或 cmd</td><td>514</td></tr><tr class="even"><td>POP-2</td><td>109</td><td>SQL Server</td><td>1433</td></tr></tbody></table><h2 id="了解交换机路由器网关的概念并知道各自的用途">了解交换机、路由器、网关的概念，并知道各自的用途</h2><p>1）交换机</p><p>在计算机网络系统中，交换机是针对共享工作模式的弱点而推出的。交换机拥有一条高带宽的背部总线和内部交换矩阵。交换机的所有的端口都挂接在这条背 部总线上，当控制电路收到数据包以后，处理端口会查找内存中的地址对照表以确定目的 MAC （网卡的硬件地址）的 NIC （网卡）挂接在哪个端口上，通过内部 交换矩阵迅速将数据包传送到目的端口。目的 MAC 若不存在，交换机才广播到所有的端口，接收端口回应后交换机会“学习”新的地址，并把它添加入内部地址表中。</p><p>交换机工作于 OSI 参考模型的第二层，即数据链路层。交换机内部的CPU会在每个端口成功连接时，通过 ARP 协议学习它的 MAC 地址，保存成一张 ARP 表。在今后的通讯中，发往该 MAC 地址的数据包将仅送往其对应的端口，而不是所有的端口。因此，交换机可用于划分数据链路层广播，即冲突域；但它不能划分网络层广播，即广播域。</p><p>交换机被广泛应用于二层网络交换，俗称 二层交换机 。</p><p>交换机的种类有：二层交换机、三层交换机、四层交换机、七层交换机分别工作在OSI七层模型中的第二层、第三层、第四层盒第七层，并因此而得名。</p><p>2）路由器</p><p><strong>路由器</strong>（<strong>Router</strong>）是一种计算机网络设备，提供了路由与转送两种重要机制，可以决定数据包从来源端到目的端所经过 的路由路径（host到host之间的传输路径），这个过程称为路由；将路由器输入端的数据包移送至适当的路由器输出端(在路由器内部进行)，这称为转 送。路由工作在OSI模型的第三层 即网络层，例如网际协议。</p><p><strong>路由器的一个作用是连通不同的网络，另一个作用是选择信息传送的线路。</strong> 路由器与交换器的差别，路由器是属于OSI第三层的产品，交换器是OSI第二层的产品(这里特指二层交换机)。</p><p>3）网关</p><p><strong>网关</strong> （Gateway）， <strong>网关</strong> 顾名思义就是连接两个网络的设备，区别于路由器（由于历史的原因，许多有关TCP/IP 的文献曾经把网络层使用的路由器（Router）称为网关，在今天很多局域网采用都是路由来接入网络，因此现在通常指的网关就是路由器的IP），经常在家 庭中或者小型企业网络中使用，用于连接局域网和Internet。 网关也经常指把一种协议转成另一种协议的设备，比如语音网关。</p><p>在传统TCP/IP术语中，网络设备只分成两种，一种为网关（gateway），另一种为主机（host）。网关能在网络间转递数据包，但主机不能转送数据包。在主机（又称终端系统，end system）中，数据包需经过 TCP/IP 四层协议处理，但是在网关（又称中介系 统，intermediate system）只需要到达网际层（Internet layer），决定路径之后就可以转送。在当时，网关 （gateway）与路由器（router）还没有区别。</p><p>在现代网络术语中，网关（gateway）与路由器（router）的定义不同。网关（gateway）能在不同协议间移动数据，而路由器（router）是在不同网络间移动数据，相当于传统所说的IP网关（IP gateway）。</p><p><strong>网关</strong> 是连接两个网络的设备，对于语音网关来说，他可以连接 PSTN 网络和以太网，这就相当于 VOIP ，把不同电话中的模拟信号通过网关而转换成数字信号，而且加入协议再去传输。在到了接收端的时候再通过 <strong>网关</strong> 还原成模拟的电话信号，最后才能在电话机上听到。</p><p>对于以太网中的 <strong>网关</strong> 只能转发三层以上数据包，这一点和路由是一样的。而不同的是 <strong>网关</strong> 中并没有路由表，他只能按照预先设定的不同网段来进行转发。网关最重要的一点就是端口映射，子网内用户在外网看来只是外网的IP地址对应着不同的端口，这样看来就会保护子网内的用户。</p><h2 id="子网掩码及网络划分">子网掩码及网络划分</h2><p>随着互连网应用的不断扩大，原先的 IPv4 的弊端也逐渐暴露出来，即网络号占位太多，而主机号位太少，所以其能提供的主机地址也越来越稀缺，目前除了使用 NAT 在企业内部利用保留地址自行分配以外，通常都对一个高类别的IP地址进行再划分，以形成多个子网，提供给不同规模的用户群使用。</p><p>这里主要是为了在网络分段情况下有效地利用 IP 地址，通过对主机号的高位部分取作为子网号，从通常的网络位界限中扩展或压缩子网掩码，用来创建某类地址的更多子网。但创建更多的子网时，在每个子网上的可用主机地址数目会比原先减少。</p><h3 id="什么是子网掩码">什么是子网掩码？</h3><p>子网掩码是标志两个IP地址是否同属于一个子网的，也是32位二进制地址，其每一个为1代表该位是网络位，为0代表主机位。它和IP地址一样也是使用点式十进制来表示的。如果两个 IP 地址在子网掩码的按位与的计算下所得结果相同，即表明它们共属于同一子网中。</p><p>在计算子网掩码时，我们要注意 IP 地址中的保留地址，即“0”地址和广播地址，它们是指主机地址或网络地址全为“0”或“1”时的IP地址，它们代表着本网络地址和广播地址，一般是不能被计算在内的。</p><h3 id="子网掩码的计算">子网掩码的计算：</h3><p>对于无须再划分成子网的IP地址来说，其子网掩码非常简单，即按照其定义即可写出：如某B类IP地址为 10.12.3.0 ，无须再分割子网，则该IP地址的子网掩码 255.255.0.0 。如果它是一个C类地址，则其子网掩码为 255.255.255.0 。其它类推，不再详述。下面我们关键要介绍的是一个 IP 地址，还需要将其高位主机位再作为划分出的子网网络号，剩下的是每个子网的主机号，这时该如何进行每个子网的掩码计算。</p><p>下面总结一下有关子网掩码和网络划分常见的面试考题：</p><p><strong>1）利用子网数来计算</strong></p><p>在求子网掩码之前必须先搞清楚要划分的子网数目，以及每个子网内的所需主机数目。</p><ol type="1"><li>将子网数目转化为二进制来表示;</li></ol><p>如欲将 B 类 IP 地址 168.195.0.0 划分成27个子网：27 = 11011；</p><ol start="2" type="1"><li>取得该二进制的位数，为 N ；</li></ol><p>该二进制为五位数，N = 5</p><ol start="3" type="1"><li>取得该 IP 地址的类子网掩码，将其主机地址部分的的前 N 位，置 1 ，即得出该IP地址划分子网的子网掩码。</li></ol><p>将 B 类地址的子网掩码 255.255.0.0 的主机地址前 5 位，置 1，得到 255.255.248.0</p><p><strong>2）利用主机数来计算</strong></p><p>如欲将 B 类IP地址 168.195.0.0 划分成若干子网，每个子网内有主机 700 台：</p><ol type="1"><li>将主机数目转化为二进制来表示；</li></ol><p>700 = 1010111100；</p><ol start="2" type="1"><li>如果主机数小于或等于 254（注意去掉保留的两个 IP 地址），则取得该主机的二进制位数，为 N，这里肯定 N &lt; 8。如果大于 254，则 N &gt; 8 ，这就是说主机地址将占据不止 8 位；</li></ol><p>该二进制为十位数，N=10；</p><ol start="3" type="1"><li>使用 255.255.255.255 来将该类IP地址的主机地址位数全部置 1 ，然后从后向前的将 N 位全部置为 0，即为子网掩码值。</li></ol><p>将该B类地址的子网掩码255.255.0.0的主机地址全部置1，得到255.255.255.255，然后再从后向前将后 10位置0,即为： 11111111.11111111.11111100.00000000 ，即 255.255.252.0 。这就是该欲划分成主机为 700 台的 B 类 IP 地址 168.195.0.0 的子网掩码。</p><p><strong>3）还有一种题型，要你根据每个网络的主机数量进行子网地址的规划和计算子网掩码。这也可按上述原则进行计算。</strong></p><p>比如一个子网有10台主机，那么对于这个子网需要的IP地址是：</p><p>10 ＋ 1 ＋ 1 ＋ 1 ＝ 13</p><p>注意：加的第一个 1 是指这个网络连接时所需的网关地址，接着的两个 1 分别是指 <strong>网络地址</strong> 和 <strong>广播地址</strong> 。</p><p>因为 13 小于 16 （ 16 等于 2 的 4 次方），所以主机位为 4 位。而 256 － 16 ＝ 240，所以该子网掩码为 255.255.255.240 。</p><p>如果一个子网有 14 台主机，不少人常犯的错误是：依然分配具有 16 个地址空间的子网，而忘记了给网关分配地址。这样就错误了，因为 14 ＋ 1 ＋ 1 ＋ 1 ＝ 17，17 大于 16，所以我们只能分配具有 32 个地址（32 等于 2 的 5 次方）空间的子网。这时子网掩码为： 255.255.255.224。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇计算机网络面试常考点，参照《计算机网络（第6版） 谢希仁》教材，希望对大家有所帮助。&lt;/p&gt;
    
    </summary>
    
    
      <category term="知识点" scheme="https://xungejiang.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="计算机网络" scheme="https://xungejiang.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>使用 Markdown + MathJax 在博客里插入数学公式</title>
    <link href="https://xungejiang.com//2017/03/03/markdown-mathjax/"/>
    <id>https://xungejiang.com//2017/03/03/markdown-mathjax/</id>
    <published>2017-03-03T01:01:42.000Z</published>
    <updated>2017-03-03T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>在书写数值计算类文章，难免需要插入复杂的数学公式。一种是用图片在网页上展示，另外一种是使用 <a href="https://www.mathjax.org" target="_blank" rel="noopener">MathJax</a> 来展示复杂的数学公式。</p><a id="more"></a><p>它直接使用 Javascript 使用矢量字库或 SVG 文件来显示数学公式。优点是效果好，比如在 Retina 屏幕上也不会变得模糊。并且可以直接把公式写在 Markdown 文章里。本文介绍在 Sublime 中使用 MathJax 在 Markdown 文件里直接插入数学公式。并且附带一个简单的书写数学公式的 LaTex 教程。</p><h2 id="工具">工具</h2><h3 id="配置-markdown-preview-来支持-mathjax">配置 Markdown Preview 来支持 MathJax</h3><p>使用 Sublime + Markdown Preview 插件来写博客时。需要开启 Markdown Preview 对 MathJax 的支持，这样在预览界面才能正确地显示数学公式。方法是打开在 Markdown Preview 的用户配置文件 (Package Settings -&gt; Markdown Preview -&gt; Setting - User) 里添加如下内容：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">"enable_mathjax":</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="配置-pelican-主题模板来支持-mathjax">配置 Pelican 主题模板来支持 MathJax</h3><p>如果博客不支持 MathJax 可以在模板中添加如下脚本</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- mathjax config similar to math.stackexchange --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/x-mathjax-config"</span>&gt;</span><br><span class="line">MathJax.Hub.Config(&#123;</span><br><span class="line">    jax: [<span class="string">"input/TeX"</span>, <span class="string">"output/HTML-CSS"</span>],</span><br><span class="line">    tex2jax: &#123;</span><br><span class="line">        inlineMath: [ [<span class="string">'$'</span>, <span class="string">'$'</span>] ],</span><br><span class="line">        displayMath: [ [<span class="string">'$$'</span>, <span class="string">'$$'</span>]],</span><br><span class="line">        processEscapes: <span class="literal">true</span>,</span><br><span class="line">        skipTags: [<span class="string">'script'</span>, <span class="string">'noscript'</span>, <span class="string">'style'</span>, <span class="string">'textarea'</span>, <span class="string">'pre'</span>, <span class="string">'code'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    messageStyle: <span class="string">"none"</span>,</span><br><span class="line">    <span class="string">"HTML-CSS"</span>: &#123; <span class="attr">preferredFont</span>: <span class="string">"TeX"</span>, <span class="attr">availableFonts</span>: [<span class="string">"STIX"</span>,<span class="string">"TeX"</span>] &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">" src="</span>https:<span class="comment">//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="latex-简明教程">LaTex 简明教程</h2><h3 id="规则">规则</h3><p>关于在 Markdown 书写 LaTex 数学公式有几个规则常用规则需要记住：</p><p><strong>行内公式</strong> 行内公式使用 <code>$</code> 和 <code>$</code> 作为公式的左右边界，如 <span class="math inline">\(h(x) = \theta_0 + \theta_1 x\)</span> 公式的 LaTex 内容如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$h(x) = \theta_0 + \theta_1 x$</span><br></pre></td></tr></table></figure><p><strong>行间公式</strong> 公式需要独立显示一行时，使用 <code>$$</code> 来作为公式的左右边界，如</p><p><span class="math display">\[\theta_i = \theta_i - \alpha\frac\partial{\partial\theta_i}J(\theta)\]</span></p><p>的 LaTex 代码为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\theta_i = \theta_i - \alpha\frac\partial&#123;\partial\theta_i&#125;J(\theta)</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p><strong>常用 LaTex 代码</strong> 需要记住的几个常用的符号，这样书写起来会快一点</p><table><thead><tr class="header"><th>编码</th><th>说明</th><th>示例</th></tr></thead><tbody><tr class="odd"><td></td><td>分子分母之间的横线</td><td>\(1x\)</td></tr><tr class="even"><td>_</td><td>用下划线来表示下标</td><td>\(x_i\)</td></tr><tr class="odd"><td>^</td><td>次方运算符来表示上标</td><td>\(x^i\)</td></tr><tr class="even"><td></td><td>累加器，上下标用上面介绍的编码来书写</td><td>\(\)</td></tr><tr class="odd"><td></td><td>希腊字母 alpha</td><td>\(y := x\)</td></tr></tbody></table><p>要特别注意公式里空格和 <code>{}</code> 的运用规则。基本原则是，空格可加可不加，但如果会引起歧义，最好加上空格。<code>{}</code> 是用来组成群组的。比如写一个分式时，分母是一个复杂公式时，可以用 <code>{}</code> 包含起来，这样整个复杂公式都会变成分母了。</p><h3 id="几个非常有用的资源">几个非常有用的资源</h3><ul><li>这是一篇质量很高的<a href="http://mlworks.cn/posts/introduction-to-mathjax-and-latex-expression/" target="_blank" rel="noopener">介绍 MathJax 的中文博客文章</a>，需要注意的是如果是用 markdown 编写 MathJax 公式，当公式里需要两个斜杠  时要写四个斜杠 。因为  会被 markdown 转义一次。</li><li>Github 上有个<a href="https://kerzol.github.io/markdown-mathjax/editor.html" target="_blank" rel="noopener">在线 Markdown MathJax 编辑器</a>，可以在这里练习，平时写公式时也可以在这里先写好再拷贝到文章里</li><li>这是 <a href="http://www.forkosh.com/mathtextutorial.html" target="_blank" rel="noopener">LaTex 完整教程</a>，包含完整的 LaTex 数学公式的内容，包括更高级的格式控制等</li><li>这是一份PDF 格式的 <a href="http://mirrors.ctan.org/info/symbols/math/maths-symbols.pdf" target="_blank" rel="noopener">MathJax 支持的数学符号表</a>，当需要书写复杂数学公式时，一些非常特殊的符号的转义字符可以从这里查到</li></ul><p>好啦，这样差不多就可以写出优美的数学公式啦。</p><p>本文参考 <a href="http://blog.kamidox.com/write-math-formula-with-mathjax.html" target="_blank" rel="noopener">kamidox.com</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在书写数值计算类文章，难免需要插入复杂的数学公式。一种是用图片在网页上展示，另外一种是使用 &lt;a href=&quot;https://www.mathjax.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MathJax&lt;/a&gt; 来展示复杂的数学公式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="Markdown" scheme="https://xungejiang.com/tags/Markdown/"/>
    
      <category term="MathJax" scheme="https://xungejiang.com/tags/MathJax/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis 的简单案例</title>
    <link href="https://xungejiang.com//2017/02/14/MyBatis-demo/"/>
    <id>https://xungejiang.com//2017/02/14/MyBatis-demo/</id>
    <published>2017-02-14T01:01:42.000Z</published>
    <updated>2017-02-14T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个稍复杂的 MyBatis 连结数据库的案例，涉及多表查询，以及稍复杂的 SQL 语句</p><p>共三张表：学生表 student，班级表 class，分数表 score</p><a id="more"></a><p>案例为</p><p>1.查询 <strong>张三</strong> 的 <strong>数学</strong> 成绩 2.查询 <strong>三班</strong> 全体成员成绩 3.查询 <strong>数学</strong> 第4，5，6名的 <strong>学生姓名</strong></p><h2 id="导入-jar-包">导入 jar 包</h2><p>博主使用的是 MySQL 数据库，所以需要导一些 jar 包</p><p>新建一个 java project , 在工程下新建文件夹，命名为 <strong>lib</strong> ，将<a href="http://pan.baidu.com/s/1jIKxFlc" target="_blank" rel="noopener">MySQL 的驱动文件</a> 和 <a href="http://pan.baidu.com/s/1b7bZ46" target="_blank" rel="noopener">MyBatis 的驱动文件</a> 复制到该文件夹，并右键 <strong>Build Path</strong> -&gt; <strong>Add to Build Path</strong> 。这时发现在工程里出现 <strong>Referenced Libraries</strong> ，里面有和刚才同名的 <strong>jar</strong> 文件。</p><h2 id="创建数据库">创建数据库</h2><h3 id="建表">建表</h3><p>建表的 sql 语句如下(为了方便没有外键)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">class</span>(</span><br><span class="line">    classno <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">    classname <span class="built_in">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">    studentno <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">    studentname <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    sex <span class="built_in">varchar</span>(<span class="number">10</span>),</span><br><span class="line">    classno <span class="built_in">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> score(</span><br><span class="line">    scoreid <span class="built_in">int</span> primary <span class="keyword">key</span>,</span><br><span class="line">    studentno <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">object</span> <span class="built_in">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    score <span class="built_in">float</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="插入数据">插入数据</h3><p>插入数据的 sql 语句如下</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`class`</span> (<span class="string">`classno`</span>, <span class="string">`classname`</span>) <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'一班'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`class`</span> (<span class="string">`classno`</span>, <span class="string">`classname`</span>) <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'二班'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`class`</span> (<span class="string">`classno`</span>, <span class="string">`classname`</span>) <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'三班'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`studentno`</span>, <span class="string">`studentname`</span>, <span class="string">`sex`</span>, <span class="string">`classno`</span>) <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'张三'</span>, <span class="string">'男'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`studentno`</span>, <span class="string">`studentname`</span>, <span class="string">`sex`</span>, <span class="string">`classno`</span>) <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'李四'</span>, <span class="string">'女'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`studentno`</span>, <span class="string">`studentname`</span>, <span class="string">`sex`</span>, <span class="string">`classno`</span>) <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'王五'</span>, <span class="string">'女'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`studentno`</span>, <span class="string">`studentname`</span>, <span class="string">`sex`</span>, <span class="string">`classno`</span>) <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'吴六'</span>, <span class="string">'男'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`studentno`</span>, <span class="string">`studentname`</span>, <span class="string">`sex`</span>, <span class="string">`classno`</span>) <span class="keyword">VALUES</span> (<span class="string">'5'</span>, <span class="string">'赵七'</span>, <span class="string">'男'</span>, <span class="string">'3'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`studentno`</span>, <span class="string">`studentname`</span>, <span class="string">`sex`</span>, <span class="string">`classno`</span>) <span class="keyword">VALUES</span> (<span class="string">'6'</span>, <span class="string">'孙八'</span>, <span class="string">'女'</span>, <span class="string">'3'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`score`</span> (<span class="string">`scoreid`</span>, <span class="string">`studentno`</span>, <span class="string">`object`</span>, <span class="string">`score`</span>) <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'1'</span>, <span class="string">'语文'</span>, <span class="string">'99'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`score`</span> (<span class="string">`scoreid`</span>, <span class="string">`studentno`</span>, <span class="string">`object`</span>, <span class="string">`score`</span>) <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'1'</span>, <span class="string">'数学'</span>, <span class="string">'98'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`score`</span> (<span class="string">`scoreid`</span>, <span class="string">`studentno`</span>, <span class="string">`object`</span>, <span class="string">`score`</span>) <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'2'</span>, <span class="string">'语文'</span>, <span class="string">'92'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`score`</span> (<span class="string">`scoreid`</span>, <span class="string">`studentno`</span>, <span class="string">`object`</span>, <span class="string">`score`</span>) <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'2'</span>, <span class="string">'数学'</span>, <span class="string">'94'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`score`</span> (<span class="string">`scoreid`</span>, <span class="string">`studentno`</span>, <span class="string">`object`</span>, <span class="string">`score`</span>) <span class="keyword">VALUES</span> (<span class="string">'5'</span>, <span class="string">'3'</span>, <span class="string">'语文'</span>, <span class="string">'95'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`score`</span> (<span class="string">`scoreid`</span>, <span class="string">`studentno`</span>, <span class="string">`object`</span>, <span class="string">`score`</span>) <span class="keyword">VALUES</span> (<span class="string">'6'</span>, <span class="string">'3'</span>, <span class="string">'数学'</span>, <span class="string">'93'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`score`</span> (<span class="string">`scoreid`</span>, <span class="string">`studentno`</span>, <span class="string">`object`</span>, <span class="string">`score`</span>) <span class="keyword">VALUES</span> (<span class="string">'7'</span>, <span class="string">'4'</span>, <span class="string">'语文'</span>, <span class="string">'97'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`score`</span> (<span class="string">`scoreid`</span>, <span class="string">`studentno`</span>, <span class="string">`object`</span>, <span class="string">`score`</span>) <span class="keyword">VALUES</span> (<span class="string">'8'</span>, <span class="string">'4'</span>, <span class="string">'数学'</span>, <span class="string">'96'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`score`</span> (<span class="string">`scoreid`</span>, <span class="string">`studentno`</span>, <span class="string">`object`</span>, <span class="string">`score`</span>) <span class="keyword">VALUES</span> (<span class="string">'9'</span>, <span class="string">'5'</span>, <span class="string">'语文'</span>, <span class="string">'94'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`score`</span> (<span class="string">`scoreid`</span>, <span class="string">`studentno`</span>, <span class="string">`object`</span>, <span class="string">`score`</span>) <span class="keyword">VALUES</span> (<span class="string">'10'</span>, <span class="string">'5'</span>, <span class="string">'数学'</span>, <span class="string">'93'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`score`</span> (<span class="string">`scoreid`</span>, <span class="string">`studentno`</span>, <span class="string">`object`</span>, <span class="string">`score`</span>) <span class="keyword">VALUES</span> (<span class="string">'11'</span>, <span class="string">'6'</span>, <span class="string">'语文'</span>, <span class="string">'94'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`score`</span> (<span class="string">`scoreid`</span>, <span class="string">`studentno`</span>, <span class="string">`object`</span>, <span class="string">`score`</span>) <span class="keyword">VALUES</span> (<span class="string">'12'</span>, <span class="string">'6'</span>, <span class="string">'数学'</span>, <span class="string">'95'</span>);</span><br></pre></td></tr></table></figure><h2 id="配置文件连接数据库">配置文件连接数据库</h2><h3 id="db.properties">db.properties</h3><p>首先配置连结数据库文件，在 <code>src</code> 下新建文件，名称为 <code>db.properties</code> ，内容如下，其中 <code>20170214</code> 为数据库名称，需要改成你自己的数据库名字。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc.driver = com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url = jdbc:mysql://localhost:3306/20170214?useUnicode=true&amp;amp;characterEncoding=utf-8</span><br><span class="line">jdbc.username = root</span><br><span class="line">jdbc.password = root</span><br></pre></td></tr></table></figure><h3 id="sqlmapconfig.xml">SqlMapConfig.xml</h3><p>在 <code>src</code> 下新建一个 <code>SqlMapConfig.xml</code> 文件，内容为：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 事务管理类型，JDBC表示直接使用JDBC的提交和回滚设置，依赖于数据源得到的连接来管理事务 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据库连接池POOLED表示使用数据库连接池 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="新建-pojo-对象类">新建 pojo 对象类</h2><p>在 <code>src</code> 下新建一个包，包名为 <code>pojo</code>，然后根据数据库列名新建 <code>student</code>, <code>class</code>, <code>score</code> 三个类，注意列名与对象名应一致，并进行set, get方法</p><h3 id="class.java">Class.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> classno;</span><br><span class="line">    <span class="keyword">private</span> String classname;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getClassno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> classno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClassno</span><span class="params">(<span class="keyword">int</span> classno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.classno = classno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getClassname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> classname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClassname</span><span class="params">(String classname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.classname = classname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="student.java">Student.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> studentno;</span><br><span class="line">    <span class="keyword">private</span> String studentname;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> classno;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStudentno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentno</span><span class="params">(<span class="keyword">int</span> studentno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentno = studentno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStudentname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentname</span><span class="params">(String studentname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentname = studentname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getClassno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> classno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClassno</span><span class="params">(<span class="keyword">int</span> classno)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.classno = classno;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="score.java">Score.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Score</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> scoreid;</span><br><span class="line">    <span class="keyword">private</span> String studentname;</span><br><span class="line">    <span class="keyword">private</span> String object;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> score;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getScoreid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> scoreid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScoreid</span><span class="params">(<span class="keyword">int</span> scoreid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.scoreid = scoreid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStudentname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentname</span><span class="params">(String studentname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentname = studentname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObject</span><span class="params">(String object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">float</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置接口映射">配置接口映射</h2><h3 id="studentmapper.java">StudentMapper.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">queryScoreByNameAndObject</span><span class="params">(String name, String object)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新建-sql-语句映射文件-studentmapper.xml">新建 SQL 语句映射文件 StudentMapper.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"mapper.StudentMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryScoreByNameAndObject"</span> <span class="attr">parameterType</span>=<span class="string">"pojo.FirstParameter"</span>  <span class="attr">resultType</span>=<span class="string">"pojo.FirstResult"</span>&gt;</span></span><br><span class="line">        select a.studentname, b.score, b.object</span><br><span class="line">          from student a, score b</span><br><span class="line">         where a.studentno = b.studentno</span><br><span class="line">           and a.studentname =#&#123;studentname&#125;</span><br><span class="line">           and b.object = #&#123;object&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由 SQL 语句得知这是两个表的查询语句 传入参数有 studentname, object, 传出参数有 a.studentname, b.object, b.score。</p><p>以上数据因为都是从两个表中获取，所以需要再写两个 pojo 类：FirstParameter.java 和 FirstResult.java</p><h3 id="firstparameter.java">FirstParameter.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstParameter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String studentname;</span><br><span class="line">    <span class="keyword">private</span> String object;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getStudentname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentname</span><span class="params">(String studentname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentname = studentname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObject</span><span class="params">(String object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="firstresult.java">FirstResult.java</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstResult</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String studentname;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> score;</span><br><span class="line">    <span class="keyword">private</span> String object;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStudentname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudentname</span><span class="params">(String studentname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.studentname = studentname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">float</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObject</span><span class="params">(String object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类">测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pojo.FirstResult;</span><br><span class="line"><span class="keyword">import</span> pojo.FirstParameter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream is = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">        SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">        SqlSession session=sqlSessionFactory.openSession();</span><br><span class="line">        <span class="comment">// 查询张三的语文成绩</span></span><br><span class="line">        FirstParameter d=<span class="keyword">new</span> FirstParameter();</span><br><span class="line">        d.setStudentname(<span class="string">"张三"</span>);</span><br><span class="line">        d.setObject(<span class="string">"语文"</span>);</span><br><span class="line">        FirstResult q=session.selectOne(<span class="string">"queryScoreByNameAndObject"</span>, d);</span><br><span class="line">        <span class="keyword">if</span>(q!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(q.getStudentname()+<span class="string">":"</span>+q.getScore());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个稍复杂的 MyBatis 连结数据库的案例，涉及多表查询，以及稍复杂的 SQL 语句&lt;/p&gt;
&lt;p&gt;共三张表：学生表 student，班级表 class，分数表 score&lt;/p&gt;
    
    </summary>
    
    
      <category term="知识点" scheme="https://xungejiang.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="MyBatis" scheme="https://xungejiang.com/tags/MyBatis/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 简明语法手册</title>
    <link href="https://xungejiang.com//2017/02/07/markdown-introduction/"/>
    <id>https://xungejiang.com//2017/02/07/markdown-introduction/</id>
    <published>2017-02-07T01:01:42.000Z</published>
    <updated>2017-02-07T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown 是文本 在此，我们总结 Markdown 的优点如下：</p><p>纯文本，所以兼容性极强，可以用所有文本编辑器打开。 让你专注于文字而不是排版。 格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。 Markdown 的标记语法有极好的可读性。</p><a id="more"></a><h2 id="粗体斜体删除线">粗体，斜体，删除线</h2><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**粗体**</span><br><span class="line">*斜体*</span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><p>显示效果：</p><ul><li><strong>粗体</strong></li><li><em>斜体</em></li><li><del>删除线</del></li></ul><h2 id="分级标题">分级标题</h2><p>可以行首加井号表示不同级别的标题 (H1-H6)，代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># H1</span><br><span class="line">## H2</span><br><span class="line">### H3</span><br><span class="line">#### H4</span><br><span class="line">##### H5</span><br><span class="line">###### H6</span><br></pre></td></tr></table></figure><p>因为该代码会加入目录里，所以不做演示了。</p><h2 id="外链接">外链接</h2><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[本人博客](http://xungejiang.com &quot;xunge的博客&quot;)</span><br><span class="line">[本人博客](http://xungejiang.com)</span><br></pre></td></tr></table></figure><p>显示效果：</p><p><a href="http://xungejiang.com" title="xunge的博客">本人博客</a> <a href="http://xungejiang.com">本人博客</a></p><p>链接后的 title 需要用引号括起来，可以选填，效果是鼠标放到链接上会有提示。</p><p>如果安装了 MarkdownExtended 插件的话，可以使用 <code>mdl</code> + <code>tab 键</code></p><p>需要注意的是，使用 Markdown 方法，默认是在本网页打开新网页，如果想在新的标签页上打开链接，只能使用 <code>HTML</code> 语言实现，代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;http://xungejiang.com&quot; target=&quot;_blank&quot;&gt;本人博客&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>显示效果：</p><p><a href="http://xungejiang.com" target="_blank">本人博客</a></p><h2 id="插入图片">插入图片</h2><h3 id="普通-markdown-语法">普通 markdown 语法</h3><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![小米](http://7xvx4s.com2.z0.glb.qiniucdn.com/mi.jpg &quot;小米&quot;)</span><br></pre></td></tr></table></figure><p>显示效果：</p><figure><img class="lazyload"  data-src="http://7xvx4s.com2.z0.glb.qiniucdn.com/mi.jpg" title="小米" alt="小米"><figcaption aria-hidden="true">小米</figcaption></figure><p>如果安装了 MarkdownExtended 插件的话，可以使用 <code>mdi</code> + <code>tab 键</code></p><p>需要注意的是，使用 Markdown 方法，图片将不能调整大小，有以下两种方式可以调整大小</p><h3 id="html-语法">HTML 语法</h3><p>使用 <code>HTML</code> 语言实现，代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src=&quot;http://7xvx4s.com2.z0.glb.qiniucdn.com/mi.jpg&quot; width=&quot;50%&quot;/&gt;</span><br></pre></td></tr></table></figure><p>显示效果：</p><p><img class="lazyload"  data-src="http://7xvx4s.com2.z0.glb.qiniucdn.com/mi.jpg" width="50%"></p><h3 id="使用支持参数的图床">使用支持参数的图床</h3><p>可以使用支持参数的图床，例如七牛，可参考<a href="https://developer.qiniu.com/dora/api/basic-processing-images-imageview2" target="_blank" rel="noopener">七牛图片基本处理</a>。</p><p>例如代码为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![小米](http://7xvx4s.com2.z0.glb.qiniucdn.com/mi.jpg &quot;小米&quot;)                     //旧方法</span><br><span class="line">![小米](http://7xvx4s.com2.z0.glb.qiniucdn.com/mi.jpg?imageView2/2/w/200 &quot;小米&quot;)  //新方法</span><br></pre></td></tr></table></figure><p>显示效果：</p><figure><img class="lazyload"  data-src="http://7xvx4s.com2.z0.glb.qiniucdn.com/mi.jpg?imageView2/2/w/200" title="小米" alt="小米"><figcaption aria-hidden="true">小米</figcaption></figure><p><code>imageView2/2/w/200</code> 的意义为 宽度固定为200px，高度等比缩小。</p><h2 id="代码块">代码块</h2><h3 id="行内代码">行内代码</h3><p>用反引号将短代码框住，代码如下：</p><pre><code>这是 `行内代码`</code></pre><p>显示效果：</p><p>这是 <code>行内代码</code></p><h3 id="多行代码">多行代码</h3><p>多行代码有两种表示方式。</p><p>一种是用前后两个 ``` 把代码包围起来，并在第一行后面标注哪种语言，即可实现代码高亮。注意 ` 不是单引号而是左上角的ESC下面~中的 `</p><p>代码如下：</p><pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE stu (</span><br><span class="line">    stu_no INT(20),</span><br><span class="line">    stu_name VARCHAR(20) NOT NULL,</span><br><span class="line">    stu_tel VARCHAR(15),</span><br><span class="line">    CONSTRAINT pk_stu_no PRIMARY KEY (stu_no),</span><br><span class="line">    CONSTRAINT uk_stu_tel UNIQUE KEY (stu_tel)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></code></pre><p>显示效果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE stu (</span><br><span class="line">    stu_no INT(20),</span><br><span class="line">    stu_name VARCHAR(20) NOT NULL,</span><br><span class="line">    stu_tel VARCHAR(15),</span><br><span class="line">    CONSTRAINT pk_stu_no PRIMARY KEY (stu_no),</span><br><span class="line">    CONSTRAINT uk_stu_tel UNIQUE KEY (stu_tel)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>另一种是把代码选中后按一下 tab 键，缺点是无法识别代码语言，无法高亮。</p><h2 id="列表">列表</h2><h3 id="无序列表">无序列表</h3><p>使用 *，+，- 任意一种表示无序列表，代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 无序列表项 一</span><br><span class="line">+ 无序列表项 二</span><br><span class="line">* 无序列表项 三</span><br><span class="line">* 无序列表项 四</span><br><span class="line">+ 无序列表项 五</span><br><span class="line">+ 无序列表项 六</span><br><span class="line">- 无序列表项 七</span><br></pre></td></tr></table></figure><p>显示效果：</p><ul><li>无序列表项 一<ul><li>无序列表项 二<ul><li>无序列表项 三</li><li>无序列表项 四</li></ul></li><li>无序列表项 五</li><li>无序列表项 六</li></ul></li><li>无序列表项 七</li></ul><h3 id="有序列表">有序列表</h3><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 有序列表项 一</span><br><span class="line">2. 有序列表项 二</span><br><span class="line">3. 有序列表项 三</span><br></pre></td></tr></table></figure><p>显示效果：</p><ol type="1"><li>有序列表项 一</li><li>有序列表项 二</li><li>有序列表项 三</li></ol><h2 id="引用">引用</h2><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 引用文字 一</span><br></pre></td></tr></table></figure><p>显示效果：</p><blockquote><p>引用文字 一</p></blockquote><h2 id="表格">表格</h2><p>第一行为表头，第二行分隔表头和主体部分，默认 <code>-</code> 左对齐， <code>:-:</code> 居中对齐， <code>-:</code> 右对齐，第三行开始每一行为一个表格行，代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是第一列 左对齐|这是第二列 中间对齐|这是第三列 右对齐</span><br><span class="line">-|:-:|-:</span><br><span class="line">小姜|男|99</span><br><span class="line">小宫|女|100</span><br><span class="line">小刘|男|98</span><br></pre></td></tr></table></figure><p>显示效果：</p><table><thead><tr class="header"><th>这是第一列 左对齐</th><th style="text-align: center;">这是第二列 中间对齐</th><th style="text-align: right;">这是第三列 右对齐</th></tr></thead><tbody><tr class="odd"><td>小姜</td><td style="text-align: center;">男</td><td style="text-align: right;">99</td></tr><tr class="even"><td>小宫</td><td style="text-align: center;">女</td><td style="text-align: right;">100</td></tr><tr class="odd"><td>小刘</td><td style="text-align: center;">男</td><td style="text-align: right;">98</td></tr></tbody></table><h2 id="分割线">分割线</h2><p>三个以上的星号、减号、底线线来建立一个分隔线，效果相同，代码如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">***</span><br><span class="line">___</span><br></pre></td></tr></table></figure><p>显示效果：</p><hr><hr><hr><h2 id="上下角标">上下角标</h2><p><code>&lt;sub&gt;</code> 和 <code>&lt;/sub&gt;</code> 中间的为下角标 <code>&lt;sup&gt;</code> 和 <code>&lt;/sup&gt;</code> 中间的为上角标</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">H&lt;sub&gt;2&lt;/sub&gt;O</span><br><span class="line">E=mc&lt;sup&gt;2&lt;/sup&gt;</span><br></pre></td></tr></table></figure><p>显示效果： H<sub>2</sub>O E=mc<sup>2</sup></p><p>也可以用下面介绍的 LaTex 公式，更方便。</p><h2 id="latex-公式">LaTeX 公式</h2><h3 id="和-表示行内公式"><code>\\(</code> 和 <code>\\)</code> 表示行内公式：</h3><p>代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">质能守恒方程可以用一个很简洁的方程式 \\(E=mc^2\\) 来表达。</span><br></pre></td></tr></table></figure><p>显示效果：</p><p>质能守恒方程可以用一个很简洁的方程式 \(E=mc^2\) 来表达。</p><h3 id="表示整行公式"><code>$$</code> 表示整行公式：</h3><p>代码：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\sum_&#123;i=1&#125;^n a_i=0</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\sum^&#123;j-1&#125;_&#123;k=0&#125;&#123;\widehat&#123;\gamma&#125;_&#123;kj&#125; z_k&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>显示效果：</p><p><span class="math display">\[\sum_{i=1}^n a_i=0\]</span></p><p><span class="math display">\[f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2\]</span></p><p><span class="math display">\[\sum_{k=0}^{j-1} {\widehat{\gamma}_{kj} z_k}\]</span></p><p>查看 Sublime 如何配置 LaTex 可参考 <a href="https://xungejiang.com/2017/03/03/markdown-mathjax/">我写的这篇文章</a></p><p>以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown 是文本 在此，我们总结 Markdown 的优点如下：&lt;/p&gt;
&lt;p&gt;纯文本，所以兼容性极强，可以用所有文本编辑器打开。 让你专注于文字而不是排版。 格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。 Markdown 的标记语法有极好的可读性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="知识点" scheme="https://xungejiang.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="Markdown" scheme="https://xungejiang.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>jQuery 的基本使用方法</title>
    <link href="https://xungejiang.com//2017/02/07/jquery/"/>
    <id>https://xungejiang.com//2017/02/07/jquery/</id>
    <published>2017-02-07T01:01:42.000Z</published>
    <updated>2017-02-07T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>jQuery 是一个 JavaScript 库，极大地简化了 JavaScript 编程。本文对 jQuery 知识点进行总结，更多的知识点请查看 <a href="http://api.jquery.com/" target="_blank" rel="noopener">官方文档</a> 或 <a href="http://www.w3school.com.cn/jquery/" target="_blank" rel="noopener">W3School教程</a></p><a id="more"></a><p>推荐一个 HTML 的编辑器 <a href="http://www.dcloud.io/" target="_blank" rel="noopener">HBuilder</a> , 当然 sublime 也是极好的。</p><h2 id="安装-jquery">安装 jQuery</h2><p>可以通过多种方法在网页中添加 jQuery。 您可以使用以下方法：</p><ul><li>从 <a href="jquery.com">jquery.com</a> 下载 jQuery 库</li><li>从 CDN 中载入 jQuery</li></ul><h3 id="下载-jquery">下载 jQuery</h3><p>将下载的文件放在网页的同一目录下，并用 <code>&lt;script&gt;</code> 标签引用他，就可以使用jQuery。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-1.10.2.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="cdn-加载">CDN 加载</h3><p>国内网站推荐百度</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>国外网站推荐谷歌</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="javascript-和-jquery-执行时方法的区别">JavaScript 和 jQuery 执行时方法的区别</h2><p>------------|<strong>window.onload</strong>| <strong><span class="math inline">\((document).ready()** :-|:-|:- 执行时机|必须等待网页中所有的内容加载完毕后（包括图片）才能执行|网页中所有DOM结构绘制完毕后就执行，可能DOM元素关联的东西并没有加载完 编写个数|不能同时编写多个|能同时编写多个 简化写法|无| **\)</span>(document).ready(function(){});</strong> 可以简写成 <strong>$(function(){});</strong></p><h2 id="选择网页元素">选择网页元素</h2><p>jQuery的基本设计和主要用法，就是"选择某个网页元素，然后对其进行某种操作"。这是它区别于其他函数库的根本特点。</p><p>使用jQuery的第一步，往往就是将一个选择表达式，放进构造函数jQuery()（简写为<em>$</em>），然后得到被选中的元素。</p><p>选择表达式可以是CSS选择器：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>)<span class="comment">//选择整个文档对象</span></span><br><span class="line">$(<span class="string">'#myId'</span>)<span class="comment">//选择ID为myId的网页元素</span></span><br><span class="line">$(<span class="string">'div.myClass'</span>)<span class="comment">//选择class为myClass的div元素</span></span><br><span class="line">$(<span class="string">'input[name=first]'</span>)<span class="comment">//选择name属性等于first的input元素</span></span><br></pre></td></tr></table></figure><p>也可以是jQuery特有的表达式：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'a:first'</span>)<span class="comment">//选择网页中第一个a元素</span></span><br><span class="line">$(<span class="string">'tr:odd'</span>)<span class="comment">//选择表格的奇数行</span></span><br><span class="line">$(<span class="string">'#myForm :input'</span>)<span class="comment">//选择表单中的input元素</span></span><br><span class="line">$(<span class="string">'div:visible'</span>) <span class="comment">//选择可见的div元素</span></span><br><span class="line">$(<span class="string">'div:gt(2)'</span>)<span class="comment">//选择所有的div元素，除了前三个</span></span><br><span class="line">$(<span class="string">'div:animated'</span>)<span class="comment">//选择当前处于动画状态的div元素</span></span><br></pre></td></tr></table></figure><h2 id="改变结果集">改变结果集</h2><p>如果选中多个元素，jQuery提供过滤器，可以缩小结果集：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).has(<span class="string">'p'</span>); <span class="comment">//选择包含p元素的div元素</span></span><br><span class="line">$(<span class="string">'div'</span>).not(<span class="string">'.myClass'</span>); <span class="comment">//选择class不等于myClass的div元素</span></span><br><span class="line">$(<span class="string">'div'</span>).filter(<span class="string">'.myClass'</span>); <span class="comment">//选择class等于myClass的div元素</span></span><br><span class="line">$(<span class="string">'div'</span>).first(); <span class="comment">//选择第1个div元素</span></span><br><span class="line">$(<span class="string">'div'</span>).eq(<span class="number">5</span>); <span class="comment">//选择第6个div元素</span></span><br></pre></td></tr></table></figure><p>有时候，我们需要从结果集出发，移动到附近的相关元素，jQuery也提供了在DOM树上的移动方法：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).next(<span class="string">'p'</span>); <span class="comment">//选择div元素后面的第一个p元素</span></span><br><span class="line">$(<span class="string">'div'</span>).parent(); <span class="comment">//选择div元素的父元素</span></span><br><span class="line">$(<span class="string">'div'</span>).closest(<span class="string">'form'</span>); <span class="comment">//选择离div最近的那个form父元素</span></span><br><span class="line">$(<span class="string">'div'</span>).children(); <span class="comment">//选择div的所有子元素</span></span><br><span class="line">$(<span class="string">'div'</span>).siblings(); <span class="comment">//选择div的同级元素</span></span><br></pre></td></tr></table></figure><h2 id="链式操作">链式操作</h2><p>选中网页元素以后，就可以对它进行某种操作。</p><p>jQuery允许将所有操作连接在一起，以链条的形式写出来，比如：</p><p><code>$('div').find('h3').eq(2).html('Hello');</code></p><p>分解开来，就是下面这样：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'div'</span>)         <span class="comment">//找到div元素</span></span><br><span class="line">.find(<span class="string">'h3'</span>)      <span class="comment">//选择其中的h3元素</span></span><br><span class="line">.eq(<span class="number">2</span>)           <span class="comment">//选择第3个h3元素</span></span><br><span class="line">.html(<span class="string">'Hello'</span>);  <span class="comment">//将它的内容改为Hello</span></span><br></pre></td></tr></table></figure><p>这是jQuery最令人称道、最方便的特点。它的原理在于每一步的jQuery操作，返回的都是一个jQuery对象，所以不同操作可以连在一起。</p><p>jQuery还提供了.end()方法，使得结果集可以后退一步,回到最近的一个"破坏性"操作之前。</p><p>如果之前没有破坏性操作，则返回一个空集。所谓的"破坏性"就是指任何改变所匹配的jQuery元素的操作。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'div'</span>)</span><br><span class="line">.find(<span class="string">'h3'</span>)</span><br><span class="line">.eq(<span class="number">2</span>)</span><br><span class="line">.html(<span class="string">'Hello'</span>)</span><br><span class="line">.end()<span class="comment">//退回到选中所有的h3元素的那一步</span></span><br><span class="line">.eq(<span class="number">0</span>)<span class="comment">//选中第一个h3元素</span></span><br><span class="line">.html(<span class="string">'World'</span>); <span class="comment">//将它的内容改为World</span></span><br></pre></td></tr></table></figure><p>示例</p><p>描述：选取所有的 p 元素，查找并选取 span 子元素，然后再回过来选取 p 元素</p><p>HTML 代码:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span>,how are you?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jQuery 代码:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).find(<span class="string">"span"</span>).end()</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span> how are you?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="元素的操作取值和赋值">元素的操作：取值和赋值</h2><p>操作网页元素，最常见的需求是取得它们的值，或者对它们进行赋值。</p><p>jQuery使用同一个函数，来完成取值（getter）和赋值（setter）。到底是取值还是赋值，由函数的参数决定。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'h1'</span>).html(); <span class="comment">//html()没有参数，表示取出h1的值</span></span><br><span class="line">$(<span class="string">'h1'</span>).html(<span class="string">'Hello'</span>); <span class="comment">//html()有参数Hello，表示对h1进行赋值</span></span><br></pre></td></tr></table></figure><p>常见的取值和赋值函数如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.html() 返回或设置被选元素的内容 (inner HTML)</span><br><span class="line">.text() 取出或设置text内容</span><br><span class="line">.attr() 取出或设置某个属性的值</span><br><span class="line">.width() 取出或设置某个元素的宽度</span><br><span class="line">.height() 取出或设置某个元素的高度</span><br><span class="line">.val() 取出或设置html内容 取出某个表单元素的值</span><br></pre></td></tr></table></figure><p>需要注意的是，如果结果集包含多个元素，那么赋值的时候，将对其中所有的元素赋值；取值的时候，则是只取出第一个元素的值（.text()例外，它取出所有元素的text内容）。</p><h2 id="元素的操作移动">元素的操作：移动</h2><p>.insertAfter()，把div元素移动p元素后面：</p><p><code>$('div').insertAfter('p');</code></p><p>.after()，把p元素加到div元素前面： 　 <code>$('p').after('div');</code></p><p>使用这种模式的操作方法，一共有四对</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.insertAfter()和.after()：在现存元素的外部，从后面插入元素</span><br><span class="line">.insertBefore()和.before()：在现存元素的外部，从前面插入元素</span><br><span class="line">.appendTo()和.append()：在现存元素的内部，从后面插入元素</span><br><span class="line">.prependTo()和.prepend()  ：在现存元素的内部，从前面插入元素</span><br></pre></td></tr></table></figure><h3 id="after">(1) .after():</h3><p>描述:</p><p>在所有段落中后插入一个jQuery对象(类似于一个DOM元素数组)。</p><p>HTML 代码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;b&gt;Hello&lt;/b&gt;&lt;p&gt;I would like to say: &lt;/p&gt;</span><br></pre></td></tr></table></figure><p>jQuery 代码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).after( $(&quot;b&quot;) );</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;I would like to say: &lt;/p&gt;&lt;b&gt;Hello&lt;/b&gt;</span><br></pre></td></tr></table></figure><h3 id="insertafter">(2) .insertAfter()：</h3><p>描述:</p><p>把所有段落插入到一个元素之后。与 <code>$("#foo").after("p")</code> 相同</p><p>HTML 代码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;I would like to say: &lt;/p&gt;&lt;div id=&quot;foo&quot;&gt;Hello&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>jQuery 代码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).insertAfter(&quot;#foo&quot;);</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;foo&quot;&gt;Hello&lt;/div&gt;&lt;p&gt;I would like to say: &lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="before">(3) .before()：</h3><p>描述:</p><p>在所有段落中前插入一个jQuery对象(类似于一个DOM元素数组)。</p><p>HTML 代码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;I would like to say: &lt;/p&gt;&lt;b&gt;Hello&lt;/b&gt;</span><br></pre></td></tr></table></figure><p>jQuery 代码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).before( $(&quot;b&quot;) );</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;b&gt;Hello&lt;/b&gt;&lt;p&gt;I would like to say: &lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="append">(4) .append()：</h3><p>描述：向所有段落中追加一些HTML标记。</p><p>HTML 代码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;I would like to say: &lt;/p&gt;</span><br></pre></td></tr></table></figure><p>jQuery 代码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).append(&quot;&lt;b&gt;Hello&lt;/b&gt;&quot;);</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;I would like to say: &lt;b&gt;Hello&lt;/b&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="appendto">(5) .appendTo()</h3><p>描述：新建段落追加div中并加上一个class</p><p>HTML 代码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>jQuery 代码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;&lt;p/&gt;&quot;)</span><br><span class="line"> .appendTo(&quot;div&quot;)</span><br><span class="line"> .addClass(&quot;test&quot;)</span><br><span class="line"> .end()</span><br><span class="line"> .addClass(&quot;test2&quot;);</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&lt;p class=&quot;test test2&quot;&gt;&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;p class=&quot;test&quot;&gt;&lt;/p&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="prepend">(6) .prepend()</h3><p>描述：向所有段落中前置一个jQuery对象(类似于一个DOM元素数组)。</p><p>HTML 代码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;I would like to say: &lt;/p&gt;&lt;b&gt;Hello&lt;/b&gt;</span><br></pre></td></tr></table></figure><p>jQuery 代码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).prepend( $(&quot;b&quot;) );</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&lt;b&gt;Hello&lt;/b&gt;I would like to say: &lt;/p&gt;</span><br></pre></td></tr></table></figure><h3 id="prependto">(7) .prependTo()</h3><p>描述：把所有段落追加到ID值为foo的元素中。</p><p>HTML 代码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;I would like to say: &lt;/p&gt;&lt;div id=&quot;foo&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>jQuery 代码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).prependTo(&quot;#foo&quot;);</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;foo&quot;&gt;&lt;p&gt;I would like to say: &lt;/p&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="元素的操作复制删除和创建">元素的操作：复制、删除和创建</h2><p>复制元素使用.clone()</p><p>删除元素使用.remove()和.detach()。两者的区别在于，前者不保留被删除元素的事件，后者保留，有利于重新插入文档时使用。</p><p>清空元素内容（但是不删除该元素）使用.empty()。</p><p>创建新元素的方法非常简单，只要把新元素直接传入jQuery的构造函数就行了：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&apos;&lt;p&gt;Hello&lt;/p&gt;&apos;);</span><br><span class="line">$(&apos;&lt;li class=&quot;new&quot;&gt;new list item&lt;/li&gt;&apos;);</span><br><span class="line">$(&apos;ul&apos;).append(&apos;&lt;li&gt;list item&lt;/li&gt;&apos;);</span><br></pre></td></tr></table></figure><h2 id="工具方法">工具方法</h2><p>除了对选中的元素进行操作以外，jQuery还提供一些工具方法（utility），不必选中元素，就可以直接使用。</p><p>常用的工具方法有以下几种：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.trim() 去除字符串两端的空格。</span><br><span class="line">$.each() 遍历一个数组或对象。</span><br><span class="line">$.inArray() 返回一个值在数组中的索引位置。如果该值不在数组中，则返回-1。</span><br><span class="line">$.grep() 返回数组中符合某种标准的元素。</span><br><span class="line">$.extend() 将多个对象，合并到第一个对象。</span><br><span class="line">$.makeArray() 将对象转化为数组。</span><br><span class="line">$.type() 判断对象的类别（函数对象、日期对象、数组对象、正则对象等等）。</span><br><span class="line">$.isArray() 判断某个参数是否为数组。</span><br><span class="line">$.isEmptyObject() 判断某个对象是否为空（不含有任何属性）。</span><br><span class="line">$.isFunction() 判断某个参数是否为函数。</span><br><span class="line">$.isPlainObject() 判断某个参数是否为用&quot;&#123;&#125;&quot;或&quot;new Object&quot;建立的对象。</span><br><span class="line">$.support() 判断浏览器是否支持某个特性。</span><br></pre></td></tr></table></figure><h2 id="事件操作">事件操作</h2><p>jQuery可以对网页元素绑定事件。根据不同的事件，运行相应的函数。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&apos;p&apos;).click(function()&#123;</span><br><span class="line">    alert(&apos;Hello&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>目前，jQuery主要支持以下事件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.blur() 表单元素失去焦点。</span><br><span class="line">.change() 表单元素的值发生变化</span><br><span class="line">.click() 鼠标单击</span><br><span class="line">.dblclick() 鼠标双击</span><br><span class="line">.focus() 表单元素获得焦点</span><br><span class="line">.focusin() 子元素获得焦点</span><br><span class="line">.focusout() 子元素失去焦点</span><br><span class="line">.hover() 同时为mouseenter和mouseleave事件指定处理函数</span><br><span class="line">.keydown() 按下键盘（长时间按键，只返回一个事件）</span><br><span class="line">.keypress() 按下键盘（长时间按键，将返回多个事件）</span><br><span class="line">.keyup() 松开键盘</span><br><span class="line">.load() 元素加载完毕</span><br><span class="line">.mousedown() 按下鼠标</span><br><span class="line">.mouseenter() 鼠标进入（进入子元素不触发）</span><br><span class="line">.mouseleave() 鼠标离开（离开子元素不触发）</span><br><span class="line">.mousemove() 鼠标在元素内部移动</span><br><span class="line">.mouseout() 鼠标离开（离开子元素也触发）</span><br><span class="line">.mouseover() 鼠标进入（进入子元素也触发）</span><br><span class="line">.mouseup() 松开鼠标</span><br><span class="line">.ready() DOM加载完成</span><br><span class="line">.resize() 浏览器窗口的大小发生改变</span><br><span class="line">.scroll() 滚动条的位置发生变化</span><br><span class="line">.select() 用户选中文本框中的内容</span><br><span class="line">.submit() 用户递交表单</span><br><span class="line">.toggle() 根据鼠标点击的次数，依次运行多个函数</span><br><span class="line">.unload() 用户离开页面</span><br></pre></td></tr></table></figure><p>以上这些事件在jQuery内部，都是.bind()的便捷方式。使用.bind()可以更灵活地控制事件，比如为多个事件绑定同一个函数：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&apos;input&apos;).bind(</span><br><span class="line">    &apos;click change&apos;, //同时绑定click和change事件</span><br><span class="line">    function()&#123;</span><br><span class="line">        alert(&apos;Hello&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>有时，你只想让事件运行一次，这时可以使用.one()方法。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).one(&quot;click&quot;， function()&#123;</span><br><span class="line">    alert(&quot;Hello&quot;); //只运行一次，以后的点击不会运行</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>unbind()用来解除事件绑定。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&apos;p&apos;).unbind(&apos;click&apos;);</span><br></pre></td></tr></table></figure><p>所有的事件处理函数，都可以接受一个事件对象(event object)作为参数，比如下面例子中的e：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).click(function(e)&#123;</span><br><span class="line">    alert(e.type); //&quot;click&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这个事件对象有一些很有用的属性和方法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">event.pageX 事件发生时，鼠标距离网页左上角的水平距离 　　</span><br><span class="line">event.pageY 事件发生时，鼠标距离网页左上角的垂直距离</span><br><span class="line">event.type 事件的类型（比如click） 　　</span><br><span class="line">event.which 按下了哪一个键 　　</span><br><span class="line">event.data在事件对象上绑定数据，然后传入事件处理函数 　　</span><br><span class="line">event.target 事件针对的网页元素</span><br><span class="line">event.preventDefault() 阻止事件的默认行为（比如点击链接，会自动打开新页面）</span><br><span class="line">event.stopPropagation() 停止事件向上层元素冒泡</span><br></pre></td></tr></table></figure><p>在事件处理函数中，可以用this关键字，返回事件针对的DOM元素：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&apos;a&apos;).click(function()&#123;</span><br><span class="line">    if ($(this).attr(&apos;href&apos;).match(&apos;evil&apos;))&#123;//如果确认为有害链接</span><br><span class="line">        e.preventDefault(); //阻止打开</span><br><span class="line">        $(this).addClass(&apos;evil&apos;); //加上表示有害的class</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>有两种方法，可以自动触发一个事件。一种是直接使用事件函数，另一种是使用.trigger()或.triggerHandler()。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&apos;a&apos;).click();</span><br><span class="line">$(&apos;a&apos;).trigger(&apos;click&apos;);</span><br></pre></td></tr></table></figure><h2 id="特殊效果">特殊效果</h2><p>jQuery允许对象呈现某些特殊效果。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&apos;h1&apos;).show(); //展现一个h1标题</span><br></pre></td></tr></table></figure><p>常用的特殊效果如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.fadeIn() 淡入</span><br><span class="line">.fadeOut() 淡出</span><br><span class="line">.fadeTo() 调整透明度</span><br><span class="line">.hide() 隐藏元素</span><br><span class="line">.show() 显示元素</span><br><span class="line">.slideDown() 向下展开</span><br><span class="line">.slideUp() 向上卷起</span><br><span class="line">.slideToggle() 依次展开或卷起某个元素</span><br><span class="line">.toggle() 依次展示或隐藏某个元素</span><br></pre></td></tr></table></figure><p>除了.show()和.hide()，所有其他特效的默认执行时间都是400ms(毫秒)，但是你可以改变这个设置。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&apos;h1&apos;).fadeIn(300); // 300毫秒内淡入</span><br><span class="line">$(&apos;h1&apos;).fadeOut(&apos;slow&apos;); //缓慢地淡出</span><br></pre></td></tr></table></figure><p>在特效结束后，可以指定执行某个函数。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&apos;p&apos;).fadeOut(300, function()&#123;$(this).remove(); &#125;);</span><br></pre></td></tr></table></figure><p>更复杂的特效，可以用.animate()自定义。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&apos;div&apos;).animate(&#123;</span><br><span class="line">    left : &quot;+=50&quot;，//不断右移</span><br><span class="line">    opacity : 0.25 //指定透明度</span><br><span class="line">&#125;,</span><br><span class="line">300,// 持续时间</span><br><span class="line">function()&#123; alert(&apos;done!&apos;); &#125;//回调函数</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>.stop()和.delay()用来停止或延缓特效的执行。</p><p><code>$.fx.off</code> 如果设置为 true，则关闭所有网页特效。</p><p>几个常见的筛选选择器：</p><p>filter()：筛选出与指定表达式匹配的元素集合。这个方法用于缩小匹配的范围。用逗号分隔多个表达式</p><p>描述：保留子元素中不含有ol的元素。</p><p>HTML 代码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&lt;ol&gt;&lt;li&gt;Hello&lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;&lt;p&gt;How are you?&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>jQuery 代码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).filter(function(index) &#123;</span><br><span class="line">    return $(&quot;ol&quot;, this).length == 0;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;How are you?&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>silce()：选取一个匹配的子集</p><p>描述：选择第一个p元素</p><p>HTML 代码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;Hello&lt;/p&gt;&lt;p&gt;cruel&lt;/p&gt;&lt;p&gt;World&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>jQuery 代码:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(&quot;p&quot;).slice(0, 1).wrapInner(&quot;&lt;b&gt;&lt;/b&gt;&quot;);</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;&lt;b&gt;Hello&lt;/b&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jQuery 是一个 JavaScript 库，极大地简化了 JavaScript 编程。本文对 jQuery 知识点进行总结，更多的知识点请查看 &lt;a href=&quot;http://api.jquery.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt; 或 &lt;a href=&quot;http://www.w3school.com.cn/jquery/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;W3School教程&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="知识点" scheme="https://xungejiang.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="jQuery" scheme="https://xungejiang.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>本地配置 Jekyll</title>
    <link href="https://xungejiang.com//2017/01/28/jekyll-install/"/>
    <id>https://xungejiang.com//2017/01/28/jekyll-install/</id>
    <published>2017-01-28T01:01:42.000Z</published>
    <updated>2017-01-28T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要是为了让博客系统在本地跑起来，如果不想在本地运行，可以无视本文，但我还是强烈建议试着先在本地跑起来，没有什么问题后再推送的 GitHub 上。 <a id="more"></a></p><p><img class="lazyload"  data-src="http://7xvx4s.com2.z0.glb.qiniucdn.com/17-03-28-001.png" width="50%"></p><p>Jekyll是一个开源的博客生成工具，类似WordPress。但与之不同的是，jekyll只生成静态网页，并不需要数据库支持。通常配合第三方评论系统使用，例如 <a href="http://www.uyan.cc/" target="_blank" rel="noopener">有言</a>, <del>Disqus（由于众所周知的原因上不去）</del>, <del>多说（已倒闭）</del>。GitHub Pages 原生支持 jekyll，而且可以绑定自己的域名。</p><p>关于 <a href="http://xungejiang.com/2017/01/27/github-domain-name/">GithubPages 绑定自定义域名</a> 可以参考这篇文章。</p><h2 id="安装-ruby">安装 Ruby</h2><p>Jekyll是用ruby语言编写的，所以我们首先要在windows上装好ruby环境。</p><h3 id="下载-rubyinstaller">下载 <a href="http://rubyinstaller.org/downloads/" target="_blank" rel="noopener">RubyInstaller</a></h3><p>注意选择对应的操作系统版本为 64位 还是 32位。</p><h3 id="安装-ruby-1">安装 Ruby</h3><p>记得要勾选 <strong>Add Ruby executables to your PATH</strong>，其作用是绑定ruby环境变量，另外安装目录不可以包含空格。</p><h3 id="下载devkit">下载DevKit</h3><p>与RubyInstller同一链接，页面稍下方有“DEVELOPMENT KIT”， 注意：DevKit版本要与上面的ruby版本是匹配的。</p><h3 id="安装devkit">安装DevKit</h3><p>解压DevKit完成后打开CMD窗口，回到Devkit根目录，输入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ruby dk.rb init</span><br><span class="line">ruby dk.rb install</span><br></pre></td></tr></table></figure><p>返回的分别是</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[INFO] found RubyInstaller v2.3.3 at C:/Ruby23-x64</span><br><span class="line"></span><br><span class="line">Initialization complete! Please review and modify the auto-generated</span><br><span class="line">&apos;config.yml&apos; file to ensure it contains the root directories to all</span><br><span class="line">of the installed Rubies you want enhanced by the DevKit.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[INFO] Updating convenience notice gem override for &apos;C:/Ruby23-x64&apos;</span><br><span class="line">[INFO] Installing &apos;C:/Ruby23-x64/lib/ruby/site_ruby/devkit.rb&apos;</span><br></pre></td></tr></table></figure><h2 id="安装-jekyll">安装 Jekyll</h2><h3 id="更换源">更换源</h3><p>无翻墙软件，可使用国内淘宝提供的源</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gem sources --remove https://rubygems.org/</span><br><span class="line">gem sources -a https://ruby.taobao.org/</span><br><span class="line">gem sources -l</span><br></pre></td></tr></table></figure><p>有翻墙软件，可以使用如下源</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gem sources --remove https://rubygems.org/</span><br><span class="line">gem sources -a  http://rubygems.org/</span><br></pre></td></tr></table></figure><h3 id="安装-jekyll-1">安装 Jekyll</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gem install jekyll</span><br></pre></td></tr></table></figure><h3 id="安装-paginate">安装 paginate</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gem install jekyll-paginate</span><br></pre></td></tr></table></figure><h2 id="使用jekyll">使用jekyll</h2><p>网上找个模板好看的 github pages 的博客， Clone 下来。</p><p>Clone 有两种方法</p><p>第一种是 https 方法，通过直接输入账号密码的格式提交代码； 第二种是 ssh 的方式，需要提前配置 SSH ，之后可直接 push 代码。</p><p>Git 的基本操作参考 <a href="http://xungejiang.com/2016/07/07/github/">git介绍 github的基本配置</a> 这篇文章。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/[username]/[username].github.io.git</span><br><span class="line">git clone git@github.com:[username]/[username].github.io.git</span><br></pre></td></tr></table></figure><p>启动jekyll服务</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd xxxx.github.io.git</span><br><span class="line">jekyll s</span><br></pre></td></tr></table></figure><h2 id="提交文章">提交文章</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#123;username.github.io&#125;</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;提交简介&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要是为了让博客系统在本地跑起来，如果不想在本地运行，可以无视本文，但我还是强烈建议试着先在本地跑起来，没有什么问题后再推送的 GitHub 上。
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="Jekyll" scheme="https://xungejiang.com/tags/Jekyll/"/>
    
  </entry>
  
  <entry>
    <title>GithubPages 绑定自定义域名</title>
    <link href="https://xungejiang.com//2017/01/27/github-domain-name/"/>
    <id>https://xungejiang.com//2017/01/27/github-domain-name/</id>
    <published>2017-01-27T01:01:42.000Z</published>
    <updated>2017-01-27T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文将着重介绍如何将 GithubPages 的博客绑定自定义域名。</p><a id="more"></a><h2 id="域名的好处">域名的好处</h2><p>域名除了为了装B，给人留下深刻的印象，博主认为最大的好处是能访问的运营商更多了。</p><p>博主使用的是 <strong>GithubPages</strong> 作为博客的平台，带来的问题是 由于 IP 访问限制，只有使用电信运营商时才能访问，而移动运营商不能访问（联通没试过）。而绑定域名后，因为使用 DNS 解析，移动运营商的网络也可以访问了。</p><h2 id="购买域名">购买域名</h2><p>域名购买有多种渠道。这里推荐用国外的 <a href="https://sg.godaddy.com/zh/" target="_blank" rel="noopener">Godaddy</a> 进行域名注册。</p><p>Godaddy 有很多的优惠码，并且可以使用支付宝付款，非常方便。博主2017年买的一年域名花了55￥。</p><p>购买域名很简单，一步步来就行，如果不能使用支付宝付款，说明使用的优惠码不支持支付宝，可以选择使用国际银行卡支付或者换个优惠码。</p><h2 id="配置-dns-解析">配置 DNS 解析</h2><h3 id="配置-dnspod-解析">配置 DNSPOD 解析</h3><p>在 Godaddy 上购买域名后，域名会自动使用 Godaddy 自己的 DNS 解析器进行解析，不过容易被墙，所以建议使用国内的 DNS 解析器。这里推荐免费的 <a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSPOD</a> 进行 DNS 解析。</p><p>DNSPOD 支持 QQ 账号登录，非常方便。进入 <strong>域名解析</strong> -&gt; <strong>添加域名</strong> ，输入你注册的域名，进入后将记录改为如图所示</p><table><thead><tr class="header"><th style="text-align: center;">主机记录</th><th style="text-align: center;">记录类型</th><th style="text-align: center;">记录值</th><th style="text-align: center;">TTL</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">@</td><td style="text-align: center;">A</td><td style="text-align: center;">192.30.252.153</td><td style="text-align: center;">600</td></tr><tr class="even"><td style="text-align: center;">@</td><td style="text-align: center;">A</td><td style="text-align: center;">192.30.252.154</td><td style="text-align: center;">600</td></tr><tr class="odd"><td style="text-align: center;">@</td><td style="text-align: center;">NS</td><td style="text-align: center;">f1g1ns1.dnspod.net.</td><td style="text-align: center;">86400</td></tr><tr class="even"><td style="text-align: center;">@</td><td style="text-align: center;">NS</td><td style="text-align: center;">f1g1ns2.dnspod.net.</td><td style="text-align: center;">86400</td></tr></tbody></table><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-1-27/001.jpg"></p><p>其中下面两个 NS 记录类型是不能更改的。</p><p>这里建议使用 A 记录进行解析。当然也可以使用 CNAME 解析，但是博主使用 CNAME 进行解析有时出现错误。。所以不如把解析地址指向 GitHub，让 Github 进行域名解析。</p><h3 id="配置-godaddy-解析">配置 Godaddy 解析</h3><p>在 <strong>我的账户</strong> 中选择 <strong>我的产品</strong></p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-1-27/002.jpg"></p><p>在 <strong>域名</strong> 处点击 <strong>管理</strong></p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-1-27/003.jpg"></p><p>点击域名旁边的箭头，选择 <strong>设置域名服务器</strong></p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-1-27/004.jpg"></p><p>将 <strong>标准</strong> 改为 <strong>定制</strong> ，并填写 DNSPOD 的解析服务器</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-1-27/005.jpg"> <img class="lazyload"  data-src="https://img.xungejiang.com/static/images/17-1-27/006.jpg"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f1g1ns1.dnspod.net</span><br><span class="line">f1g1ns2.dnspod.net</span><br></pre></td></tr></table></figure><h2 id="github-的-cname-配置">Github 的 CNAME 配置</h2><p>GithubPages 是支持域名绑定的，只需要在主目录里添加一个名字为 <strong>CNAME</strong> 文件，注意没有后缀名。文件内容为你所购买的域名，注意没有 www 前缀，例如你申请的 <code>xiaoming.com</code> ,那么 <strong>CNAME</strong> 的内容为 <code>xiaoming.com</code>。</p><p>这样的话当你输入 <code>xiaoming.github.io</code> 时会自动跳转到 <code>xiaoming.com</code>。</p><p>至此 GitHub 域名绑定完毕，你已经通过域名访问你的网站啦~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将着重介绍如何将 GithubPages 的博客绑定自定义域名。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="github" scheme="https://xungejiang.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>2012 款 21.5寸 iMac 添加 7+17pin 接口固态硬盘</title>
    <link href="https://xungejiang.com//2016/12/06/iMac-21.5-change-SSD/"/>
    <id>https://xungejiang.com//2016/12/06/iMac-21.5-change-SSD/</id>
    <published>2016-12-06T01:01:42.000Z</published>
    <updated>2016-12-06T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>2012年款 21.5寸 的 iMac 标准版是 8G 内存 + 1T 机械硬盘。在这个没有固态硬盘活不了的时代，又怎么能忍受机械硬盘的卡慢烂。。于是我考虑给我的iMac加装固态硬盘。</p><a id="more"></a><p>加装固态硬盘有两种方案：</p><ul><li>方案一：把机械硬盘换成固态硬盘。这样的优点是操作简单，缺点是大容量的固态硬盘成本较高，而 iMac 没有其他多余的硬盘位。</li><li>方法二：利用主板背面的固态硬盘接口加装固态硬盘，并保留原来的机械硬盘。优点是性价比高，缺点是操作复杂，需要把整个主板卸下来，要求动手能力强。</li></ul><p>这个主板后面的 SSD 接口为 7+17pin ，是苹果自己专用的，只有专门为苹果固态硬盘提供配货的厂家才卖，价格贵的惊人。</p><p>所以我的解决方案是买一个 msata 转 7+17pin 接口的转换器，再买一个 msata 的固态硬盘就好啦~</p><p>需要注意的是2012款ssd接口与之后年份的接口不同，买的时候需要向卖家确认。</p><h2 id="准备工作">准备工作</h2><ol type="1"><li><strong>msata 转 7+17pin 接口的转换器</strong> ，在某宝搜索关键字：<strong>macbook</strong>， <strong>2012</strong>， <strong>msata</strong>； 这就是上文提到的接口转换器。注意一下这是2012款的接口，之后年份的接口与之不同，不过也是苹果独家，与市面上不兼容。</li><li><strong>msata接口的固态硬盘</strong> ，这个牌子很多，自己选吧。我买的是 256G 三星850evo；</li><li><strong>21.5寸 iMac 双面胶</strong> ，在某宝搜索关键字：<strong>imac</strong>， <strong>21.5</strong>， <strong>双面胶</strong>； 因为 iMac 的屏幕与机身是由双面胶固定的，所以在还原过程中需要重新粘贴双面胶。某宝上卖的有两款，贵的那款在边缘处理上和原厂更相近。当然两款都能粘住，不过淘宝的胶粘性过强，再想起开屏幕会比较费事。</li><li><strong>两款口径的六角螺丝刀</strong> ，在某宝搜索关键字：<strong>六角梅花螺丝刀套装</strong>； 一共需要 <strong>T10</strong> ， <strong>T8</strong> 两款口径的六角螺丝刀，所以建议买螺丝刀套装。</li></ol><h2 id="拆解">拆解</h2><p>推荐一个 <a href="http://pan.baidu.com/s/1i5hXKvr" target="_blank" rel="noopener">iFixit 加装固态硬盘的视频</a>，非常详细，有这个视频基本就不用往下看了，在此只是总结一下注意事项。</p><p>这个是 <a href="https://www.ifixit.com/Guide/iMac+Intel+21.5-Inch+EMC+2544+SSD+Replacement/28992" target="_blank" rel="noopener">iFixit 加装固态硬盘的文字教程</a>，也非常详细，需要科学上网才能查看。本篇博客的部分图片为该网站原图，侵删。</p><h3 id="拆卸屏幕">拆卸屏幕</h3><p>需要挑选硬实点的卡片，废弃的会员卡、银行卡都是不错的选择。买双面胶淘宝可能会赠送拆屏拨片，不过实际使用体验不如前者好。</p><p>一般从屏幕侧面下方开始切入，之后就是力气活啦，暴力出奇迹吧。放心，轻易不会损坏屏幕，注意的是需要跳过上部中间摄像头部分，避免胶蹭到摄像头部分。</p><p><strong>以下部分尤其重要！！</strong> 因为屏幕有两跟数据线和主板连结，所以当屏幕已经分离后，需要将屏幕翘起15度左右，从主板将两根数据线拔掉后方可把屏幕拿下。</p><p>拆解方法如图</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-12-6/001.jpg"></p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-12-6/002.jpg"></p><p>之后在清除底部双面胶后便可将屏幕拿下。</p><h3 id="拆卸底部支架条">拆卸底部支架条</h3><p>在 iMac 下部有5个螺丝，如图，拧下后便可把底部的支架条拿下来。不拿下来的话主板和音频主板都相当难拿下来。。不要问博主是怎么知道的。。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-12-6/003.jpg"></p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-12-6/004.jpg"></p><h3 id="拆卸机械硬盘固定架">拆卸机械硬盘固定架</h3><p>拧下如图所示四颗螺丝。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-12-6/021.jpg"></p><p>这时已可以拆下整个机械硬盘，不过本教程选择先拆解音频主板。</p><h3 id="拆卸音频主板">拆卸音频主板</h3><p>首先将2个连接线拔出。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-12-6/005.jpg"> <img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-12-6/006.jpg"></p><p>拧下底部固定的两个螺丝。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-12-6/007.jpg"></p><p>这时可以将音频主板的一侧拿出，比较困难，一定不要暴力，因为另一侧还有两根线连结在主板和音箱。</p><p>然后便可将两根连接线取下，方法如图，也比较费力。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-12-6/008.jpg"> <img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-12-6/009.jpg"></p><h3 id="拆卸风扇">拆卸风扇</h3><p>首先取下电源线。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-12-6/010.jpg"></p><p>然后拧下如图所示三颗螺丝即可取下。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-12-6/011.jpg"></p><h3 id="拆卸机械硬盘">拆卸机械硬盘</h3><p>机械硬盘就非常好拆啦，拆下 SATA 接口连接线即可。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-12-6/012.jpg"></p><h3 id="拆卸机械硬盘支撑架">拆卸机械硬盘支撑架</h3><p>拧下如图螺丝即可取下。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-12-6/013.jpg"></p><h3 id="取下与主板连结的所有连接线">取下与主板连结的所有连接线</h3><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-12-6/014.jpg"> <img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-12-6/015.jpg"> <img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-12-6/016.jpg"> <img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-12-6/017.jpg"></p><h3 id="拆卸出风口">拆卸出风口</h3><p>这里需要拧下四颗螺丝，如图，注意该型螺丝型号为 T8，而之前型号为 T10 ，要小一些。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-12-6/018.jpg"></p><p>该出风口与主板是连接在一起的。</p><h3 id="拆卸右侧扩音器">拆卸右侧扩音器</h3><p>拧下如图所示两颗螺丝。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-12-6/019.jpg"></p><p>扩音器不必要完全拆卸，只需将扩音器往右挪一挪即可。</p><h3 id="拆卸主板">拆卸主板</h3><p>拧下如图所示四颗螺丝。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-12-6/020.jpg"></p><p>即可拿掉主板。比较费力，因为是和 USB 等接口对应的，需要耐心。</p><h3 id="安装固态硬盘">安装固态硬盘</h3><p>在主板背面就能找到我们期待已久的 SSD 接口啦，安装比较容易。</p><h2 id="后续工作">后续工作</h2><p>再按之前的步骤倒序依次安装即可。</p><p>开机后进入 Windows 系统，系统会自动识别到新安装的固态硬盘，并提醒你分区。至此固态硬盘安装完毕，剩下的就是在固态硬盘上重装系统了。速度飞起~~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2012年款 21.5寸 的 iMac 标准版是 8G 内存 + 1T 机械硬盘。在这个没有固态硬盘活不了的时代，又怎么能忍受机械硬盘的卡慢烂。。于是我考虑给我的iMac加装固态硬盘。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="mac" scheme="https://xungejiang.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>米家 LED 智能台灯移动电源供电</title>
    <link href="https://xungejiang.com//2016/11/19/Mijia-lamp-portable-source/"/>
    <id>https://xungejiang.com//2016/11/19/Mijia-lamp-portable-source/</id>
    <published>2016-11-19T01:01:42.000Z</published>
    <updated>2016-11-19T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>米家LED智能台灯设计简洁美观，然而只能使用插座供电，对于晚上停电的学生党来说真是一大遗憾。本文将介绍如何使用移动电源为米家LED智能台灯供电。</p><a id="more"></a><h2 id="v-usb升压线">12V USB升压线</h2><p>首先需要在淘宝上买一条 12V 的 USB升压线。</p><p>关键词：12v； usb升压线。</p><p>一定要管客服要接口是 4mm 的！！ 一定要管客服要接口是 4mm 的！！ 一定要管客服要接口是 4mm 的！！（事重三）</p><p>因为卖家一般只卖 3.5mm 的和 5.5mm 接口的，当时我拿格尺量感觉差不多 3.5mm 就下单了，不过客服特别负责，问我能不能把插头插入耳机孔，能插入的才是 3.5mm 的，而米家台灯的插头并不能插入，所以是 4mm 的。</p><p>最后卖家给我发了一个 5.5mm 的接口配了一个 4mm 的转接头。</p><p>转接头如下图</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-11-19/003.jpg"></p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-11-19/004.jpg"></p><p>最终完美适配~</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-11-19/007.jpg"></p><h2 id="为什么买-12v-的-升压线">为什么买 12V 的 升压线？</h2><p>米家LED智能台灯的插座标示的是 12V 0.5A ，而我是用的移动电源最高电压输出只有 5V ，所以需要 12V 的升压线。</p><p>台灯适配器如下图</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-11-19/006.jpg"></p><h2 id="推荐一下">推荐一下</h2><p>作为 Miboy 强推一下这款台灯吧，此款台灯设计简洁，美观，并且护眼，亮度、冷暖色无级调节（有一个旋钮，按下拧调冷暖色，不按下拧调亮度），可以连接手机选择不同模式（没什么用，喜欢自己调），总之非常适合学习和办公使用，配合本文中的移动电源使用方法简直无黑点。</p><p>暖色</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-11-19/001.jpg"></p><p>冷色</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-11-19/002.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;米家LED智能台灯设计简洁美观，然而只能使用插座供电，对于晚上停电的学生党来说真是一大遗憾。本文将介绍如何使用移动电源为米家LED智能台灯供电。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="xiaomi" scheme="https://xungejiang.com/tags/xiaomi/"/>
    
  </entry>
  
  <entry>
    <title>PPT 中插入高亮代码的踩坑历程</title>
    <link href="https://xungejiang.com//2016/10/12/PPT-highlight-code/"/>
    <id>https://xungejiang.com//2016/10/12/PPT-highlight-code/</id>
    <published>2016-10-12T01:01:42.000Z</published>
    <updated>2016-10-12T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载作者：<a href="http://www.snovey.com/" target="_blank" rel="noopener">snovey</a></p><p>如果你是一名小白，又梦想有朝一日成为一代大 PPT 工程师，或许你会需要这篇文章。</p><a id="more"></a><h2 id="ppt-中插入高亮代码的踩坑历程">PPT 中插入高亮代码的踩坑历程</h2><p>如何在 PPT 中插入高亮的代码？少量代码大可以手调，但是当代码多起来就力不从心了。一个显然的办法是用 HTML 对代码高亮，然后粘贴过去，HTML 高亮的方法有很多，一搜一大堆，但是 HTML 格式的代码粘贴到 Word 是高亮的，但是粘贴到 PPT（即使是从 Word 粘贴过去）都会出现问题，至少我这里会出现问题。</p><p>怎么办呢？</p><p>查了一下，微软自家的产品内部通用 <a href="https://www.wikiwand.com/zh/RTF" target="_blank" rel="noopener">RTF (Rich Text Format)</a> 格式，接下来就是如何得到 RTF 格式的高亮代码了。</p><p>我手头用的 Sublime，有一款插件叫做 Highlight，选中代码，右键 -&gt; Copy as RTF，然后粘贴到 PPT 就好了。然后发现代码高亮有坑（诸如左右括号不一样颜色之类的 bug）。</p><p>Notepad++ 也有这个功能，下载最新的 Notepad++ 7.0 版本，安装插件，连个 plugin manager 都没有，手动安装出错，遂退回到 6.9 版本，然后 Copy as RTF 粘贴到 PPT，结果连背景色都带上了，RTF 那个语法，简直了，看着就想吐，别说改了，卒。</p><p>最后我选择了 <a href="http://pygments.org/" target="_blank" rel="noopener">Pygments</a>，安装：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install Pygments</span><br></pre></td></tr></table></figure><p>执行：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pygmentize -f rtf -O style=paraiso-dark -l c -o code.rtf code.c</span><br></pre></td></tr></table></figure><p>粘贴到 PPT，OK。</p><p>结束了 PPT 中代码高亮的噩梦。</p><p>参考： <a href="https://superuser.com/questions/85948/how-can-i-embed-programming-source-code-in-powerpoint-slide-and-keep-code-highli" target="_blank" rel="noopener">How can I embed programming source code in Powerpoint slide and keep code highlighting?</a> <a href="http://pygments.org/docs/cmdline/" target="_blank" rel="noopener">Pygments Docs</a> <a href="https://gist.github.com/ept/4475995" target="_blank" rel="noopener">How to add syntax-highlighted code to PowerPoint slides (Mac OS)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载作者：&lt;a href=&quot;http://www.snovey.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;snovey&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你是一名小白，又梦想有朝一日成为一代大 PPT 工程师，或许你会需要这篇文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="PPT" scheme="https://xungejiang.com/tags/PPT/"/>
    
  </entry>
  
  <entry>
    <title>HTML 表单的验证</title>
    <link href="https://xungejiang.com//2016/07/19/form-confirm/"/>
    <id>https://xungejiang.com//2016/07/19/form-confirm/</id>
    <published>2016-07-19T01:01:42.000Z</published>
    <updated>2016-07-19T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>表单的验证在实际生活中很常见，比如注册页面要求用户名长度6-12位，如果不在这个范围内会报错的。</p><p>表单的验证一般使用 JavaScript 实现，博主在这里简单介绍一下。</p><a id="more"></a><h2 id="表单的创建">表单的创建</h2><p>表单经常是由输入框组成。这里介绍几个常用的输入框。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span>     文本框   <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> /&gt;</span> 密码框   <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span>   提交按扭  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> /&gt;</span> 复选框   <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> /&gt;</span>    单选框   <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> /&gt;</span>    重置按扭  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> /&gt;</span>    图片按扭  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> /&gt;</span>   隐藏域   <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> /&gt;</span>   按扭     <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> /&gt;</span>     浏览文件  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>执行后的效果大概如此</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-19/001.jpg"></p><p>这里以注册用户名为例，要求 **6-30位字母、数字或“_”,字母开头**</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">onblur</span>=<span class="string">"checkName()"</span> <span class="attr">id</span>=<span class="string">"username"</span> /&gt;</span>&amp;nbsp;<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"yes"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#FF9900"</span>&gt;</span>6-30位字母、数字或“_”,字母开头<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"info1"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>将改代码片段放入<body><p>标签下，最后执行结果如图所示：</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-19/002.jpg"></p><h3 id="onblur-介绍">onblur 介绍</h3><p>这里需要用到一个 <strong>event</strong> 对象 <code>onblur</code> ，定义为 <strong>onblur 事件会在对象失去焦点时发生</strong>，及当我光标离开输入框时触发事件发生，这非常适用于检查输入框内容的格式是否符合要求。当然还有很多 <code>events</code> ，若想了解更多可到 <a href="http://www.w3school.com.cn/jsref/dom_obj_event.asp" target="_blank" rel="noopener">w3school</a> 查询。</p><h3 id="span-介绍">span 介绍</h3><p><code>&lt;span&gt;</code> 标签被用来组合文档中的行内元素。这里主要用来显示错误信息。</p><h2 id="javascript-实现">JavaScript 实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> u = <span class="built_in">document</span>.getElementById(<span class="string">"username"</span>);</span><br><span class="line">    <span class="keyword">var</span> info1 = <span class="built_in">document</span>.getElementById(<span class="string">"info1"</span>);</span><br><span class="line">    <span class="keyword">var</span> yes = <span class="built_in">document</span>.getElementById(<span class="string">"yes"</span>);</span><br><span class="line">    <span class="keyword">if</span> (u.value == <span class="string">""</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        info1.innerHTML = <span class="string">"&lt;font color = 'red'&gt;✘请输入用户名！&lt;/font&gt;"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(u.value.length &lt; <span class="number">6</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        info1.innerHTML = <span class="string">"&lt;font color = 'red'&gt;✘用户名长度不能少于6个字符！&lt;/font&gt;"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> r = <span class="regexp">/^[a-zA-Z][a-zA-Z0-9_]&#123;5,29&#125;$/</span>;</span><br><span class="line">    <span class="keyword">if</span> (!r.test(u.value))</span><br><span class="line">    &#123;</span><br><span class="line">        info1.innerHTML = <span class="string">"&lt;font color = 'red'&gt;✘用户名只能由字母，数字，下划线组成，须以字母开头&lt;/font&gt;"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    yes.innerHTML = <span class="string">"&lt;font color='green'&gt;✔&lt;/font&gt;"</span>;</span><br><span class="line">    info1.innerHTML = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由代码可以很容易理解 JavaScript 语法需要先用 <code>document.getElementById("")</code> 获取输入框，然后用 <code>.value</code> 得到输入框的内容。</p><p>错误分三种情况：</p><p>1.如果输入为空，则错误信息为“请输入用户名！” 2.如果输入少于6个字符，则错误信息为“用户名长度不能少于6个字符！” 3.如果输入不满足由 <code>由字母，数字，下划线组成，须以字母开头</code> 这个条件，则错误信息为 <code>用户名只能由字母，数字，下划线组成，须以字母开头</code></p><p>三种错误方式分别如图所示</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-19/003.jpg"></p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-19/004.jpg"></p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-19/005.jpg"></p><p>正确方式如图所示</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-19/006.jpg"></p><p>其中最后的条件限制使用了正则表达式。</p><h3 id="placeholder-介绍">placeholder 介绍</h3><p>placeholder 是 html5 <code>&lt;input&gt;</code> 里的属性，提供可描述输入字段预期值的提示信息（hint）。</p><p>为了</p><p>具体代码如下，以下代码基于 <a href="https://kyfw.12306.cn/otn/regist/init" target="_blank" rel="noopener">12306 网上购票用户注册</a></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>无标题文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"width:210px"</span> <span class="attr">placeholder</span>=<span class="string">"用户名设置成功后不可修改"</span> <span class="attr">onblur</span>=<span class="string">"checkName()"</span> <span class="attr">id</span>=<span class="string">"username"</span> /&gt;</span>&amp;nbsp;<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"yes"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#FF9900"</span>&gt;</span>6-30位字母、数字或“_”,字母开头<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"info1"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="comment">&lt;!--失去焦点--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>登陆密码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">style</span>=<span class="string">"width:210px"</span> <span class="attr">placeholder</span>=<span class="string">"6-20位字母、数字或符号"</span> <span class="attr">onblur</span>=<span class="string">"checkPassword()"</span> <span class="attr">id</span>=<span class="string">"password"</span>/&gt;</span>&amp;nbsp;<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"yes1"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"info2"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>确认密码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">style</span>=<span class="string">"width:210px"</span> <span class="attr">placeholder</span>=<span class="string">"再次输入您的登录密码"</span> <span class="attr">onblur</span>=<span class="string">"checkPasswordtwice()"</span> <span class="attr">id</span>=<span class="string">"passwordconfirm"</span>/&gt;</span>&amp;nbsp;<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"yes2"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"info3"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>姓名:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"width:210px"</span> <span class="attr">placeholder</span>=<span class="string">"再次输入您的登录密码"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>证件类型:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">select</span> <span class="attr">style</span>=<span class="string">"width:210px"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>二代身份证<span class="tag">&lt;/<span class="name">option</span>&gt;</span> <span class="comment">&lt;!-- 选项 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>港澳通行证<span class="tag">&lt;/<span class="name">option</span>&gt;</span> <span class="comment">&lt;!-- 选项 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>台湾通行证<span class="tag">&lt;/<span class="name">option</span>&gt;</span> <span class="comment">&lt;!-- 选项 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>护照<span class="tag">&lt;/<span class="name">option</span>&gt;</span> <span class="comment">&lt;!-- 选项 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>证件号码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"width:210px"</span> <span class="attr">placeholder</span>=<span class="string">"请输入您的证件号码"</span> <span class="attr">onblur</span>=<span class="string">"checkID()"</span> <span class="attr">id</span>=<span class="string">"IDNO"</span> /&gt;</span>&amp;nbsp;<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"yes3"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"info4"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>手机号码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"width:210px"</span> <span class="attr">placeholder</span>=<span class="string">"请输入您的手机号码"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>旅客类型:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>成人<span class="tag">&lt;/<span class="name">option</span>&gt;</span> <span class="comment">&lt;!-- 选项 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>儿童<span class="tag">&lt;/<span class="name">option</span>&gt;</span> <span class="comment">&lt;!-- 选项 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>学生<span class="tag">&lt;/<span class="name">option</span>&gt;</span> <span class="comment">&lt;!-- 选项 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>残疾军人、伤残人民警察<span class="tag">&lt;/<span class="name">option</span>&gt;</span> <span class="comment">&lt;!-- 选项 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params"></span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> u = <span class="built_in">document</span>.getElementById(<span class="string">"username"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> info1 = <span class="built_in">document</span>.getElementById(<span class="string">"info1"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> yes = <span class="built_in">document</span>.getElementById(<span class="string">"yes"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (u.value == <span class="string">""</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="xml">        info1.innerHTML = "<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'https://kyfw.12306.cn/otn/resources/images/ots/icon_wrong.png'</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span> = <span class="string">'red'</span>&gt;</span>请输入用户名！<span class="tag">&lt;/<span class="name">font</span>&gt;</span>";</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(u.value.length &lt; <span class="number">6</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="xml">        info1.innerHTML = "<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'https://kyfw.12306.cn/otn/resources/images/ots/icon_wrong.png'</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span> = <span class="string">'red'</span>&gt;</span>用户名长度不能少于6个字符！<span class="tag">&lt;/<span class="name">font</span>&gt;</span>";</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> firstChar = u.value.charAt(<span class="number">0</span>);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">/*if (!((firstChar &gt;= 'a' &amp;&amp; firstChar &lt;= 'z') || (firstChar &gt;= 'A' &amp;&amp; firstChar &lt;= 'Z')))</span></span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="xml">        info.innerHTML = "<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span> = <span class="string">'red'</span>&gt;</span>✘用户名必须以字母开头！<span class="tag">&lt;/<span class="name">font</span>&gt;</span>";</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">    &#125;*/</span><br><span class="line"><span class="javascript">    <span class="comment">// 定义一个正则表达式，校验用户名的规则</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> r = <span class="regexp">/^[a-zA-Z][a-zA-Z0-9_]&#123;5,29&#125;$/</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (!r.test(u.value))</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="xml">        info1.innerHTML="<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'https://kyfw.12306.cn/otn/resources/images/ots/icon_wrong.png'</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span> = <span class="string">'red'</span>&gt;</span>用户名只能由字母，数字，下划线组成，须以字母开头<span class="tag">&lt;/<span class="name">font</span>&gt;</span>";</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="xml">    yes.innerHTML="<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">'green'</span>&gt;</span>✔<span class="tag">&lt;/<span class="name">font</span>&gt;</span>";</span></span><br><span class="line"><span class="javascript">    info1.innerHTML=<span class="string">""</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">/***************************checkPassword*************************/</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> pass = <span class="string">""</span>;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">checkPassword</span>(<span class="params"></span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> p = <span class="built_in">document</span>.getElementById(<span class="string">"password"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> info2 = <span class="built_in">document</span>.getElementById(<span class="string">"info2"</span>);</span></span><br><span class="line">    pass = p.value;</span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (p.value == <span class="string">""</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="xml">        info2.innerHTML = "<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'https://kyfw.12306.cn/otn/resources/images/ots/icon_wrong.png'</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span> = <span class="string">'red'</span>&gt;</span>请输入密码！<span class="tag">&lt;/<span class="name">font</span>&gt;</span>";</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(p.value.length &lt; <span class="number">6</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="xml">        info2.innerHTML = "<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'https://kyfw.12306.cn/otn/resources/images/ots/icon_wrong.png'</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span> = <span class="string">'red'</span>&gt;</span>密码长度不能少于6个字符！<span class="tag">&lt;/<span class="name">font</span>&gt;</span>";</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> firstChar = p.value.charAt(<span class="number">0</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义一个正则表达式，校验用户名的规则</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> r = <span class="regexp">/^[a-zA-Z][a-zA-Z0-9_]&#123;5,29&#125;$/</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (!r.test(p.value))</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="xml">        info2.innerHTML="<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'https://kyfw.12306.cn/otn/resources/images/ots/icon_wrong.png'</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span> = <span class="string">'red'</span>&gt;</span>只能由字母，数字，下划线组成，须以字母开头";</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="xml">    yes1.innerHTML="<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">'green'</span>&gt;</span>✔<span class="tag">&lt;/<span class="name">font</span>&gt;</span>";</span></span><br><span class="line"><span class="javascript">    info2.innerHTML=<span class="string">""</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">/*********************checkPasswordtwice*******************************/</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">checkPasswordtwice</span>(<span class="params"></span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">"passwordconfirm"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> info3 = <span class="built_in">document</span>.getElementById(<span class="string">"info3"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (p1.value!=pass)</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="xml">        info3.innerHTML = "<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'https://kyfw.12306.cn/otn/resources/images/ots/icon_wrong.png'</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span> = <span class="string">'red'</span>&gt;</span>确认密码与密码不同！<span class="tag">&lt;/<span class="name">font</span>&gt;</span>";</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="xml">    yes2.innerHTML="<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">'green'</span>&gt;</span>✔<span class="tag">&lt;/<span class="name">font</span>&gt;</span>";</span></span><br><span class="line"><span class="javascript">    info3.innerHTML=<span class="string">""</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">/*****************************checkID*********************************/</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">checkID</span>(<span class="params"></span>)</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> p2 = <span class="built_in">document</span>.getElementById(<span class="string">"IDNO"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> info4 = <span class="built_in">document</span>.getElementById(<span class="string">"info4"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//var r = /^[0-9][a-zA-Z0-9]&#123;18&#125;$/;</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> r1 = <span class="regexp">/[0-9]&#123;18&#125;$/</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (!r1.test(p2.value))</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="xml">        info4.innerHTML="<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">'https://kyfw.12306.cn/otn/resources/images/ots/icon_wrong.png'</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span> = <span class="string">'red'</span>&gt;</span>请正确输入18位的身份证号<span class="tag">&lt;/<span class="name">font</span>&gt;</span>";</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="xml">    yes3.innerHTML="<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">'green'</span>&gt;</span>✔<span class="tag">&lt;/<span class="name">font</span>&gt;</span>";</span></span><br><span class="line"><span class="javascript">    info4.innerHTML=<span class="string">""</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></body>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;表单的验证在实际生活中很常见，比如注册页面要求用户名长度6-12位，如果不在这个范围内会报错的。&lt;/p&gt;
&lt;p&gt;表单的验证一般使用 JavaScript 实现，博主在这里简单介绍一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="知识点" scheme="https://xungejiang.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="HTML" scheme="https://xungejiang.com/tags/HTML/"/>
    
      <category term="JS" scheme="https://xungejiang.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>wordpress 使用 highlight.js 添加语法高亮</title>
    <link href="https://xungejiang.com//2016/07/19/highlight/"/>
    <id>https://xungejiang.com//2016/07/19/highlight/</id>
    <published>2016-07-19T01:01:42.000Z</published>
    <updated>2016-07-19T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>wordpress 使用 highlight.js 添加语法高亮</p><p>转载作者博客：<a href="http://www.snovey.com/" target="_blank" rel="noopener">snovey</a></p><a id="more"></a><h2 id="highlight.js-简介">highlight.js 简介</h2><p>wordpress 有强大的 <a href="https://cn.wordpress.org/plugins/crayon-syntax-highlighter/" target="_blank" rel="noopener">Crayon Syntax Highlighter</a>，因为太过强大，很多功能用不上，用这个插件会拖慢网站速度，于是找到了这个插件：<a href="https://highlightjs.org/" target="_blank" rel="noopener">highlight.js</a>，如果你只是想给代码添加简单的高亮而不需要添加行号、复制按钮之类的功能，那么这款插件刚好适合你。下面简单的介绍一下： <a href="https://highlightjs.org/" target="_blank" rel="noopener">highlight.js</a> 是一款强大的代码高亮插件。官方给出描述如下：</p><blockquote><ul><li>支持 166 种语言，有 77 种样式</li><li>自动识别语言</li><li>同时支持多种语言</li><li>支持 node.js 平台</li><li>支持各种标记</li><li>兼容任何 js 框架</li></ul></blockquote><p>该项目已在 Github 开源，项目地址：<a href="https://github.com/isagalaev/highlight.js" target="_blank" rel="noopener">highlight.js</a> 安装的思路非常简单：</p><blockquote><ol type="1"><li>导入 CSS 文件</li><li>导入 JS 文件</li><li>加载 JS</li></ol></blockquote><h2 id="导入-highlight.js">导入 highlight.js</h2><p>最简单粗暴的方法如下，在 <code>header.php</code> 中加入如下代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"/path/to/styles/default.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"/path/to/highlight.pack.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;hljs.initHighlightingOnLoad();<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>注意修改路径！ 当然，这个办法非常不可取，JS 应当放在 <code>&lt;body&gt;</code> 中而非 <code>&lt;head&gt;</code> 中，所以改进后的办法是将</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"/path/to/highlight.pack.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;hljs.initHighlightingOnLoad();<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>移至 <code>footer.php</code> 中 <code>&lt;/body&gt;</code> 标签之前。 为了插件化我更推荐你这样做：在 <code>function.php</code> 中添加如下代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add_highlight_js</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    wp_enqueue_style(<span class="string">'highlightcss'</span>,<span class="string">'/path/to/styles/default.css'</span>);</span><br><span class="line">    wp_register_script(<span class="string">'highlightjs'</span>,<span class="string">'/path/to/highlight.pack.js'</span>); <span class="comment">//注册 handle</span></span><br><span class="line">    wp_enqueue_script(<span class="string">'highlightjs'</span>, <span class="literal">false</span>, array(), <span class="literal">false</span>, <span class="literal">true</span>); <span class="comment">//放至&lt;body&gt;下方</span></span><br><span class="line">&#125;</span><br><span class="line">add_action(<span class="string">'wp_enqueue_scripts'</span>, <span class="string">'add_highlight_js'</span>);</span><br></pre></td></tr></table></figure><p>然后在 <code>footer.php</code> 中添加</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;hljs.initHighlightingOnLoad();<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>设置触发函数。</p><h2 id="关于安装路径">关于安装路径</h2><p>如果是下载至本地，那么在网站的 <code>/wp-content/plugins/</code> 目录下新建 <code>highlight</code> 文件夹，然后将压缩包解压至该文件夹，将上述的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/path/to/styles/default.css</span><br><span class="line">/path/to/highlight.pack.js</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> get_site_url() . <span class="string">'/wp-content/plugins/highlight/default.css'</span>;<span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> get_site_url() . <span class="string">'/wp-content/plugins/highlight/highlight.min.js'</span>;<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>即可。如果想要提高网站的速度，也可以不从本地加载，转而使用第三方提供的 CDN，下面贴几个。</p><p>cdnjs</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.6.0/highlight.min.js</span><br></pre></td></tr></table></figure><p>yandex:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://yandex.st/highlightjs/8.2/styles/default.min.css</span><br><span class="line">https://yandex.st/highlightjs/8.2/highlight.min.js</span><br></pre></td></tr></table></figure><p>Bootstrap</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://cdn.bootcss.com/highlight.js/9.6.0/styles/default.min.css</span><br><span class="line">https://cdn.bootcss.com/highlight.js/9.6.0/highlight.min.js</span><br></pre></td></tr></table></figure><p>注意 <code>cdnjs</code> 不提供 CSS，而 <code>yandex</code> 貌似没有 8.2 以后的版本，根据自己的情况选择 CDN 吧。如果你想自定义代码高亮，不妨从 CDN 加载 JS，从本地加载 CSS，这里不啰嗦了。</p><h2 id="使用-highlight.js">使用 highlight.js</h2><p><code>hljs.initHighlightingOnLoad()</code> 会寻找 <code>&lt;pre&gt;&lt;code&gt;</code> 标签，所以使用 highlight.js 时应当这样写代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">"html"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p>记得在 class 中填写语言的类型。啥？介绍时不是说可以自动识别么？即便如此，标记语言类型是一种良好的编码习惯。</p><p>参考链接：</p><p><a href="https://highlightjs.org/" target="_blank" rel="noopener">highlight.js</a> <a href="https://github.com/isagalaev/highlight.js" target="_blank" rel="noopener">highlight.js</a> <a href="https://blog.wpjam.com/article/how-to-include-js-and-css-in-wordpress/" target="_blank" rel="noopener">如何正确引用 JavaScript 和 CSS 文件</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;wordpress 使用 highlight.js 添加语法高亮&lt;/p&gt;
&lt;p&gt;转载作者博客：&lt;a href=&quot;http://www.snovey.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;snovey&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="wordpress" scheme="https://xungejiang.com/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>macOS 如何安装 tomcat</title>
    <link href="https://xungejiang.com//2016/07/18/mac-install-tomcat/"/>
    <id>https://xungejiang.com//2016/07/18/mac-install-tomcat/</id>
    <published>2016-07-18T01:01:42.000Z</published>
    <updated>2016-07-18T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Tomcat 服务器是一个免费的开放源代码的 Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试 JSP 程序的首选。</p><p>博主是在学习 JavaWeb 的时候接触到 tomcat 的，这里介绍一下在 mac 系统安装 tomcat 的过程</p><a id="more"></a><h2 id="下载-tomcat">下载 tomcat</h2><p>首先到 <a href="http://tomcat.apache.org" target="_blank" rel="noopener">tomcat 官网</a> 下载 tomcat ，版本既然是新版兼容旧版当然是越新越好啦。</p><p>选择 <code>zip</code> 或者 <code>tar.gz</code> 下载即可。下载后解压，更名为 <code>tomcat</code> ，并复制到 <code>/Library</code> (就是finder中的资源库)。当时博主将文件夹重命名为 tomcat 后居然带后缀名 <code>tomcat.M9</code> 。。文件夹居然带后缀名！！后缀名居然删不掉！！也不知道那个 <code>.M9</code> 是咋出来的。。在表面看是看不到的啊！！</p><h2 id="修改授权">修改授权</h2><p>tomcat中的几个运行服务程序都是以*.sh结尾的，在运行之前需要授权。打开终端输入如下命令:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chmod 755 /Library/tomcat/bin/*.sh</span><br></pre></td></tr></table></figure><p>其中 tomcat 为你的文件夹名。(博主当时很无奈的将tomcat换成了tomcat.M9)</p><p>回车出现要输入密码：请输入本机账户密码</p><h2 id="启动-tomcat-服务">启动 tomcat 服务</h2><p>先使用 cd 命令进入tomcat的bin目录,命令如下:</p><p>cd /Library/tomcat/bin/</p><p>启动服务命令:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo sh startup.sh</span><br></pre></td></tr></table></figure><p>启动成功,会出现如下结果:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Using CATALINA_BASE:   /ProgramFile/tomcat</span><br><span class="line">Using CATALINA_HOME:   /ProgramFile/tomcat</span><br><span class="line">Using CATALINA_TMPDIR: /ProgramFile/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home</span><br><span class="line">Using CLASSPATH:       /ProgramFile/tomcat/bin/bootstrap.jar:/ProgramFile/tomcat/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br></pre></td></tr></table></figure><p>如果出现如上结果，说明tomcat启动成功。</p><p>这个时候输入 http://localhost:8080/ 应该就可以访问了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tomcat 服务器是一个免费的开放源代码的 Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试 JSP 程序的首选。&lt;/p&gt;
&lt;p&gt;博主是在学习 JavaWeb 的时候接触到 tomcat 的，这里介绍一下在 mac 系统安装 tomcat 的过程&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="mac" scheme="https://xungejiang.com/tags/mac/"/>
    
      <category term="tomcat" scheme="https://xungejiang.com/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>macOS 如何显示隐藏文件</title>
    <link href="https://xungejiang.com//2016/07/18/mac-show-hidden-files/"/>
    <id>https://xungejiang.com//2016/07/18/mac-show-hidden-files/</id>
    <published>2016-07-18T01:01:42.000Z</published>
    <updated>2016-07-18T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>mac 为了系统安全会将一些文件夹隐藏，避免用户误删除造成的系统崩溃，但是在安装配置文件时经常需要到隐藏目录下操作，所以这里介绍两种方法，将隐藏的文件显示出来。</p><a id="more"></a><h2 id="第一种方法-命令行">第一种方法 命令行</h2><p>命令方式最简单，键入如下两行命令你就可以实现对文件的现实和隐藏功能了。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">显示：defaults write com.apple.finder AppleShowAllFiles -bool true</span><br><span class="line">隐藏：defaults write com.apple.finder AppleShowAllFiles -bool false</span><br></pre></td></tr></table></figure><p>然后 <strong>重启 Finder</strong> !!!!很重要!!!!楼主就是试了好多次最后发现栽在这上面了</p><p>方法如图</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-18/005.jpg"></p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-18/002.jpg"></p><h2 id="第二种方法-finder-中设置">第二种方法 Finder 中设置</h2><p>在 Finder 中进入任意文件夹，按快捷键<code>Command + F</code> 调出搜索窗口，点击"种类"选项卡，在下面找到"其他"，如图所示</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-18/003.jpg"></p><p>在弹出的窗口里 找到"文件可见性" 选项(可通过搜索快速查找)，勾选后面的方框,点击"好"保存设置。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-18/004.jpg"></p><p>当然！！仍然需要重启 Finder ！！方法同上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;mac 为了系统安全会将一些文件夹隐藏，避免用户误删除造成的系统崩溃，但是在安装配置文件时经常需要到隐藏目录下操作，所以这里介绍两种方法，将隐藏的文件显示出来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="mac" scheme="https://xungejiang.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>HTML 标签总结</title>
    <link href="https://xungejiang.com//2016/07/16/html-tab/"/>
    <id>https://xungejiang.com//2016/07/16/html-tab/</id>
    <published>2016-07-16T01:01:42.000Z</published>
    <updated>2016-07-16T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>HTML (HyperText Markup Language) 超文本标记语言，<strong>超文本</strong> 就是指页面内可以包含图片、链接，甚至音乐、程序等非文字元素。</p><a id="more"></a><p>超文本标记语言的结构包括 <strong>头</strong> 部分（英语：Head）、和 <strong>主体</strong> 部分（英语：Body），其中 <strong>头</strong> 部提供关于网页的信息，<strong>主体</strong> 部分提供网页的具体内容。</p><h2 id="前言">前言</h2><p><strong>HTML</strong> 标签很多，都记住有一定的困难。所以这里推荐 <strong>Dreamweaver</strong> ，很强大，标签有很多的提示。当然也有推荐初学者使用记事本编辑html文件的，不过仁者见仁智者见智吧，大家自己选择。</p><p>这里推荐两个网站，是专门查询标签的功能，并且可以在线查看效果的</p><p>1.<a href="http://www.w3school.com.cn/tags/" target="_blank" rel="noopener">http://www.w3school.com.cn/tags/</a></p><p>2.<a href="http://www.runoob.com/html/html-tutorial.html" target="_blank" rel="noopener">http://www.runoob.com/html/html-tutorial.html</a></p><h2 id="html-的基本标签">HTML 的基本标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">基本</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>...<span class="tag">&lt;/<span class="name">html</span>&gt;</span>        定义 HTML 文档</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>...<span class="tag">&lt;/<span class="name">head</span>&gt;</span>        文档的信息</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span>&gt;</span>                  HTML 文档的元信息</span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>...<span class="tag">&lt;/<span class="name">title</span>&gt;</span>      文档的标题</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span>&gt;</span>                  文档与外部资源的关系</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span>...<span class="tag">&lt;/<span class="name">style</span>&gt;</span>      文档的样式信息</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>...<span class="tag">&lt;/<span class="name">body</span>&gt;</span>        可见的页面内容</span><br><span class="line"><span class="comment">&lt;!--...--&gt;</span>              注释</span><br><span class="line"></span><br><span class="line">文本</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>            标题字大小（h1~h6）</span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>...<span class="tag">&lt;/<span class="name">b</span>&gt;</span>              粗体字</span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>...<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>    粗体字(强调)</span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>...<span class="tag">&lt;/<span class="name">i</span>&gt;</span>              斜体字</span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>...<span class="tag">&lt;/<span class="name">em</span>&gt;</span>            斜体字(强调)</span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>...<span class="tag">&lt;/<span class="name">u</span>&gt;</span>              下划线</span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>...<span class="tag">&lt;/<span class="name">del</span>&gt;</span>          删除线(表示删除)</span><br><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>...<span class="tag">&lt;/<span class="name">center</span>&gt;</span>    居中文本</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>...<span class="tag">&lt;/<span class="name">ul</span>&gt;</span>            无序列表</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span>...<span class="tag">&lt;/<span class="name">ol</span>&gt;</span>            有序列表</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span>            列表项目</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">”...”</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span>   超链接</span><br><span class="line"><span class="tag">&lt;<span class="name">font</span>&gt;</span>                  定义文本字体尺寸、颜色、大小</span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>                   下标</span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>                   上标</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>                    换行</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>                     段落</span><br><span class="line"></span><br><span class="line">图形</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">”...”</span>&gt;</span>         定义图像</span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span>                    水平线</span><br><span class="line"></span><br><span class="line">表格</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span>...<span class="tag">&lt;/<span class="name">table</span>&gt;</span>      定义表格</span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>...<span class="tag">&lt;/<span class="name">th</span>&gt;</span>            定义表格中的表头单元格</span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span>...<span class="tag">&lt;/<span class="name">tr</span>&gt;</span>            定义表格中的行</span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>...<span class="tag">&lt;/<span class="name">td</span>&gt;</span>            定义表格中的单元</span><br><span class="line"></span><br><span class="line">其它</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span>...<span class="tag">&lt;/<span class="name">form</span>&gt;</span>        定义供用户输入的 HTML 表单</span><br><span class="line"><span class="tag">&lt;<span class="name">frame</span>&gt;</span>                 定义框架集的窗口或框架</span><br></pre></td></tr></table></figure><p>##表单</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"url"</span> <span class="attr">method</span>=<span class="string">get|post</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span> 定义表单</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span> 上传档案</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text|password|checkbox|radio|image|hidden|submit|reset"</span>&gt;</span> 输入栏位</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"***"</span>&gt;</span> 栏位名称</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"***"</span>&gt;</span> 栏位内定值</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">checked</span>&gt;</span> 已选定（适用於checkboxes与 radio boxes）</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">size</span>=<span class="string">?</span>&gt;</span> 栏位宽度（以字元数为单位）</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">maxlength</span>=<span class="string">?</span>&gt;</span> 最长字数（以字元数为单位）</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span> 下拉式选单</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"***"</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span> 下拉式选单名称</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">size</span>=<span class="string">?</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span> 选单项目数量</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">multiple</span>&gt;</span> 多选式选单 （多选）</span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span> 选项</span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span> 内定选项</span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">?</span> <span class="attr">cols</span>=<span class="string">?</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> 文字输入区</span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"***"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> 输入区名称</span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">wrap</span>=<span class="string">off|virtual|physical</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> 输入区换行方式</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span>     文本框   <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> /&gt;</span> 密码框   <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> /&gt;</span>   提交按扭  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> /&gt;</span> 复选框   <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> /&gt;</span>    单选框   <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> /&gt;</span>    重置按扭  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> /&gt;</span>    图片按扭  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> /&gt;</span>   隐藏域   <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> /&gt;</span>   按扭    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> /&gt;</span>     浏览文件 <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      HTML 标签总结
    
    </summary>
    
    
      <category term="知识点" scheme="https://xungejiang.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="HTML" scheme="https://xungejiang.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>JDBC 基本使用方法</title>
    <link href="https://xungejiang.com//2016/07/15/jdbc/"/>
    <id>https://xungejiang.com//2016/07/15/jdbc/</id>
    <published>2016-07-15T01:01:42.000Z</published>
    <updated>2016-07-15T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>JDBC（Java Data Base Connectivity,java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。其优点是不论使用何种数据库，只需要更改配置文件即可。</p><a id="more"></a><h2 id="前言">前言</h2><p>2016-07-10学校组织来大连东软实训，我选择的是 JavaWeb 方向，经过20天的学习收获还是蛮大的。第一个知识点是 jdbc 。为了留点纪念，所以想把老师讲的知识全部复述一下，可以说是详细版教程。</p><p>在东软，老师把 MySQL 和 Oracle 的使用方法都介绍了，但是由于 Oracle 过大，占内存，卸载不干净，所以在这里只介绍 MySQL 数据库的操作。</p><h2 id="mysql-的安装">MySQL 的安装</h2><p>首先到官网下载 <a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">MySQL</a> 的数据库，和<a href="https://dev.mysql.com/downloads/workbench/" target="_blank" rel="noopener">MySQL Workbench</a> 的数据库操作界面。Windows 版的在安装时记得在填写密码时一定要记住，并且选择 <code>utf-8</code> 编码。mac 版的安装很简单，但是在创建数据库的时候记得填写密码，否则会生成临时密码，如果当时没有记住临时密码就惨了。</p><p>然后在 MySQL 上新建一个数据库，并在空白区域右键 <code>create schema</code> 。</p><h2 id="创建一张表">创建一张表</h2><p>当然 JDBC 是需要掌握 SQL 语句的一般语法。</p><p>使用 JDBC 的话一般只进行<code>增加(insert)</code>，<code>删除(delete)</code>，<code>修改(update)</code>，<code>查询(select)</code> 等操作而很少进行 <code>创建(create)</code> 操作，所以现在需要手动创建一张表。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu (</span><br><span class="line">    stu_no <span class="built_in">INT</span>(<span class="number">20</span>),</span><br><span class="line">    stu_name <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    stu_tel <span class="built_in">VARCHAR</span>(<span class="number">15</span>),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> pk_stu_no PRIMARY <span class="keyword">KEY</span> (stu_no),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> uk_stu_tel <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> (stu_tel)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这里以学生表为例。</p><h2 id="eclipse的安装">eclipse的安装</h2><p>在东软老师推荐用 MyEclipse ，因为将来的 JavaWeb 需要各种插件。但是 MyEclipse 需要花钱买，否则需要破解。破解网上教程太多，就不举例了。</p><p>而 eclipse 是开源免费的。如果只用 JDBC 的话 eclipse 完全足够。这里给出<a href="http://www.eclipse.org/downloads/eclipse-packages/" target="_blank" rel="noopener">官网下载地址</a>。</p><p>注意选择 <code>Java EE</code> 版本，并可以选择中国镜像，下载速度更快。</p><h2 id="jdbc-的初步实现">JDBC 的初步实现</h2><p>用 eclipse 新建一个 <strong>java project</strong> 起名为 <strong>jdbc</strong></p><p>在工程下新建文件夹，命名为 <strong>lib</strong> ，将<a href="http://pan.baidu.com/s/1jIKxFlc" target="_blank" rel="noopener">MySQL 的驱动文件</a>复制到该文件夹，并右键 <strong>Build Path</strong> -&gt; <strong>Add to Build Path</strong> 。这时发现在工程里出现 <strong>Referenced Libraries</strong> ，里面有和刚才同名的 <strong>jar</strong> 文件。</p><p>在 <strong>src</strong> 中新建一个包。由于包的名字一般由公司域名倒置构成，所以我起名为 <code>com.xunge.jdbc</code></p><p>在包中新建一个类，类名为 <code>JDBCDemo</code>， 并录入以下代码。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xunge.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 加载数据库驱动程序</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 定义数据库URL</span></span><br><span class="line">        String url = <span class="string">"jdbc:mysql://localhost:3306/jdbc?useUnicode=true&amp;amp;characterEncoding=utf-8"</span>;</span><br><span class="line">        <span class="comment">// 获得与数据库的连接</span></span><br><span class="line">        Connection con = <span class="keyword">null</span>; <span class="comment">// 数据库连接</span></span><br><span class="line">        Statement st = <span class="keyword">null</span>;   <span class="comment">// 语句</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con = DriverManager.getConnection(url, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">            <span class="comment">// 创建 Statement 语句</span></span><br><span class="line">            st = con.createStatement();</span><br><span class="line">            <span class="comment">// 执行 SQL 语句</span></span><br><span class="line">            <span class="keyword">int</span> result = st.executeUpdate(<span class="string">"insert into stu values(2014201106,'jiangxunzhi','13654505793')"</span>);</span><br><span class="line">            System.out.println(result + <span class="string">"行数已更新"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 释放数据库资源</span></span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                st.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                con.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中的 <code>try catch</code> 和 导的包是用 <strong>eclipse</strong> 自动提示添加的。</p><p>上面的代码用 <strong>executeUpdate</strong> 方法，可以进行 <code>增加(insert)</code>， <code>删除(delete)</code>， <code>修改(update)</code> 操作，返回的是更新数据的行数。而 <code>查询(select)</code> 语句需要用 <strong>executeQuery</strong> 方法。</p><h2 id="jdbc-的代码重构">JDBC 的代码重构</h2><p>然而这个代码如果多次执行的话重复的代码过多，需要进行代码复用。现在可以看到的是 <strong>连接数据库</strong> 和 <strong>删除数据库</strong> 代码是不变的，可以进行代码复用。</p><p>方法是：</p><p>1.在 <strong>src</strong> 新建一个包，包名为 <code>com.xunge.jdbc.common</code>。</p><p>2.在该包下新建一个文件，文件名为 <code>dbmysql.properties</code>。文件内容如下</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MySQL</span></span><br><span class="line"><span class="string">driver</span> <span class="string">=</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="string">url</span> <span class="string">=</span> <span class="attr">jdbc:mysql://localhost:3306/jbdc?useUnicode=true&amp;amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="string">username</span> <span class="string">=</span> <span class="string">root</span></span><br><span class="line"><span class="string">password</span> <span class="string">=</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><p>这个是 <strong>MySQL</strong> 数据库的配置文件。如果用的是 <strong>Oracle</strong> 数据库，则配置文件如下</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Oracle</span></span><br><span class="line"><span class="string">driver</span> <span class="string">=</span> <span class="string">oracle.jdbc.driver.OracleDriver</span></span><br><span class="line"><span class="string">url</span> <span class="string">=</span> <span class="attr">jdbc:oracle:thin:@localhost:1521:orcl</span></span><br><span class="line"><span class="string">username</span> <span class="string">=</span> <span class="string">scott</span></span><br><span class="line"><span class="string">password</span> <span class="string">=</span> <span class="string">tiger</span></span><br></pre></td></tr></table></figure><p>properties 文件为配置文件。</p><p>2.在该包下新建一个类，类名为 <code>JDBCUtil</code>，作为 JDBC 的工具类，内容如下。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xunge.jdbc.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工具类是代码重构的一种方式</span></span><br><span class="line"><span class="comment">// 他解决的是在不同类中片段重复出现的代码</span></span><br><span class="line"><span class="comment">// 工具类的方法必须是声明成静态</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driverClass;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String dbUrl;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String passWord;</span><br><span class="line">    <span class="comment">// 只会执行一次</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 读取配置文件信息</span></span><br><span class="line">        Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            p.load(JDBCUtil.class.getResourceAsStream(<span class="string">"db.properties"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        driverClass = p.getProperty(<span class="string">"driver"</span>);</span><br><span class="line">        dbUrl = p.getProperty(<span class="string">"url"</span>);</span><br><span class="line">        userName = p.getProperty(<span class="string">"username"</span>);</span><br><span class="line">        passWord = p.getProperty(<span class="string">"password"</span>);</span><br><span class="line">        <span class="comment">// 加载驱动程序</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(driverClass);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获得与数据库的连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获得连接</span></span><br><span class="line">            con = DriverManager.getConnection(dbUrl, userName, passWord);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> con;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 释放数据库的资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeResource</span><span class="params">(Statement st, Connection con)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            st.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 释放数据库的资源 方法的重载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeResource</span><span class="params">(ResultSet rs, Statement st, Connection con)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rs.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            st.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            con.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后就可以引用工具类里的函数将 JDBC 实现出来。</p><h2 id="jdbc-的查询">JDBC 的查询</h2><p>由上文知 <code>增加(insert)</code>， <code>删除(delete)</code>， <code>修改(update)</code> 操作用 <strong>executeUpdate</strong> 方法，返回的是更新数据的行数。</p><p>而 <code>查询(select)</code> 操作需要用 <strong>executeQuery</strong> 方法，需要用 <strong>executeQuery</strong> 方法，用 <strong>ResultSet</strong> 接收数据并输出。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xunge.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xunge.jdbc.common.JDBCUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo_select</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        Statement st = <span class="keyword">null</span>;</span><br><span class="line">        ResultSet rs = <span class="keyword">null</span>; <span class="comment">// 结果集，用于保存查询到的数据</span></span><br><span class="line">        con = JDBCUtil.getConnection();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            st = con.createStatement();</span><br><span class="line">            <span class="comment">// executeQuery 有一个返回值 ResultSet</span></span><br><span class="line">            rs = st.executeQuery(<span class="string">"select * from stu"</span>);</span><br><span class="line">            <span class="comment">// 处理结果集，取出数据</span></span><br><span class="line">            <span class="comment">// 先判断有没有数据，如果有再去数据</span></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="comment">// 按列取，用 get XXX方法，同事需要指定列名（有别名，按别名取）</span></span><br><span class="line">                <span class="keyword">int</span> stu_no = rs.getInt(<span class="string">"stu_no"</span>);</span><br><span class="line">                String stu_name = rs.getString(<span class="string">"stu_name"</span>);</span><br><span class="line">                String stu_tel = rs.getString(<span class="string">"stu_tel"</span>);</span><br><span class="line">                System.out.println(stu_no + <span class="string">"\t"</span> + stu_name + <span class="string">"\t"</span> + stu_tel);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtil.closeResource(rs, st, con);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jdbc-的预编译语句实现">JDBC 的预编译语句实现</h2><p>这里介绍一下 预编译语句。预编译语句 的优点是 如果遇到两条 SQL 语句除了几个参数不同，其他不变的话（尤其是插入语句！！），用 预编译语句 是再合适不过的啦。预编译不仅运行更快，而且写起来也方便很多。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xunge.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.xunge.jdbc.common.JDBCUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo_gai</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Connection con = <span class="keyword">null</span>;</span><br><span class="line">        PreparedStatement st = <span class="keyword">null</span>; <span class="comment">// 预编译语句</span></span><br><span class="line">        con = JDBCUtil.getConnection();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 预编译语句最大特点是先生成执行计划，这时具体的值用 ? 替代</span></span><br><span class="line">            st = con.prepareStatement(<span class="string">"insert into stu values (?, ?, ?)"</span>);</span><br><span class="line">            <span class="comment">// 执行之前需要将 ? 设值， 有几个 ? 就需要设值几个值</span></span><br><span class="line">            <span class="comment">// 使用 setXXX 设值, setXXX 方法需要两个参数，一个是需要代表第几个 ? ，从1开始，第二个是代表值</span></span><br><span class="line">            st.setInt(<span class="number">1</span>, <span class="number">2014201106</span>);</span><br><span class="line">            st.setString(<span class="number">2</span>, <span class="string">"jiangxunzhi"</span>);</span><br><span class="line">            st.setString(<span class="number">3</span>, <span class="string">"13654505797"</span>);</span><br><span class="line">            st.executeUpdate();</span><br><span class="line"></span><br><span class="line">            st.setInt(<span class="number">1</span>, <span class="number">2014201105</span>);</span><br><span class="line">            st.setString(<span class="number">2</span>, <span class="string">"gongyuxin"</span>);</span><br><span class="line">            st.setString(<span class="number">3</span>, <span class="string">"13654505796"</span>);</span><br><span class="line">            st.executeUpdate();</span><br><span class="line">            <span class="comment">// 以后建议使用 PreparedStatement 执行 SQL 语句</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            JDBCUtil.closeResource(st, con);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最后一段">最后一段</h2><p>以上就是 JDBC 配置的全部过程及简单的应用，相信在将来的 JavaWeb 开发中一定会用到其中的知识。</p><p>说说东软学校吧</p><p>东软老师真的很不错，很负责，也很耐心，遇到的一些问题向老师提问都会很快得到详细的解释，这样的教学方式非常值得大学老师的学习。</p><p>如果你们学校也组织来东软实训的话，我作为过来人也给出几条建议吧</p><ol type="1"><li>记得带网线！！！来这之前还一直担心没有网怎么熬过这个月，不过在贴吧里有很多卖账号的东软学生，比在外面办无线网卡合适多了。不过光用无线的话网速太慢，下载顶多200K，有网线的话轻松到1M。</li><li>如果是在东软A园区的话是没有独立卫浴的。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JDBC（Java Data Base Connectivity,java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。其优点是不论使用何种数据库，只需要更改配置文件即可。&lt;/p&gt;
    
    </summary>
    
    
      <category term="知识点" scheme="https://xungejiang.com/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="jdbc" scheme="https://xungejiang.com/tags/jdbc/"/>
    
  </entry>
  
  <entry>
    <title>github 的介绍以及基本配置</title>
    <link href="https://xungejiang.com//2016/07/07/github-intro/"/>
    <id>https://xungejiang.com//2016/07/07/github-intro/</id>
    <published>2016-07-07T01:01:42.000Z</published>
    <updated>2016-07-07T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>git介绍以及github的基本配置</p><a id="more"></a><h2 id="配置-git-环境">配置 Git 环境</h2><p><code>Linux</code> 和 <code>MAC</code> 环境下是自带 <code>GIT</code> 的，如果使用 <code>Windows</code> 的话有如下几个解决方案。</p><ul><li><a href="https://git-scm.com/download" target="_blank" rel="noopener">GIT 官网</a>下载</li><li><a href="http://cmder.net/" target="_blank" rel="noopener">Cmder</a>，选择 <code>Download full</code>，不仅自带 <code>GIT</code> ，而且是替代 <code>Windows</code> 自带很丑的 <code>cmd</code> 的很好选择。</li><li><a href="https://pan.baidu.com/s/1slD88nN" target="_blank" rel="noopener">GitHub 离线版</a>，GitHub 出品。</li></ul><p>建议大家使用命令行操作，方便快捷容易理解。</p><h2 id="配置-git-用户名和邮箱">配置 Git 用户名和邮箱</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;&#123;username&#125;&quot;     //用户名替换&#123;username&#125;</span><br><span class="line">$ git config --global user.email &quot;&#123;email&#125;&quot;    //邮箱替换&#123;email&#125;</span><br></pre></td></tr></table></figure><h2 id="配置-ssh">配置 SSH</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C&quot;&#123;email&#125;&quot;    //邮箱替换&#123;email&#125;</span><br></pre></td></tr></table></figure><p>一路回车到命令完成，win 系统默认在文件夹 <code>C:\Users\{你的用户名}\.ssh</code> ，该文件夹有 <code>id_rsa</code>（私钥） 和 <code>id_rsa.pub</code>（公钥） 两个文件。</p><p>将id_rsa.pub内容复制到自己的 Github 主页的 Settings -&gt; SSH keys，添加完毕即可。</p><p>可以输入以下命令，来测试是否能够正确链接到 github</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>若返回命令如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hi ***! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>则说明连接成功。</p><h2 id="创建新的-git-仓库">创建新的 GIT 仓库</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">::GIT 仓库初始化</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line">::添加 github 仓库 SSH 链接</span><br><span class="line">git remote add origin &#123;SSH url&#125;</span><br><span class="line"></span><br><span class="line">::将所有项目添加进仓库</span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">::提交所有变化文件(还没有上传)</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line"></span><br><span class="line">::上传文件</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h2 id="windows避免每次push都输入密码">windows避免每次push都输入密码</h2><p>如果你每次push的时候都需要输入github的用户名和密码，就会感到非常的麻烦。原因是我们push的地址使用的是https，把它改成ssh就好啦，因为我们之前已经在github上添加ssh秘钥了。这里介绍一下这个方法。</p><p>首先在git bash 输入 <code>$ git remote -v</code> 查看当前推送方法</p><p>若如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">origin https://github.com/someaccount/someproject.git (fetch)</span><br><span class="line">origin https://github.com/someaccount/someproject.git (push)</span><br></pre></td></tr></table></figure><p>则修改</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote set-url origin git@github.com:someaccount/someproject.git</span><br></pre></td></tr></table></figure><p>其中将https改为ssh的方式，这样就可以不用输入密码进行push了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git介绍以及github的基本配置&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="github" scheme="https://xungejiang.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>在 macOS 中使用 BootCamp 安装 Windows10</title>
    <link href="https://xungejiang.com//2016/07/07/mac-bootcamp-win10/"/>
    <id>https://xungejiang.com//2016/07/07/mac-bootcamp-win10/</id>
    <published>2016-07-07T01:01:42.000Z</published>
    <updated>2016-07-07T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>如何在苹果电脑中安装双系统 mac + win10</p><a id="more"></a><h2 id="前言">前言</h2><p>苹果电脑当然还是苹果系统最适合，优势最明显的是省电，当然也有美观、系统流畅等其他优点。但是也有很多劣势，比如 mac 系统学习成本比较大，很多软件不兼容。所以在硬盘空间的允许下装双系统应该是再合适不过的啦。</p><p>博主就是因为老爸不习惯 macOS ，而博主又特别喜欢 macOS 的界面，所以权衡利弊借助 bootcamp 装了双系统。</p><p>其实想在苹果电脑上运行 mac 还可以用虚拟机，这里推荐 <code>parlldesktop</code> 虚拟机，不过需要花钱，也有破解版。</p><h2 id="准备工作">准备工作</h2><p>win10 镜像， USB 2.0 。</p><h2 id="开始制作">开始制作</h2><p>首先需要 win10 镜像，推荐 <a href>MSN I tell you</a>，镜像都是原版无添加。</p><p>然后需要一个 USB 2.0 的U盘。。<strong>注意，最好！！一定！！是 2.0 的U盘</strong> 因为博主试过好多 3.0 的U盘都不成功，后来看有人建议用 2.0 的U盘试试，果然成功了！！博主用的是 Kingston 的 2.0 U盘。</p><p>然后需要用 bootcamp 制作 win10 的启动U盘。</p><p>实用工具 -&gt; bootcamp助理 -&gt; 继续 -&gt; 打好三个对勾，然后会自动将镜像拷贝到U盘，并下载一些必要的驱动。之后会自动重启，安装方法和 Windows 就没有什么区别了。</p><p>安装好 Windows 会发现没有无线网驱动，分辨率也不是很适配。这时候就需要打开C盘，会有一个 bootcamp 的文件夹，里头有 setup 的驱动程序，安装完成后就发现无线网卡出现了，分辨率也适配到了最佳水准。</p><hr><p>2018.10 update</p><p>新版 BootCamp(启动转换助理) 不再需要使用 U 盘，系统会自动将硬盘的一部分分区作为系统盘，并在之后的使用中删去这个分区，使用更加方便</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何在苹果电脑中安装双系统 mac + win10&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="mac" scheme="https://xungejiang.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text 3 设置C/C++编译环境</title>
    <link href="https://xungejiang.com//2016/07/07/sublime-C/"/>
    <id>https://xungejiang.com//2016/07/07/sublime-C/</id>
    <published>2016-07-07T01:01:42.000Z</published>
    <updated>2016-07-07T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文将着重介绍 Sublime 如何配置 C++ 环境，并给出方便 ACMer 的模板使用方式。</p><a id="more"></a><p>Sublime 作为文本编辑器的同时还可以进行一些轻量级的编程运算，由于其漂亮的界面，深得 ACMer 的喜爱。</p><p>虽然 Sublime 自带一个C语言的编译功能，但却无法使用，需要一定的配置才可以运行。</p><h2 id="安装mingw">安装MinGW</h2><p>要想编译C语言首先要有编译器，Windows平台主要是 <code>gcc</code> 和 <code>g++</code>，是通过安装 MinGW 实现的。</p><p>MinGW 的官网是 <a href="http://www.mingw.org/" target="_blank" rel="noopener">http://www.mingw.org/</a> ，但是从官网安装很麻烦，在线安装经常龟速容易失败。</p><p>博主推荐的方法是借助 <a href="http://www.codeblocks.org/downloads/binaries" target="_blank" rel="noopener">codeblocks</a>，选择带有MinGW的版本安装(100M以上)。</p><p>博主也提供一个 <a href="https://pan.baidu.com/s/1o80CoYm" target="_blank" rel="noopener">codeblocks-16.01mingw-setup</a> 的百度云下载，感觉codeblocks官网还是下载慢。</p><p>安装后把MinGW文件夹复制出来放到C盘根目录就可以了。</p><h2 id="环境变量配置">环境变量配置</h2><p>右键计算机-&gt;属性-&gt;高级系统设置-&gt;环境变量</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-7/023.jpg"></p><p>把 <code>C:\MinGW\bin</code> 添加到path变量中，注意前后英文分号。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-7/024.jpg"></p><h2 id="build-system-配置">Build System 配置</h2><p>Tools -&gt; Build System -&gt; New Build System</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-7/025.jpg"></p><p>将下面代码粘贴，并保存为 <code>gcc.sublime-build</code> 。</p><p>Windows 系统代码如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;encoding&quot;: &quot;cp936&quot;,</span><br><span class="line">    &quot;working_dir&quot;: &quot;$file_path&quot;,</span><br><span class="line">    &quot;shell_cmd&quot;: &quot;g++ -Wall -std=c++0x -fexec-charset=GBK $file_name -o $file_base_name&quot;,</span><br><span class="line">    &quot;file_regex&quot;: &quot;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&quot;,</span><br><span class="line">    &quot;selector&quot;: &quot;source.c++&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;variants&quot;:</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Run&quot;,</span><br><span class="line">            &quot;shell_cmd&quot;: &quot;g++ -Wall -fexec-charset=utf-8 \&quot;$file\&quot; -o \&quot;$file_base_name\&quot; &amp;&amp; start cmd /c \&quot;\&quot;$&#123;file_path&#125;/$&#123;file_base_name&#125;\&quot; &amp; pause\&quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MAC 系统代码如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;shell_cmd&quot;: &quot;g++ -o \&quot;$&#123;file_path&#125;/$&#123;file_base_name&#125;\&quot;\&quot;$&#123;file&#125;\&quot;&quot;,</span><br><span class="line">    &quot;file_regex&quot;: &quot;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&quot;,</span><br><span class="line">    &quot;working_dir&quot;: &quot;$&#123;file_path&#125;&quot;,</span><br><span class="line">    &quot;selector&quot;: &quot;source.c++&quot;,</span><br><span class="line"></span><br><span class="line">    &quot;variants&quot;:</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Run&quot;,</span><br><span class="line">            &quot;shell_cmd&quot;: &quot;g++ -o \&quot;$&#123;file_path&#125;/$&#123;file_base_name&#125;\&quot; \&quot;$&#123;file&#125;\&quot; &amp;&amp; open \&quot;$&#123;file_path&#125;/$&#123;file_base_name&#125;\&quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以用cmd运行，并且scanf也能读取。</p><h2 id="模板配置">模板配置</h2><p>sublime我认为最方便的地方就是可以设置一些模板，比如博主参加ACM竞赛开头会有很多在每道题都出现的语句，头文件等，如果有模板就会非常方便。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;snippet&gt;</span><br><span class="line">&lt;content&gt;&lt;![CDATA[</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = (<span class="keyword">int</span>)<span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL MOD = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="comment">//freopen("in.txt", "r", stdin);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cas;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;cas);</span><br><span class="line">    <span class="keyword">while</span>(cas--)</span><br><span class="line">    &#123;</span><br><span class="line">        $&#123;<span class="number">1</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">]]&gt;&lt;/content&gt;</span><br><span class="line">    &lt;!-- Optional: Set a tabTrigger to define how to trigger the snippet --&gt;</span><br><span class="line">    &lt;!-- &lt;tabTrigger&gt;hello&lt;/tabTrigger&gt; --&gt;</span><br><span class="line">    &lt;tabTrigger&gt;acm&lt;/tabTrigger&gt;</span><br><span class="line">    &lt;!-- Optional: Set a scope to limit where the snippet will trigger --&gt;</span><br><span class="line">    &lt;!-- &lt;scope&gt;source.python&lt;/scope&gt; --&gt;</span><br><span class="line">    &lt;scope&gt;source.c++&lt;/scope&gt;</span><br><span class="line">&lt;/snippet&gt;</span><br></pre></td></tr></table></figure><p>中间代码的位置当然可以修改。然后保存为<code>文件名.sublime-snippet</code>。例如博主起名为 <code>acm.sublime-snippet</code>，之后只要用sublime打开 <code>.cpp</code> 文件，输入 <code>acm</code> -&gt; 回车就可以显示中间代码。是不是很方便啊~</p><p>演示效果如下：</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-7/021.gif"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将着重介绍 Sublime 如何配置 C++ 环境，并给出方便 ACMer 的模板使用方式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="sublime" scheme="https://xungejiang.com/tags/sublime/"/>
    
      <category term="C++" scheme="https://xungejiang.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>使用 U 盘安装 mac OS 系统</title>
    <link href="https://xungejiang.com//2016/07/04/install-macOS/"/>
    <id>https://xungejiang.com//2016/07/04/install-macOS/</id>
    <published>2016-07-04T01:01:42.000Z</published>
    <updated>2016-07-04T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>安装 mac 系统有很多种方法，如网上恢复、时间机器恢复、App Store在线安装等等，但是我还是推荐使用 U 盘安装，因为不仅高效，而且还可以得到干净纯粹的系统。本文安装的 macOS 版本为 El Capitan，其他 macOS 依然适用。</p><a id="more"></a><h2 id="前言">前言</h2><p>博主家里有一台iMac一体机，买回来的时候就是win7（肯定是老爸要求换的），所以也一直当成windows电脑用着。然而博主家里还有台 MacBook Pro，被博主强行换成mac系统，简直不能再漂亮，再好用，所以决定将 iMac 也换成 mac 系统，再装win10，给老爸用。</p><p>然而开机长按 option（alt）键发现原来 mac 系统一直没删，这下就好办了。不过 mac 系统有点旧，还是 lion 系统，于是想给 mac 系统做一下彻底的升级。</p><h2 id="制作-mac-启动-u-盘">制作 mac 启动 U 盘</h2><p>这里网上也有很多帖子写的很好，这里也简单说一下。</p><p>首先准备一个 8G 左右的 U 盘，当然最好 3.0。然后进入 mac 系统（如果没有 mac 系统的话看看有没有同学有用苹果本的借一下。。实在没有安一个mac虚拟机也可以）。进入实用工具 -&gt; 磁盘工具，将U盘抹掉，格式为 <code>OS X 扩展(日志式)</code> ，名字叫做 <code>Capitan</code> (最好一致，后面代码用得上)。</p><p>当然还需要 El Capitan 安装程序，可以从 App Store上 下载(推荐，保证最新版)。也可以<a href="https://pan.baidu.com/s/16O0I" target="_blank" rel="noopener">百度云下载</a>下载。</p><p>确保在应用程序里有 <strong>安装OS X El Capitan</strong>。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-4/003.jpg"></p><p>之后在 <code>实用工具</code> -&gt; <code>终端</code> 输入下面代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo /Applications/Install\ OS\ X\ El\ Capitan.app/Contents/Resources/createinstallmedia --volume /Volumes/Capitan --applicationpath /Applications/Install\ OS\ X\ El\ Capitan.app --nointeraction</span><br></pre></td></tr></table></figure><p>其中Capitan是U盘名字，如若之前没听话没改名字，这里需要把<strong>Capitan</strong>改成你的U盘的名字。</p><p>做好后是这样滴</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-4/007.jpg"></p><p>如果出现错误则重新执行一次。</p><p>这样mac启动U盘就做好啦~</p><h2 id="安装前准备">安装前准备</h2><p>在这之前最好适用 Time Machine（时间机器）备份一下。如果电脑之前安过windows的话可能要费劲一些了，如果你的windows还分了好多区的话那就更麻烦了。。非常建议将windows分成一个区 <code>bootcamp</code> (C盘)，否则无法更新mac系统。或者像博主一样彻底一点将windows删除，更新完系统再重装windows。</p><h2 id="重启安装">重启安装</h2><p>插上U盘，重启电脑，并长按 <code>Option键</code> （alt键），进入选盘界面（如果不成功重启再试一次）</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-4/002.jpg"></p><p>进入后界面如下</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-4/004.jpg"></p><p>可以先进入 <code>安装 OS X</code>，选择 mac 系统盘，并下一步即可。</p><h2 id="可能出现的问题">可能出现的问题</h2><p>下面是可能会出现的问题，如果成功安装则跳过下文。</p><ul><li>如果提示 <code>这个磁盘没有使用GUID分区表方案</code> 如下图的话</li></ul><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-4/005.jpg"></p><p>则说明windows分区破坏了GUID分区，需要将windows分区删掉才能升级mac系统。</p><ul><li>如果删除了windows分区仍提示 <code>无法在此硬盘安装更新</code> 等类似字样的话，则说明只能将原来mac系统盘抹掉。</li></ul><p>方法是退出安装程序，在 <code>OS X 实用工具</code> 中选择磁盘工具，将 mac 系统盘抹掉,这样就能成功安装了（一个空电脑当然能成功安装系统）。</p><ul><li>如果遇到 <code>不能验证这个“安装 OS X El Capitan”应用程序副本。它在下载过程中可能已遭破坏或篡改。</code></li></ul><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-4/006.jpg"></p><p>不要真的相信程序坏掉了，解决方法是：先退出安装程序，在上面菜单栏选择 <code>终端</code>，输入下面代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date 122014102015.30</span><br></pre></td></tr></table></figure><p>这应该是系统bug，需要改一下时间，改完之后就应该没问题了。</p><hr><p>2018.10 Update</p><p>mac 系统新推出的 <code>macOS Mojave</code> 版本依然可以使用上述方法安装系统。</p><p>在终端输入代码制作安装 U 盘时可能会报 Warning，但并不影响。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装 mac 系统有很多种方法，如网上恢复、时间机器恢复、App Store在线安装等等，但是我还是推荐使用 U 盘安装，因为不仅高效，而且还可以得到干净纯粹的系统。本文安装的 macOS 版本为 El Capitan，其他 macOS 依然适用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="mac" scheme="https://xungejiang.com/tags/mac/"/>
    
      <category term="OS" scheme="https://xungejiang.com/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Sublime 介绍以及插件推荐</title>
    <link href="https://xungejiang.com//2016/07/03/sublime-introduction/"/>
    <id>https://xungejiang.com//2016/07/03/sublime-introduction/</id>
    <published>2016-07-03T01:01:42.000Z</published>
    <updated>2016-07-03T01:01:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单介绍一下刚开始使用 sublime 的配置方式和插件。</p><a id="more"></a><h2 id="前言">前言</h2><p><strong>Sublime</strong> 可是一款程序猿必知，必用，必会的一款文本编辑器，当然配有适当的插件也可以编译 <strong>C</strong>, <strong>C++</strong>, <strong>Java</strong>, <strong>Python</strong> 等所有简单程序，并且可以写 <strong>Markdown</strong> 文档，博主的博客就是用 sublime 写的哦~</p><h2 id="sublime-的下载">Sublime 的下载</h2><p><a href="https://www.sublimetext.com/3" target="_blank" rel="noopener">Sublime Text 3 官网下载</a></p><p>下载完成后字体可能太小， <code>Ctrl</code> + <code>=</code> 可以将字体调大。同理 <code>Ctrl</code> + <code>-</code> 可以调小字体。</p><p><strong>Sublime</strong> 并不是免费的软件，需要70刀左右。。然而博主还是个学生，比较穷，所以只好选择破解版。。不过等将来有钱了，我一定会来买正版的，现在就当为他的产品使用量做贡献吧。</p><p>怎么破解就不说了吧（网上搜该版本的注册码）</p><h2 id="package-control-的安装">Package Control 的安装</h2><p>既然要用 sublime 那一定是看中他的插件功能啦，然而插件的安装需要先安装 <a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">Package Control</a>，方法如下：</p><p><code>Ctrl</code> + <code>~</code> 或者 <code>View</code> -&gt; <code>Show Console</code> 调出 <code>Console</code> ，并将下面代码粘贴执行。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request,os; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &apos;wb&apos;).write(urllib.request.urlopen( &apos;https://sublime.wbond.net/&apos; + pf.replace(&apos; &apos;,&apos;%20&apos;)).read())</span><br></pre></td></tr></table></figure><p>如果安装成功，就可以在 Preferences 菜单下看到 <code>Package Settings</code> 和 <code>Package Control</code> 两个菜单。</p><p>若不能通过以上方式成功安装，可尝试以下方式手动安装：</p><p>点击 <code>Preferences</code> -&gt; <code>Browse Packages...</code> 菜单，进入打开的目录的上层目录（即 <code>Sublime Text 3</code> 目录），再打开 <code>Installed Packages</code> 目录</p><p>点击下载<a href="https://sublime.wbond.net/Package%20Control.sublime-package" target="_blank" rel="noopener">Package Control.sublime-package</a>并复制到 <code>Installed Packages</code> 目录</p><p>，之后就可以尽情的去安装插件啦~</p><h2 id="常用插件">常用插件</h2><p>经过上面安装了 Package Control 后，我们就可以通过快捷键 <code>Ctrl</code> + <code>Shift</code> + <code>P</code> 打开 Package Control 来安装插件了。在打开的输入框中输入 install ，会根据你的输入自动提示，选择 Package Control:Install Package，如下图。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-3/001.png"></p><p>等一会，便会又弹出一个输入框，输入你要安装插件的名字即可。</p><p>这里推荐几个必安插件：</p><h3 id="converttoutf8"><a href="https://packagecontrol.io/packages/ConvertToUTF8" target="_blank" rel="noopener">ConvertToUTF8</a></h3><p>文件转码成 <code>UTF-8</code> ，避免中文乱码。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-3/004.gif"></p><h3 id="gbk-encoding-support"><a href="https://packagecontrol.io/packages/GBK%20Encoding%20Support" target="_blank" rel="noopener">GBK Encoding Support</a></h3><p>同样是解决中文乱码问题，将 <code>GBK</code> 编码转换成 <code>UTF-8</code> 编码。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-3/006.png"> <img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-3/007.png"></p><h3 id="emmet"><a href="https://packagecontrol.io/packages/Emmet" target="_blank" rel="noopener">Emmet</a></h3><p>插件可以说是使用Sublime Text进行前端开发必不可少的插件</p><p>例如输入以下代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ul#jiang&gt;li.item$*4&gt;a&#123;Item $&#125;</span><br></pre></td></tr></table></figure><p>便可自动生成</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"jiang"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item3"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item4"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Item 4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-3/005.gif"></p><p>详情参考 <a href="https://www.w3cplus.com/tools/emmet-cheat-sheet.html" target="_blank" rel="noopener">前端开发必备！Emmet使用手册</a>，<a href="https://docs.emmet.io/abbreviations/syntax/" target="_blank" rel="noopener">Emmet 官方文档</a>。</p><h3 id="jsformat"><a href>JsFormat</a></h3><p>这是一款 JS 格式化的插件，<code>Ctrl</code> + <code>Alt</code> + <code>F</code> 对 JS 进行格式化。</p><h3 id="sidebarenhancements"><a href="https://packagecontrol.io/packages/SideBarEnhancements" target="_blank" rel="noopener">SideBarEnhancements</a></h3><p>是一款很实用的右键菜单增强插件，可以对左侧文件栏进行更多的操作，更多配置请点击标题。</p><p>在安装该插件前，在Sublime Text左侧FOLDERS栏中点击右键，只有三个功能。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-3/008.png"></p><p>通过Package Control安装SideBarEnhancements插件后</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-3/009.png"></p><p>可见功能增加了不少。</p><h3 id="trailingspaces"><a href="https://packagecontrol.io/packages/TrailingSpaces" target="_blank" rel="noopener">TrailingSpaces</a></h3><p>这款插件能高亮显示多余的空格和Tab，并一键去除，是处女座的福音。</p><p>一键删除多余空格（需配置） <code>Ctrl</code> + <code>Alt</code> + <code>T</code></p><p>点击 <code>Preferences</code> -&gt; <code>Key Bindings – User</code> 加上代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; &quot;keys&quot;: [&quot;ctrl+alt+t&quot;], &quot;command&quot;: &quot;delete_trailing_spaces&quot; &#125;</span><br></pre></td></tr></table></figure><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-3/010.gif"></p><h3 id="alignment"><a href="https://packagecontrol.io/packages/Alignment" target="_blank" rel="noopener">Alignment</a></h3><p>"=" 对齐</p><p>默认快捷键 <code>Ctrl</code> + <code>Alt</code> + <code>A</code> 和QQ截屏冲突，可设置其他快捷键如：<code>Ctrl</code> + <code>Alt</code> + <code>Shift</code> + <code>A</code>:</p><p>点击 <code>Preferences</code> -&gt; <code>Key Bindings – User</code> 加上代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; &quot;keys&quot;: [&quot;ctrl+alt+shift+a&quot;], &quot;command&quot;: &quot;alignment&quot; &#125;</span><br></pre></td></tr></table></figure><p>先选择要对齐的文本，如下图：</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-3/011.gif"></p><h3 id="sublimecodeintel"><a href="https://packagecontrol.io/packages/SublimeCodeIntel" target="_blank" rel="noopener">SublimeCodeIntel</a></h3><p>为代码补全插件，支持 JavaScript, Mason, XBL, XUL, RHTML, SCSS, Python, HTML, Ruby, Python3, XML, Sass, XSLT, Django, HTML5, Perl, CSS, Twig, Less, Smarty, Node.js, Tcl, TemplateToolkit, PHP 等多种语言。</p><p>该插件安装时间可能较长，需要耐心等待。</p><h3 id="docblockr"><a href="https://packagecontrol.io/packages/DocBlockr" target="_blank" rel="noopener">DocBlockr</a></h3><p>生成优美的注释，更多配置请点击标题。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-3/012.gif"></p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-3/013.gif"></p><h3 id="colorpicker"><a href="https://packagecontrol.io/packages/ColorPicker" target="_blank" rel="noopener">Color​Picker</a></h3><p>调色板，默认 <code>Ctrl</code> + <code>Alt</code> + <code>C</code> ，但与 <code>ConvertToUTF8</code> 快捷键冲突。</p><p>解决方法：更改 <code>ConvertToUTF8</code> 快捷键为 <code>Ctrl</code> + <code>Alt</code> + <code>Shift</code> + <code>C</code> 。</p><p>点击 <code>Preferences</code> -&gt; <code>Browse Packages...</code> -&gt; <code>ConvertToUTF8</code> -&gt; <code>Default (Windows).sublime-keymap</code>(根据你的操作系统，打开相应文件) -&gt; 就不用说了吧~</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-3/014.png"></p><h3 id="filediffs"><a href="https://packagecontrol.io/packages/FileDiffs" target="_blank" rel="noopener">FileDiffs</a></h3><p>强大的比较代码不同工具。</p><p>右键标签页，出现 <code>FileDiffs Menu</code> 或者 <code>Diff with Tab…</code> 选择对应文件比较即可。</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-3/015.gif"></p><h3 id="tag"><a href="https://packagecontrol.io/packages/Tag" target="_blank" rel="noopener">Tag</a></h3><p>这是HTML/XML标签缩进、补全、排版和校验工具。使用方法如下图：</p><p><img class="lazyload"  data-src="https://img.xungejiang.com/static/images/16-7-3/003.png"></p><p>暂时没有快捷键。</p><h2 id="markdown-插件">Markdown 插件</h2><h3 id="markdown-preview"><a href="https://packagecontrol.io/packages/Markdown%20Preview" target="_blank" rel="noopener">Markdown Preview</a></h3><p>Markdown Preview 可以实时将 markdown 文件在浏览器上显示。</p><p>快捷键设置如下</p><p>点击 Preferences --&gt; 选择 Key Bindings User，输入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; &quot;keys&quot;: [&quot;alt+m&quot;], &quot;command&quot;: &quot;markdown_preview&quot;, &quot;args&quot;: &#123;&quot;target&quot;: &quot;browser&quot;, &quot;parser&quot;:&quot;markdown&quot;&#125; &#125;</span><br></pre></td></tr></table></figure><p><strong>Alt + M</strong> 为在浏览器显示</p><p><strong>Ctrl + B</strong> 为转换成 html 文件</p><p><strong>记得和之前的快捷键用逗号隔开</strong></p><h3 id="markdown-extended-monokai-extended"><a href="https://packagecontrol.io/packages/Markdown%20Extended" target="_blank" rel="noopener">Markdown Extended</a> + <a href="https://packagecontrol.io/packages/Monokai%20Extendedw" target="_blank" rel="noopener">Monokai Extended</a></h3><p>我最爱用的 Markdown 主题</p><h3 id="markdown-editing"><a href="https://packagecontrol.io/packages/MarkdownEditing" target="_blank" rel="noopener">Markdown Editing</a></h3><p>输入 "mdi + tab" 会自动插入下面的图片标记</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</span><br></pre></td></tr></table></figure><p>输入 "mdl + tab" 会自动生成下面的链接标记</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[](link)</span><br></pre></td></tr></table></figure><h2 id="sublime-更改字体">Sublime 更改字体</h2><p>Sublime自带的英文字体是 <code>Consola</code> ，非常好看，但是中文默认是宋体，不太协调，所以这里可以改成 <code>YaHeiConsola</code> 字体，英文是 <code>Consola</code>，中文是 <code>微软雅黑</code>。</p><p>下载字体 <a href="https://pan.baidu.com/s/1pKgTFsv" target="_blank" rel="noopener">YaHeiConsola</a>，右键安装。</p><p>在Menu 中点击 <strong>Preference</strong> -&gt; <strong>Setting-User</strong>, 添加</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="attr">    "font_face":</span> <span class="string">"YaHeiConsola"</span><span class="string">,</span></span><br><span class="line"><span class="attr">    "font_size":</span> <span class="number">12</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：参数之间用逗号隔开</p></blockquote><h2 id="总结">总结</h2><p>Sublime 还有很多功能，例如可以编译很多编程语言。这是博主写的 <a href="https://xungejiang.com/2016/07/07/sublime-C/">Sublime Text 3 设置C/C++编译环境</a> 可以参考。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单介绍一下刚开始使用 sublime 的配置方式和插件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="瞎折腾" scheme="https://xungejiang.com/categories/%E7%9E%8E%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="sublime" scheme="https://xungejiang.com/tags/sublime/"/>
    
      <category term="plugin" scheme="https://xungejiang.com/tags/plugin/"/>
    
  </entry>
  
</feed>
