{"compress":true,"commitItems":[["21ed5f2f-350c-4e25-a35e-1b428105a0c0",1544441146451,"---\nlayout: post\ntitle: 我是如何在黑苹果中编译安装 TensorFlow-GPU 1.8\ntags:\n  - mac\n  - tensorflow\n  - gpu\ncategories: tensorflow\nauthor: xunge\n---\n\n* content\n{:toc}\n\n之前一直使用 Ubuntu Linux 系统作为 TensorFlow 机器学习的服务器，但是相对于 macOS 来说，无论是界面美化还是应用覆盖都是远远强于 Ubuntu 的，所以计划安装一个黑苹果作为 TensorFlow 的服务器\n\n但是因为 TensorFlow 在 1.2 版本后不再支持 macOS 的 GPU 版本，只能通过编译源代码进行安装，过程较为繁杂，所以在此记录\n\n首先确定 Mac 显卡是 NVIDIA 显卡，且compute capabilities >= 3.0，[点击这里](https://developer.nvidia.com/cuda-gpus) 查看你的显卡型号是否支持\n\n\n\n\n## 环境概览\n\n软件 | 版本号\n---- | ----\nmacOS High Sierra | 10.13.4\nTensorFlow | 1.8\npython | 3.6.4\nNVIDIA Web-Drivers | 387.10.10.10.30.106\nCUDA-Drivers | 387.178\nCUDA Toolkit | 9.1\ncuDNN | 7.0.5\nbazel | 0.10.0\nXcode | 8.3.2\nCommand Line Tools for Xcode | 8.3.2\n\n## 环境搭建\n\n### 安装 Homebrew\n\n在终端输入下面命令安装 Homebrew\n\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n### 安装 coreutils，llvm，OpenMP\n\n```\nbrew install coreutils llvm cliutils/apple/libomp\n```\n\n### 安装 Python 依赖\n\n建议使用 Anaconda 包管理和 Virtualenv 虚拟环境等安装 Python\n\n```\npip install six numpy wheel\n```\n\n### 安装 bazel\n\n下载 [0.10.0](https://github.com/bazelbuild/bazel/releases) 版本中的 `bazel-0.10.0-installer-darwin-x86_64.sh` 文件\n\n需要注意，这里必须是 0.10.0 版本，新或旧都能导致编译失败\n\n在下载目录打开终端，输入下面命令进行安装\n\n```\nchmod +x bazel-0.10.0-installer-darwin-x86_64.sh\n./bazel-0.10.0-installer-darwin-x86_64.sh\n```\n\n### \b降级 Xcode 到 8.3.2\n\n下载 `Xcode 8.3.2` 和 `Command Line Tools for Xcode 8.3.2`，Xcode 9 需要降级，因为编译 TensorFlow 只能使用 Xcode 8，官网下载需要登录苹果账号，[官网下载链接](https://developer.apple.com/download/more/)，按名称排列即可快速找到。\n\n- `Xcode8.3.2.xip` (4.49GB) 下载后解压，\b重命名为 `Xcode8.3.2` 并复制到 `应用程序` 即可\n- `CommandLineToolsforXcode8.3.2.dmg` (166.1MB) 下载后\b安装即可\n\n使用下面的命令在终端激活 Xcode 8.3.2\n\n```\nsudo xcode-select -s /Applications/Xcode8.3.2.app\n```\n\n换回 Xcode 9 可以用\n\n```\n$ sudo xcode-select -s /Applications/Xcode.app\n```\n\n### NVIDIA\n\n#### (1) 安装 NVIDIA Web-Drivers\n\n下载 `NVIDIA Web-Drivers` 驱动，根据不同的 Mac 系统进行下载，[点击这里](https://www.tonymacx86.com/nvidia-drivers/) 下载，支持 macOS 10.13.4 的版本为 387.10.10.10.30.106\n\n- `WebDriver-387.10.10.10.30.106.pkg` (63.9MB) 下载后\b安装即可\n\n#### (2) 安装 CUDA-Drivers\n\n下载 `CUDA-Drivers` 驱动，支持 CUDA 9.1 的版本号为 387.178，[官网](https://www.nvidia.cn/object/macosx-cuda-387.178-driver-cn.html) 下载、 [百度云](https://pan.baidu.com/s/1GyoCyuh-hhJtEgFC0XS0IQ) \b下载\n\n- `cudadriver_387.178_macos.dmg` (39.9MB) 下载后\b安装即可\n\n#### (3) 安装 CUDA Toolkit 9.1\n\n下载 `CUDA Toolkit 9.1`，[官网](https://developer.nvidia.com/cuda-91-download-archive?target_os=MacOSX&target_arch=x86_64&target_version=1013&target_type=dmglocal) 下载和 [百度云](https://pan.baidu.com/s/1zPU_2aC6_uK3P2j7v-RtEw) 下载\n\n- `cuda_9.1.128_mac.dmg` (1.53GB) 下载后\b安装即可\n\n配置 CUDA 环境，编辑 `~/.bash_profile` 文件，如果安装了zsh则编辑 `~/.zshrc` 文件，打开终端：\n\n```\nopen -e .bash_profile\n```\n\n然后在弹出的文件中添加：\n\n```\nexport CUDA_HOME=/usr/local/cuda\nexport DYLD_LIBRARY_PATH=/usr/local/cuda/lib:/usr/local/cuda/extras/CUPTI/lib\nexport LD_LIBRARY_PATH=$DYLD_LIBRARY_PATH\nexport PATH=$PATH:$DYLD_LIBRARY_PATH\n```\n\n执行命令重启bash_profile\n\n```\n. ~/.bash_profile\n```\n\n检测CUDA能否正常运行：\n\n```\ncd /usr/local/cuda/samples\nsudo make -C 1_Utilities/deviceQuery\n./bin/x86_64/darwin/release/deviceQuery\n```\n\n第一次编译时可能需要同意苹果协议，按照要求填 `agree` 即可\n\n最终结果为 `Result = PASS` 则安装正确。\n\n#### (4) 安装 cuDNN 7.0.5\n\n下载 `cuDNN 7.0.5`，该版本支持 CUDA 9.1 ，官网下载时需要登录 NVIDIA 账号，[官网](https://developer.nvidia.com/rdp/cudnn-archive) 下载、 [百度云](https://pan.baidu.com/s/1wY5A75FzXbNVmf0ZAIwvkg) 下载\n\n- `cudnn-9.1-osx-x64-v7-ga.tgz` (340.3MB) 下载后解压，切换到解压缩的 `cuda` 目录，输入以下命令\n\n```\nsudo cp cuda/include/cudnn.h /usr/local/cuda/include\nsudo cp cuda/lib/libcudnn_static.a /usr/local/cuda/lib\nsudo cp cuda/lib/libcudnn.7.dylib /usr/local/cuda/lib\nsudo ln -s /usr/local/cuda/lib/libcudnn.7.dylib /usr/local/cuda/lib/libcudnn.dylib\nsudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib/libcudnn*\n```\n\n## 编译准备\n\n### 拉取 TensorFlow 源码 release 1.8 分支\n\n```\ngit clone https://github.com/tensorflow/tensorflow -b r1.8\ncd tensorflow\n```\n\n### 修改代码，使其与 macOS 兼容\n\n#### 替换掉以下三个文件的 align(sizeof(T))\n\n```\ncd tensorflow\nsed -i -e \"s/ __align__(sizeof(T))//g\" tensorflow/core/kernels/concat_lib_gpu_impl.cu.cc\nsed -i -e \"s/ __align__(sizeof(T))//g\" tensorflow/core/kernels/depthwise_conv_op_gpu.cu.cc\nsed -i -e \"s/ __align__(sizeof(T))//g\" tensorflow/core/kernels/split_lib_gpu.cu.cc\n```\n\n#### 解决找不到 'protobuf.bzl' 的问题\n\n我还遇到了以下错误\n\n```\nERROR: /Users/xunge/Desktop/tensorflow/tensorflow/tools/pip_package/BUILD:166:1: error loading package 'tensorflow': Encountered error while reading extension file 'protobuf.bzl': no such package '@protobuf_archive//': java.io.IOException: thread interrupted and referenced by '//tensorflow/tools/pip_package:build_pip_package'\n```\n\n[解决办法](https://github.com/tensorflow/tensorflow/issues/12979) 如下：\n\n```\nsed -i '\\@https://github.com/google/protobuf/archive/0b059a3d8a8f8aa40dde7bea55edca4ec5dfea66.tar.gz@d' tensorflow/workspace.bzl\n```\n\n#### 添加依赖头文件 nccl.h (如编译1.7不用做此步骤)\n\n下载 [nccl.h](https://github.com/NVIDIA/nccl/blob/master/src/nccl.h)，放在 `third_party/nccl` 文件夹内\n\n#### 修改 tensorflow/workspace.bzl 文件\n\n```\ntf_http_archive(\n    name = \"protobuf_archive\",\n    urls = [\n        \"https://mirror.bazel.build/github.com/google/protobuf/archive/396336eb961b75f03b25824fe86cf6490fb75e3a.tar.gz\",\n        \"https://github.com/google/protobuf/archive/396336eb961b75f03b25824fe86cf6490fb75e3a.tar.gz\",\n    ],\n    sha256 = \"846d907acf472ae233ec0882ef3a2d24edbbe834b80c305e867ac65a1f2c59e3\",\n    strip_prefix = \"protobuf-396336eb961b75f03b25824fe86cf6490fb75e3a\",\n)\n```\n\n搜索如上替换为如下\n\n```\ntf_http_archive(\n    name = \"protobuf_archive\",\n    urls = [\n        \"https://mirror.bazel.build/github.com/dtrebbien/protobuf/archive/50f552646ba1de79e07562b41f3999fe036b4fd0.tar.gz\",\n        \"https://github.com/dtrebbien/protobuf/archive/50f552646ba1de79e07562b41f3999fe036b4fd0.tar.gz\",\n    ],\n    sha256 = \"eb16b33431b91fe8cee479575cee8de202f3626aaf00d9bf1783c6e62b4ffbc7\",\n    strip_prefix = \"protobuf-50f552646ba1de79e07562b41f3999fe036b4fd0\",\n)\n```\n\n修复 third_party/gpus/cuda/BUILD.tpl 文件 -lgomp 报错\n\n```\nlinkopts = [\"-lgomp\"],\n```\n\n搜索如上，注释掉\n\n```\n# linkopts = [\"-lgomp\"],\n```\n\n## 开始编译\n\n### 编译配置\n\n在 TensorFlow 目录下输入以下命令进行命令配置\n\n```\n./configure\n```\n\n配置文件如下\n\n```\nYou have bazel 0.10 installed.\nPlease specify the location of python. [Default is /Users/user/.pyenv/versions/tensorflow-gpu/bin/python]: \n\n\nFound possible Python library paths:\n  /Users/user/.pyenv/versions/tensorflow-gpu/lib/python3.6/site-packages\nPlease input the desired Python library path to use.  Default is [/Users/user/.pyenv/versions/tensorflow-gpu/lib/python3.6/site-packages]\n\nDo you wish to build TensorFlow with Google Cloud Platform support? [Y/n]: n\nNo Google Cloud Platform support will be enabled for TensorFlow.\n\nDo you wish to build TensorFlow with Hadoop File System support? [Y/n]: n\nNo Hadoop File System support will be enabled for TensorFlow.\n\nDo you wish to build TensorFlow with Amazon S3 File System support? [Y/n]: n\nNo Amazon S3 File System support will be enabled for TensorFlow.\n\nDo you wish to build TensorFlow with Apache Kafka Platform support? [y/N]: n\nNo Apache Kafka Platform support will be enabled for TensorFlow.\n\nDo you wish to build TensorFlow with XLA JIT support? [y/N]: n\nNo XLA JIT support will be enabled for TensorFlow.\n\nDo you wish to build TensorFlow with GDR support? [y/N]: n\nNo GDR support will be enabled for TensorFlow.\n\nDo you wish to build TensorFlow with VERBS support? [y/N]: n\nNo VERBS support will be enabled for TensorFlow.\n\nDo you wish to build TensorFlow with OpenCL SYCL support? [y/N]: n\nNo OpenCL SYCL support will be enabled for TensorFlow.\n\nDo you wish to build TensorFlow with CUDA support? [y/N]: y\nCUDA support will be enabled for TensorFlow.\n\nPlease specify the CUDA SDK version you want to use, e.g. 7.0. [Leave empty to default to CUDA 9.0]: 9.1\n\n\nPlease specify the location where CUDA 9.1 toolkit is installed. Refer to README.md for more details. [Default is /usr/local/cuda]: \n\n\nPlease specify the cuDNN version you want to use. [Leave empty to default to cuDNN 7.0]: \n\n\nPlease specify the location where cuDNN 7 library is installed. Refer to README.md for more details. [Default is /usr/local/cuda]:\n\n\nPlease specify a list of comma-separated Cuda compute capabilities you want to build with.\nYou can find the compute capability of your device at: https://developer.nvidia.com/cuda-gpus.\nPlease note that each additional compute capability significantly increases your build time and binary size. [Default is: 3.5,5.2]6.1\n\n\nDo you want to use clang as CUDA compiler? [y/N]: n\nnvcc will be used as CUDA compiler.\n\nPlease specify which gcc should be used by nvcc as the host compiler. [Default is /usr/bin/gcc]: \n\n\nDo you wish to build TensorFlow with MPI support? [y/N]: n\nNo MPI support will be enabled for TensorFlow.\n\nPlease specify optimization flags to use during compilation when bazel option \"--config=opt\" is specified [Default is -march=native]: \n\n\nWould you like to interactively configure ./WORKSPACE for Android builds? [y/N]: \nNot configuring the WORKSPACE for Android builds.\n\nPreconfigured Bazel build configs. You can use any of the below by adding \"--config=<>\" to your build command. See tools/bazel.rc for more details.\n\t--config=mkl         \t# Build with MKL support.\n\t--config=monolithic  \t# Config for mostly static monolithic build.\nConfiguration finished\n```\n\n### 编译\n\n```\nbazel clean --expunge\nbazel build --config=cuda --config=opt --cxxopt=\"-D_GLIBCXX_USE_CXX11_ABI=0\" --action_env PATH --action_env LD_LIBRARY_PATH --action_env DYLD_LIBRARY_PATH //tensorflow/tools/pip_package:build_pip_package\n```\n如果看到\n\n```\nINFO: Build completed successfully, 9160 total actions\n```\n\n就说明编译成功\n\n### 创建wheel文件并安装\n\n```\n$ bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg\n$ cd ~\n$ sudo pip install /tmp/tensorflow_pkg/tensorflow-1.8-cp36-cp36m-macosx_10_13_x86_64.whl\n```\n\n本人编译完成后的文件为 `tensorflow-1.8.0-cp36-cp36m-macosx_10_7_x86_64.whl` [百度云下载](https://pan.baidu.com/s/14o0uIOutmW866ftbf8nvuA)\n\n最后提供本人 Z270 + i7-7700k 的黑苹果 [EFI](https://pan.baidu.com/s/1ttgZ1cralJrTYkZS5BmwnQ)\n\n参考文章：\n\n- [【tensorflow】macOS 10.13.4 编译 GPU 版本的 TensorFlow 1.8](https://www.shifeng1993.com/2018/05/26/tensorflow_gpu_macos/)\n",[[1544441089042,["jiangxunzhi@xunge-2.local",[[-1,136,"* content\n{:toc}\n"]],[136,153],[136,136]]],[1544441089559,["jiangxunzhi@xunge-2.local",[[-1,136,"\n"]],[136,136],[135,135]]],[1544441097906,["jiangxunzhi@xunge-2.local",[[1,330,"\n"]],[328,328],[329,329]]],[1544441098050,["jiangxunzhi@xunge-2.local",[[1,331,"\n"]],[329,329],[330,330]]],[1544441113471,["jiangxunzhi@xunge-2.local",[[1,330,"<!-- more -->\n"]],[330,330],[344,344]]],[1544441173605,["jiangxunzhi@xunge-2.local",[[1,767,"shell"]],[767,767],[772,772]]],[1544441177967,["jiangxunzhi@xunge-2.local",[[1,910,"shell"]],[910,910],[915,915]]],[1544441179215,["jiangxunzhi@xunge-2.local",[[1,1038,"shell"]],[1038,1038],[1043,1043]]],[1544441194478,["jiangxunzhi@xunge-2.local",[[1,1259,"shell"]],[1259,1259],[1264,1264]]],[1544441209680,["jiangxunzhi@xunge-2.local",[[1,1717,"shell"]],[1717,1717],[1722,1722]]],[1544441210879,["jiangxunzhi@xunge-2.local",[[1,1797,"shell"]],[1797,1797],[1802,1802]]],[1544441214362,["jiangxunzhi@xunge-2.local",[[1,2723,"shell"]],[2723,2723],[2728,2728]]],[1544441215960,["jiangxunzhi@xunge-2.local",[[1,2773,"shell"]],[2773,2773],[2778,2778]]],[1544441217523,["jiangxunzhi@xunge-2.local",[[1,2997,"shell"]],[2997,2997],[3002,3002]]],[1544441219689,["jiangxunzhi@xunge-2.local",[[1,3044,"shell"]],[3044,3044],[3049,3049]]],[1544441222278,["jiangxunzhi@xunge-2.local",[[1,3495,"shell"]],[3495,3495],[3500,3500]]],[1544441224360,["jiangxunzhi@xunge-2.local",[[1,3877,"shell"]],[3877,3877],[3882,3882]]],[1544441225561,["jiangxunzhi@xunge-2.local",[[1,4021,"shell"]],[4021,4021],[4026,4026]]],[1544441227535,["jiangxunzhi@xunge-2.local",[[1,4354,"shell"]],[4354,4354],[4359,4359]]],[1544441230384,["jiangxunzhi@xunge-2.local",[[1,4763,"shell"]],[4763,4763],[4768,4768]]],[1544441232072,["jiangxunzhi@xunge-2.local",[[1,5074,"shell"]],[5074,5074],[5079,5079]]],[1544441235224,["jiangxunzhi@xunge-2.local",[[1,5545,"shell"]],[5545,5545],[5550,5550]]],[1544441237489,["jiangxunzhi@xunge-2.local",[[1,6060,"shell"]],[6060,6060],[6065,6065]]],[1544441239216,["jiangxunzhi@xunge-2.local",[[1,6107,"shell"]],[6107,6107],[6112,6112]]],[1544441241736,["jiangxunzhi@xunge-2.local",[[1,6195,"shell"]],[6195,6195],[6200,6200]]],[1544441242840,["jiangxunzhi@xunge-2.local",[[1,6229,"shell"]],[6229,6229],[6234,6234]]],[1544441247167,["jiangxunzhi@xunge-2.local",[[1,9412,"shell"]],[9412,9412],[9417,9417]]],[1544441248478,["jiangxunzhi@xunge-2.local",[[1,9657,"shell"]],[9657,9657],[9662,9662]]],[1544441250542,["jiangxunzhi@xunge-2.local",[[1,9753,"shell"]],[9753,9753],[9758,9758]]]],null,"jiangxunzhi@xunge-2.local"]]}